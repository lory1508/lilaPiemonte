{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/metergroup/index.mjs?nuxt_component=async&nuxt_component_name=MeterGroup&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport MeterGroupStyle from 'primevue/metergroup/style';\nimport { createElementBlock, openBlock, mergeProps, Fragment, renderList, renderSlot, createElementVNode, normalizeClass, toDisplayString, resolveComponent, createCommentVNode, createVNode } from 'vue';\n\nvar script$2 = {\n  name: 'MeterGroup',\n  \"extends\": BaseComponent,\n  props: {\n    value: {\n      type: Array,\n      \"default\": null\n    },\n    min: {\n      type: Number,\n      \"default\": 0\n    },\n    max: {\n      type: Number,\n      \"default\": 100\n    },\n    orientation: {\n      type: String,\n      \"default\": 'horizontal'\n    },\n    labelPosition: {\n      type: String,\n      \"default\": 'end'\n    },\n    labelOrientation: {\n      type: String,\n      \"default\": 'horizontal'\n    }\n  },\n  style: MeterGroupStyle,\n  provide: function provide() {\n    return {\n      $pcMeterGroup: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _typeof$1(o) { \"@babel/helpers - typeof\"; return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$1(o); }\nfunction _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$1(t) { var i = _toPrimitive$1(t, \"string\"); return \"symbol\" == _typeof$1(i) ? i : i + \"\"; }\nfunction _toPrimitive$1(t, r) { if (\"object\" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$1(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script$1 = {\n  name: 'MeterGroupLabel',\n  hostName: 'MeterGroup',\n  \"extends\": BaseComponent,\n  inheritAttrs: false,\n  inject: ['$pcMeterGroup'],\n  props: {\n    value: {\n      type: Array,\n      \"default\": null\n    },\n    labelPosition: {\n      type: String,\n      \"default\": 'end'\n    },\n    labelOrientation: {\n      type: String,\n      \"default\": 'horizontal'\n    }\n  },\n  computed: {\n    dataP: function dataP() {\n      return cn(_defineProperty$1({}, this.$pcMeterGroup.labelOrientation, this.$pcMeterGroup.labelOrientation));\n    }\n  }\n};\n\nvar _hoisted_1$1 = [\"data-p\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"ol\", mergeProps({\n    \"class\": _ctx.cx('labelList'),\n    \"data-p\": $options.dataP\n  }, _ctx.ptm('labelList')), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.value, function (val, index) {\n    return openBlock(), createElementBlock(\"li\", mergeProps({\n      key: index + '_label',\n      \"class\": _ctx.cx('label'),\n      ref_for: true\n    }, _ctx.ptm('label')), [renderSlot(_ctx.$slots, \"icon\", {\n      value: val,\n      \"class\": normalizeClass(_ctx.cx('labelIcon'))\n    }, function () {\n      return [val.icon ? (openBlock(), createElementBlock(\"i\", mergeProps({\n        key: 0,\n        \"class\": [val.icon, _ctx.cx('labelIcon')],\n        style: {\n          color: val.color\n        },\n        ref_for: true\n      }, _ctx.ptm('labelIcon')), null, 16)) : (openBlock(), createElementBlock(\"span\", mergeProps({\n        key: 1,\n        \"class\": _ctx.cx('labelMarker'),\n        style: {\n          backgroundColor: val.color\n        },\n        ref_for: true\n      }, _ctx.ptm('labelMarker')), null, 16))];\n    }), createElementVNode(\"span\", mergeProps({\n      \"class\": _ctx.cx('labelText'),\n      ref_for: true\n    }, _ctx.ptm('labelText')), toDisplayString(val.label) + \" (\" + toDisplayString(_ctx.$parentInstance.percentValue(val.value)) + \")\", 17)], 16);\n  }), 128))], 16, _hoisted_1$1);\n}\n\nscript$1.render = render$1;\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script = {\n  name: 'MeterGroup',\n  \"extends\": script$2,\n  inheritAttrs: false,\n  methods: {\n    getPTOptions: function getPTOptions(key, value, index) {\n      return this.ptm(key, {\n        context: {\n          value: value,\n          index: index\n        }\n      });\n    },\n    percent: function percent() {\n      var meter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var percentOfItem = (meter - this.min) / (this.max - this.min) * 100;\n      return Math.round(Math.max(0, Math.min(100, percentOfItem)));\n    },\n    percentValue: function percentValue(meter) {\n      return this.percent(meter) + '%';\n    },\n    meterCalculatedStyles: function meterCalculatedStyles(val) {\n      return {\n        backgroundColor: val.color,\n        width: this.orientation === 'horizontal' && this.percentValue(val.value),\n        height: this.orientation === 'vertical' && this.percentValue(val.value)\n      };\n    }\n  },\n  computed: {\n    totalPercent: function totalPercent() {\n      return this.percent(this.value.reduce(function (total, val) {\n        return total + val.value;\n      }, 0));\n    },\n    percentages: function percentages() {\n      var sum = 0;\n      var sumsArray = [];\n      this.value.forEach(function (item) {\n        sum += item.value;\n        sumsArray.push(sum);\n      });\n      return sumsArray;\n    },\n    dataP: function dataP() {\n      return cn(_defineProperty({}, this.orientation, this.orientation));\n    }\n  },\n  components: {\n    MeterGroupLabel: script$1\n  }\n};\n\nvar _hoisted_1 = [\"aria-valuemin\", \"aria-valuemax\", \"aria-valuenow\", \"data-p\"];\nvar _hoisted_2 = [\"data-p\"];\nvar _hoisted_3 = [\"data-p\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_MeterGroupLabel = resolveComponent(\"MeterGroupLabel\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    role: \"meter\",\n    \"aria-valuemin\": _ctx.min,\n    \"aria-valuemax\": _ctx.max,\n    \"aria-valuenow\": $options.totalPercent,\n    \"data-p\": $options.dataP\n  }, _ctx.ptmi('root')), [_ctx.labelPosition === 'start' ? renderSlot(_ctx.$slots, \"label\", {\n    key: 0,\n    value: _ctx.value,\n    totalPercent: $options.totalPercent,\n    percentages: $options.percentages\n  }, function () {\n    return [createVNode(_component_MeterGroupLabel, {\n      value: _ctx.value,\n      labelPosition: _ctx.labelPosition,\n      labelOrientation: _ctx.labelOrientation,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"value\", \"labelPosition\", \"labelOrientation\", \"unstyled\", \"pt\"])];\n  }) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"start\", {\n    value: _ctx.value,\n    totalPercent: $options.totalPercent,\n    percentages: $options.percentages\n  }), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('meters'),\n    \"data-p\": $options.dataP\n  }, _ctx.ptm('meters')), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.value, function (val, index) {\n    return renderSlot(_ctx.$slots, \"meter\", {\n      key: index,\n      value: val,\n      index: index,\n      \"class\": normalizeClass(_ctx.cx('meter')),\n      orientation: _ctx.orientation,\n      size: $options.percentValue(val.value),\n      totalPercent: $options.totalPercent\n    }, function () {\n      return [$options.percent(val.value) ? (openBlock(), createElementBlock(\"span\", mergeProps({\n        key: 0,\n        \"class\": _ctx.cx('meter'),\n        style: $options.meterCalculatedStyles(val),\n        \"data-p\": $options.dataP,\n        ref_for: true\n      }, $options.getPTOptions('meter', val, index)), null, 16, _hoisted_3)) : createCommentVNode(\"\", true)];\n    });\n  }), 128))], 16, _hoisted_2), renderSlot(_ctx.$slots, \"end\", {\n    value: _ctx.value,\n    totalPercent: $options.totalPercent,\n    percentages: $options.percentages\n  }), _ctx.labelPosition === 'end' ? renderSlot(_ctx.$slots, \"label\", {\n    key: 1,\n    value: _ctx.value,\n    totalPercent: $options.totalPercent,\n    percentages: $options.percentages\n  }, function () {\n    return [createVNode(_component_MeterGroupLabel, {\n      value: _ctx.value,\n      labelPosition: _ctx.labelPosition,\n      labelOrientation: _ctx.labelOrientation,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"value\", \"labelPosition\", \"labelOrientation\", \"unstyled\", \"pt\"])];\n  }) : createCommentVNode(\"\", true)], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAe,iBAAA,qBAAqB,MAAM,OAAO,cAAmF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","x_google_ignoreList":[0]}