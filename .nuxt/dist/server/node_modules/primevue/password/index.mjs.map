{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/password/index.mjs?nuxt_component=async&nuxt_component_name=Password&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport { isTouchDevice, relativePosition, getOuterWidth, absolutePosition, addStyle } from '@primeuix/utils/dom';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport EyeIcon from '@primevue/icons/eye';\nimport EyeSlashIcon from '@primevue/icons/eyeslash';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport BaseInput from '@primevue/core/baseinput';\nimport PasswordStyle from 'primevue/password/style';\nimport { resolveComponent, createElementBlock, openBlock, mergeProps, createVNode, renderSlot, createCommentVNode, createElementVNode, createBlock, resolveDynamicComponent, toDisplayString, withCtx, Transition } from 'vue';\n\nvar script$1 = {\n  name: 'BasePassword',\n  \"extends\": BaseInput,\n  props: {\n    promptLabel: {\n      type: String,\n      \"default\": null\n    },\n    mediumRegex: {\n      type: [String, RegExp],\n      \"default\": '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})' // eslint-disable-line\n    },\n    strongRegex: {\n      type: [String, RegExp],\n      \"default\": '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})' // eslint-disable-line\n    },\n    weakLabel: {\n      type: String,\n      \"default\": null\n    },\n    mediumLabel: {\n      type: String,\n      \"default\": null\n    },\n    strongLabel: {\n      type: String,\n      \"default\": null\n    },\n    feedback: {\n      type: Boolean,\n      \"default\": true\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    toggleMask: {\n      type: Boolean,\n      \"default\": false\n    },\n    hideIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    maskIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    showIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    unmaskIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    required: {\n      type: Boolean,\n      \"default\": false\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputProps: {\n      type: null,\n      \"default\": null\n    },\n    panelId: {\n      type: String,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelStyle: {\n      type: Object,\n      \"default\": null\n    },\n    panelProps: {\n      type: null,\n      \"default\": null\n    },\n    overlayId: {\n      type: String,\n      \"default\": null\n    },\n    overlayClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    overlayStyle: {\n      type: Object,\n      \"default\": null\n    },\n    overlayProps: {\n      type: null,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    autofocus: {\n      type: Boolean,\n      \"default\": null\n    }\n  },\n  style: PasswordStyle,\n  provide: function provide() {\n    return {\n      $pcPassword: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _typeof$1(o) { \"@babel/helpers - typeof\"; return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$1(o); }\nfunction _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$1(t) { var i = _toPrimitive$1(t, \"string\"); return \"symbol\" == _typeof$1(i) ? i : i + \"\"; }\nfunction _toPrimitive$1(t, r) { if (\"object\" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$1(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script = {\n  name: 'Password',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change', 'focus', 'blur', 'invalid'],\n  inject: {\n    $pcFluid: {\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      overlayVisible: false,\n      meter: null,\n      infoText: null,\n      focused: false,\n      unmasked: false\n    };\n  },\n  mediumCheckRegExp: null,\n  strongCheckRegExp: null,\n  resizeListener: null,\n  scrollHandler: null,\n  overlay: null,\n  mounted: function mounted() {\n    this.infoText = this.promptText;\n    this.mediumCheckRegExp = new RegExp(this.mediumRegex);\n    this.strongCheckRegExp = new RegExp(this.strongRegex);\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindResizeListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndex.clear(this.overlay);\n      this.overlay = null;\n    }\n  },\n  methods: {\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      addStyle(el, {\n        position: 'absolute',\n        top: '0'\n      });\n      this.alignOverlay();\n      this.bindScrollListener();\n      this.bindResizeListener();\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.overlay = null;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    alignOverlay: function alignOverlay() {\n      if (this.appendTo === 'self') {\n        relativePosition(this.overlay, this.$refs.input.$el);\n      } else {\n        this.overlay.style.minWidth = getOuterWidth(this.$refs.input.$el) + 'px';\n        absolutePosition(this.overlay, this.$refs.input.$el);\n      }\n    },\n    testStrength: function testStrength(str) {\n      var level = 0;\n      if (this.strongCheckRegExp.test(str)) level = 3;else if (this.mediumCheckRegExp.test(str)) level = 2;else if (str.length) level = 1;\n      return level;\n    },\n    onInput: function onInput(event) {\n      this.writeValue(event.target.value, event);\n      this.$emit('change', event);\n    },\n    onFocus: function onFocus(event) {\n      this.focused = true;\n      if (this.feedback) {\n        this.setPasswordMeter(this.d_value);\n        this.overlayVisible = true;\n      }\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focused = false;\n      if (this.feedback) {\n        this.overlayVisible = false;\n      }\n      this.$emit('blur', event);\n    },\n    onKeyUp: function onKeyUp(event) {\n      if (this.feedback) {\n        var value = event.target.value;\n        var _this$checkPasswordSt = this.checkPasswordStrength(value),\n          meter = _this$checkPasswordSt.meter,\n          label = _this$checkPasswordSt.label;\n        this.meter = meter;\n        this.infoText = label;\n        if (event.code === 'Escape') {\n          this.overlayVisible && (this.overlayVisible = false);\n          return;\n        }\n        if (!this.overlayVisible) {\n          this.overlayVisible = true;\n        }\n      }\n    },\n    setPasswordMeter: function setPasswordMeter() {\n      if (!this.d_value) {\n        this.meter = null;\n        this.infoText = this.promptText;\n        return;\n      }\n      var _this$checkPasswordSt2 = this.checkPasswordStrength(this.d_value),\n        meter = _this$checkPasswordSt2.meter,\n        label = _this$checkPasswordSt2.label;\n      this.meter = meter;\n      this.infoText = label;\n      if (!this.overlayVisible) {\n        this.overlayVisible = true;\n      }\n    },\n    checkPasswordStrength: function checkPasswordStrength(value) {\n      var label = null;\n      var meter = null;\n      switch (this.testStrength(value)) {\n        case 1:\n          label = this.weakText;\n          meter = {\n            strength: 'weak',\n            width: '33.33%'\n          };\n          break;\n        case 2:\n          label = this.mediumText;\n          meter = {\n            strength: 'medium',\n            width: '66.66%'\n          };\n          break;\n        case 3:\n          label = this.strongText;\n          meter = {\n            strength: 'strong',\n            width: '100%'\n          };\n          break;\n        default:\n          label = this.promptText;\n          meter = null;\n          break;\n      }\n      return {\n        label: label,\n        meter: meter\n      };\n    },\n    onInvalid: function onInvalid(event) {\n      this.$emit('invalid', event);\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.input.$el, function () {\n          if (_this.overlayVisible) {\n            _this.overlayVisible = false;\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this2 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this2.overlayVisible && !isTouchDevice()) {\n            _this2.overlayVisible = false;\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    onMaskToggle: function onMaskToggle() {\n      this.unmasked = !this.unmasked;\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n    }\n  },\n  computed: {\n    inputType: function inputType() {\n      return this.unmasked ? 'text' : 'password';\n    },\n    weakText: function weakText() {\n      return this.weakLabel || this.$primevue.config.locale.weak;\n    },\n    mediumText: function mediumText() {\n      return this.mediumLabel || this.$primevue.config.locale.medium;\n    },\n    strongText: function strongText() {\n      return this.strongLabel || this.$primevue.config.locale.strong;\n    },\n    promptText: function promptText() {\n      return this.promptLabel || this.$primevue.config.locale.passwordPrompt;\n    },\n    overlayUniqueId: function overlayUniqueId() {\n      return this.$id + '_overlay';\n    },\n    containerDataP: function containerDataP() {\n      return cn({\n        fluid: this.$fluid\n      });\n    },\n    meterDataP: function meterDataP() {\n      var _this$meter, _this$meter2;\n      return cn(_defineProperty$1({}, (_this$meter = this.meter) === null || _this$meter === void 0 ? void 0 : _this$meter.strength, (_this$meter2 = this.meter) === null || _this$meter2 === void 0 ? void 0 : _this$meter2.strength));\n    },\n    overlayDataP: function overlayDataP() {\n      return cn(_defineProperty$1({}, 'portal-' + this.appendTo, 'portal-' + this.appendTo));\n    }\n  },\n  components: {\n    InputText: InputText,\n    Portal: Portal,\n    EyeSlashIcon: EyeSlashIcon,\n    EyeIcon: EyeIcon\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"data-p\"];\nvar _hoisted_2 = [\"id\", \"data-p\"];\nvar _hoisted_3 = [\"data-p\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_InputText = resolveComponent(\"InputText\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    \"data-p\": $options.containerDataP\n  }, _ctx.ptmi('root')), [createVNode(_component_InputText, mergeProps({\n    ref: \"input\",\n    id: _ctx.inputId,\n    type: $options.inputType,\n    \"class\": [_ctx.cx('pcInputText'), _ctx.inputClass],\n    style: _ctx.inputStyle,\n    defaultValue: _ctx.d_value,\n    name: _ctx.$formName,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-controls\": _ctx.overlayProps && _ctx.overlayProps.id || _ctx.overlayId || _ctx.panelProps && _ctx.panelProps.id || _ctx.panelId || $options.overlayUniqueId,\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-haspopup\": true,\n    placeholder: _ctx.placeholder,\n    required: _ctx.required,\n    fluid: _ctx.fluid,\n    disabled: _ctx.disabled,\n    variant: _ctx.variant,\n    invalid: _ctx.invalid,\n    size: _ctx.size,\n    autofocus: _ctx.autofocus,\n    onInput: $options.onInput,\n    onFocus: $options.onFocus,\n    onBlur: $options.onBlur,\n    onKeyup: $options.onKeyUp,\n    onInvalid: $options.onInvalid\n  }, _ctx.inputProps, {\n    \"data-p-has-e-icon\": _ctx.toggleMask,\n    pt: _ctx.ptm('pcInputText'),\n    unstyled: _ctx.unstyled\n  }), null, 16, [\"id\", \"type\", \"class\", \"style\", \"defaultValue\", \"name\", \"aria-labelledby\", \"aria-label\", \"aria-controls\", \"aria-expanded\", \"placeholder\", \"required\", \"fluid\", \"disabled\", \"variant\", \"invalid\", \"size\", \"autofocus\", \"onInput\", \"onFocus\", \"onBlur\", \"onKeyup\", \"onInvalid\", \"data-p-has-e-icon\", \"pt\", \"unstyled\"]), _ctx.toggleMask && $data.unmasked ? renderSlot(_ctx.$slots, _ctx.$slots.maskicon ? 'maskicon' : 'hideicon', {\n    key: 0,\n    toggleCallback: $options.onMaskToggle\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.maskIcon ? 'i' : 'EyeSlashIcon'), mergeProps({\n      \"class\": [_ctx.cx('maskIcon'), _ctx.maskIcon],\n      onClick: $options.onMaskToggle\n    }, _ctx.ptm('maskIcon')), null, 16, [\"class\", \"onClick\"]))];\n  }) : createCommentVNode(\"\", true), _ctx.toggleMask && !$data.unmasked ? renderSlot(_ctx.$slots, _ctx.$slots.unmaskicon ? 'unmaskicon' : 'showicon', {\n    key: 1,\n    toggleCallback: $options.onMaskToggle\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.unmaskIcon ? 'i' : 'EyeIcon'), mergeProps({\n      \"class\": [_ctx.cx('unmaskIcon'), _ctx.unmaskIcon],\n      onClick: $options.onMaskToggle\n    }, _ctx.ptm('unmaskIcon')), null, 16, [\"class\", \"onClick\"]))];\n  }) : createCommentVNode(\"\", true), createElementVNode(\"span\", mergeProps({\n    \"class\": \"p-hidden-accessible\",\n    \"aria-live\": \"polite\"\n  }, _ctx.ptm('hiddenAccesible'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($data.infoText), 17), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            id: _ctx.overlayId || _ctx.panelId || $options.overlayUniqueId,\n            \"class\": [_ctx.cx('overlay'), _ctx.panelClass, _ctx.overlayClass],\n            style: [_ctx.overlayStyle, _ctx.panelStyle],\n            onClick: _cache[0] || (_cache[0] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            \"data-p\": $options.overlayDataP\n          }, _objectSpread(_objectSpread(_objectSpread({}, _ctx.panelProps), _ctx.overlayProps), _ctx.ptm('overlay'))), [renderSlot(_ctx.$slots, \"header\"), renderSlot(_ctx.$slots, \"content\", {}, function () {\n            return [createElementVNode(\"div\", mergeProps({\n              \"class\": _ctx.cx('content')\n            }, _ctx.ptm('content')), [createElementVNode(\"div\", mergeProps({\n              \"class\": _ctx.cx('meter')\n            }, _ctx.ptm('meter')), [createElementVNode(\"div\", mergeProps({\n              \"class\": _ctx.cx('meterLabel'),\n              style: {\n                width: $data.meter ? $data.meter.width : ''\n              },\n              \"data-p\": $options.meterDataP\n            }, _ctx.ptm('meterLabel')), null, 16, _hoisted_3)], 16), createElementVNode(\"div\", mergeProps({\n              \"class\": _ctx.cx('meterText')\n            }, _ctx.ptm('meterText')), toDisplayString($data.infoText), 17)], 16)];\n          }), renderSlot(_ctx.$slots, \"footer\")], 16, _hoisted_2)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAwB,eAAA,qBAAA,MAAkB,OAAe,cAAkC,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","x_google_ignoreList":[0]}