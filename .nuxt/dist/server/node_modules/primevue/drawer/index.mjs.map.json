{"file":"index.mjs","mappings":";AACA,wCAAgC,MAAA,OAAA,cAAA,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","names":[],"sources":["../../../../../../node_modules/primevue/drawer/index.mjs?nuxt_component=async&nuxt_component_name=Drawer&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport { focus, addClass } from '@primeuix/utils/dom';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport TimesIcon from '@primevue/icons/times';\nimport Button from 'primevue/button';\nimport FocusTrap from 'primevue/focustrap';\nimport Portal from 'primevue/portal';\nimport { unblockBodyScroll, blockBodyScroll } from 'primevue/utils';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport DrawerStyle from 'primevue/drawer/style';\nimport { resolveComponent, resolveDirective, createBlock, openBlock, withCtx, createElementBlock, createCommentVNode, mergeProps, createVNode, Transition, withDirectives, renderSlot, Fragment, createElementVNode, normalizeClass, toDisplayString, resolveDynamicComponent } from 'vue';\n\nvar script$1 = {\n  name: 'BaseDrawer',\n  \"extends\": BaseComponent,\n  props: {\n    visible: {\n      type: Boolean,\n      \"default\": false\n    },\n    position: {\n      type: String,\n      \"default\": 'left'\n    },\n    header: {\n      type: null,\n      \"default\": null\n    },\n    baseZIndex: {\n      type: Number,\n      \"default\": 0\n    },\n    autoZIndex: {\n      type: Boolean,\n      \"default\": true\n    },\n    dismissable: {\n      type: Boolean,\n      \"default\": true\n    },\n    showCloseIcon: {\n      type: Boolean,\n      \"default\": true\n    },\n    closeButtonProps: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          severity: 'secondary',\n          text: true,\n          rounded: true\n        };\n      }\n    },\n    closeIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    modal: {\n      type: Boolean,\n      \"default\": true\n    },\n    blockScroll: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  style: DrawerStyle,\n  provide: function provide() {\n    return {\n      $pcDrawer: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script = {\n  name: 'Drawer',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:visible', 'show', 'after-show', 'hide', 'after-hide', 'before-hide'],\n  data: function data() {\n    return {\n      containerVisible: this.visible\n    };\n  },\n  container: null,\n  mask: null,\n  content: null,\n  headerContainer: null,\n  footerContainer: null,\n  closeButton: null,\n  outsideClickListener: null,\n  documentKeydownListener: null,\n  watch: {\n    dismissable: function dismissable(newValue) {\n      if (newValue) {\n        this.enableDocumentSettings();\n      } else {\n        this.disableDocumentSettings();\n      }\n    }\n  },\n  updated: function updated() {\n    if (this.visible) {\n      this.containerVisible = this.visible;\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.disableDocumentSettings();\n    if (this.mask && this.autoZIndex) {\n      ZIndex.clear(this.mask);\n    }\n    this.container = null;\n    this.mask = null;\n  },\n  methods: {\n    hide: function hide() {\n      this.$emit('update:visible', false);\n    },\n    onEnter: function onEnter() {\n      this.$emit('show');\n      this.focus();\n      this.bindDocumentKeyDownListener();\n      if (this.autoZIndex) {\n        ZIndex.set('modal', this.mask, this.baseZIndex || this.$primevue.config.zIndex.modal);\n      }\n    },\n    onAfterEnter: function onAfterEnter() {\n      this.enableDocumentSettings();\n      this.$emit('after-show');\n    },\n    onBeforeLeave: function onBeforeLeave() {\n      if (this.modal) {\n        !this.isUnstyled && addClass(this.mask, 'p-overlay-mask-leave');\n      }\n      this.$emit('before-hide');\n    },\n    onLeave: function onLeave() {\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave() {\n      if (this.autoZIndex) {\n        ZIndex.clear(this.mask);\n      }\n      this.unbindDocumentKeyDownListener();\n      this.containerVisible = false;\n      this.disableDocumentSettings();\n      this.$emit('after-hide');\n    },\n    onMaskClick: function onMaskClick(event) {\n      if (this.dismissable && this.modal && this.mask === event.target) {\n        this.hide();\n      }\n    },\n    focus: function focus$1() {\n      var findFocusableElement = function findFocusableElement(container) {\n        return container && container.querySelector('[autofocus]');\n      };\n      var focusTarget = this.$slots.header && findFocusableElement(this.headerContainer);\n      if (!focusTarget) {\n        focusTarget = this.$slots[\"default\"] && findFocusableElement(this.container);\n        if (!focusTarget) {\n          focusTarget = this.$slots.footer && findFocusableElement(this.footerContainer);\n          if (!focusTarget) {\n            focusTarget = this.closeButton;\n          }\n        }\n      }\n      focusTarget && focus(focusTarget);\n    },\n    enableDocumentSettings: function enableDocumentSettings() {\n      if (this.dismissable && !this.modal) {\n        this.bindOutsideClickListener();\n      }\n      if (this.blockScroll) {\n        blockBodyScroll();\n      }\n    },\n    disableDocumentSettings: function disableDocumentSettings() {\n      this.unbindOutsideClickListener();\n      if (this.blockScroll) {\n        unblockBodyScroll();\n      }\n    },\n    onKeydown: function onKeydown(event) {\n      if (event.code === 'Escape') {\n        this.hide();\n      }\n    },\n    containerRef: function containerRef(el) {\n      this.container = el;\n    },\n    maskRef: function maskRef(el) {\n      this.mask = el;\n    },\n    contentRef: function contentRef(el) {\n      this.content = el;\n    },\n    headerContainerRef: function headerContainerRef(el) {\n      this.headerContainer = el;\n    },\n    footerContainerRef: function footerContainerRef(el) {\n      this.footerContainer = el;\n    },\n    closeButtonRef: function closeButtonRef(el) {\n      this.closeButton = el ? el.$el : undefined;\n    },\n    bindDocumentKeyDownListener: function bindDocumentKeyDownListener() {\n      if (!this.documentKeydownListener) {\n        this.documentKeydownListener = this.onKeydown;\n        document.addEventListener('keydown', this.documentKeydownListener);\n      }\n    },\n    unbindDocumentKeyDownListener: function unbindDocumentKeyDownListener() {\n      if (this.documentKeydownListener) {\n        document.removeEventListener('keydown', this.documentKeydownListener);\n        this.documentKeydownListener = null;\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this.isOutsideClicked(event)) {\n            _this.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener, true);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener, true);\n        this.outsideClickListener = null;\n      }\n    },\n    isOutsideClicked: function isOutsideClicked(event) {\n      return this.container && !this.container.contains(event.target);\n    }\n  },\n  computed: {\n    fullScreen: function fullScreen() {\n      return this.position === 'full';\n    },\n    closeAriaLabel: function closeAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.close : undefined;\n    },\n    dataP: function dataP() {\n      return cn(_defineProperty(_defineProperty(_defineProperty({\n        'full-screen': this.position === 'full'\n      }, this.position, this.position), \"open\", this.containerVisible), \"modal\", this.modal));\n    }\n  },\n  directives: {\n    focustrap: FocusTrap\n  },\n  components: {\n    Button: Button,\n    Portal: Portal,\n    TimesIcon: TimesIcon\n  }\n};\n\nvar _hoisted_1 = [\"data-p\"];\nvar _hoisted_2 = [\"aria-modal\", \"data-p\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Button = resolveComponent(\"Button\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_focustrap = resolveDirective(\"focustrap\");\n  return openBlock(), createBlock(_component_Portal, null, {\n    \"default\": withCtx(function () {\n      return [$data.containerVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n        key: 0,\n        ref: $options.maskRef,\n        onMousedown: _cache[0] || (_cache[0] = function () {\n          return $options.onMaskClick && $options.onMaskClick.apply($options, arguments);\n        }),\n        \"class\": _ctx.cx('mask'),\n        style: _ctx.sx('mask', true, {\n          position: _ctx.position,\n          modal: _ctx.modal\n        }),\n        \"data-p\": $options.dataP\n      }, _ctx.ptm('mask')), [createVNode(Transition, mergeProps({\n        name: \"p-drawer\",\n        onEnter: $options.onEnter,\n        onAfterEnter: $options.onAfterEnter,\n        onBeforeLeave: $options.onBeforeLeave,\n        onLeave: $options.onLeave,\n        onAfterLeave: $options.onAfterLeave,\n        appear: \"\"\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [_ctx.visible ? withDirectives((openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.containerRef,\n            \"class\": _ctx.cx('root'),\n            style: _ctx.sx('root'),\n            role: \"complementary\",\n            \"aria-modal\": _ctx.modal,\n            \"data-p\": $options.dataP\n          }, _ctx.ptmi('root')), [_ctx.$slots.container ? renderSlot(_ctx.$slots, \"container\", {\n            key: 0,\n            closeCallback: $options.hide\n          }) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createElementVNode(\"div\", mergeProps({\n            ref: $options.headerContainerRef,\n            \"class\": _ctx.cx('header')\n          }, _ctx.ptm('header')), [renderSlot(_ctx.$slots, \"header\", {\n            \"class\": normalizeClass(_ctx.cx('title'))\n          }, function () {\n            return [_ctx.header ? (openBlock(), createElementBlock(\"div\", mergeProps({\n              key: 0,\n              \"class\": _ctx.cx('title')\n            }, _ctx.ptm('title')), toDisplayString(_ctx.header), 17)) : createCommentVNode(\"\", true)];\n          }), _ctx.showCloseIcon ? renderSlot(_ctx.$slots, \"closebutton\", {\n            key: 0,\n            closeCallback: $options.hide\n          }, function () {\n            return [createVNode(_component_Button, mergeProps({\n              ref: $options.closeButtonRef,\n              type: \"button\",\n              \"class\": _ctx.cx('pcCloseButton'),\n              \"aria-label\": $options.closeAriaLabel,\n              unstyled: _ctx.unstyled,\n              onClick: $options.hide\n            }, _ctx.closeButtonProps, {\n              pt: _ctx.ptm('pcCloseButton'),\n              \"data-pc-group-section\": \"iconcontainer\"\n            }), {\n              icon: withCtx(function (slotProps) {\n                return [renderSlot(_ctx.$slots, \"closeicon\", {}, function () {\n                  return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon ? 'span' : 'TimesIcon'), mergeProps({\n                    \"class\": [_ctx.closeIcon, slotProps[\"class\"]]\n                  }, _ctx.ptm('pcCloseButton')['icon']), null, 16, [\"class\"]))];\n                })];\n              }),\n              _: 3\n            }, 16, [\"class\", \"aria-label\", \"unstyled\", \"onClick\", \"pt\"])];\n          }) : createCommentVNode(\"\", true)], 16), createElementVNode(\"div\", mergeProps({\n            ref: $options.contentRef,\n            \"class\": _ctx.cx('content')\n          }, _ctx.ptm('content')), [renderSlot(_ctx.$slots, \"default\")], 16), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.footerContainerRef,\n            \"class\": _ctx.cx('footer')\n          }, _ctx.ptm('footer')), [renderSlot(_ctx.$slots, \"footer\")], 16)) : createCommentVNode(\"\", true)], 64))], 16, _hoisted_2)), [[_directive_focustrap]]) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onBeforeLeave\", \"onLeave\", \"onAfterLeave\"])], 16, _hoisted_1)) : createCommentVNode(\"\", true)];\n    }),\n    _: 3\n  });\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}