{"file":"index.mjs","mappings":";AACA,MAAe,eAAA,qBAAqB,MAAM,OAAO,cAAiF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","names":[],"sources":["../../../../../../node_modules/primevue/checkbox/index.mjs?nuxt_component=async&nuxt_component_name=Checkbox&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport { contains, equals } from '@primeuix/utils/object';\nimport CheckIcon from '@primevue/icons/check';\nimport MinusIcon from '@primevue/icons/minus';\nimport BaseInput from '@primevue/core/baseinput';\nimport CheckboxStyle from 'primevue/checkbox/style';\nimport { resolveComponent, createElementBlock, openBlock, mergeProps, createElementVNode, renderSlot, normalizeClass, createBlock, createCommentVNode } from 'vue';\n\nvar script$1 = {\n  name: 'BaseCheckbox',\n  \"extends\": BaseInput,\n  props: {\n    value: null,\n    binary: Boolean,\n    indeterminate: {\n      type: Boolean,\n      \"default\": false\n    },\n    trueValue: {\n      type: null,\n      \"default\": true\n    },\n    falseValue: {\n      type: null,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    required: {\n      type: Boolean,\n      \"default\": false\n    },\n    tabindex: {\n      type: Number,\n      \"default\": null\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: CheckboxStyle,\n  provide: function provide() {\n    return {\n      $pcCheckbox: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar script = {\n  name: 'Checkbox',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change', 'focus', 'blur', 'update:indeterminate'],\n  inject: {\n    $pcCheckboxGroup: {\n      \"default\": undefined\n    }\n  },\n  data: function data() {\n    return {\n      d_indeterminate: this.indeterminate\n    };\n  },\n  watch: {\n    indeterminate: function indeterminate(newValue) {\n      this.d_indeterminate = newValue;\n    }\n  },\n  methods: {\n    getPTOptions: function getPTOptions(key) {\n      var _ptm = key === 'root' ? this.ptmi : this.ptm;\n      return _ptm(key, {\n        context: {\n          checked: this.checked,\n          indeterminate: this.d_indeterminate,\n          disabled: this.disabled\n        }\n      });\n    },\n    onChange: function onChange(event) {\n      var _this = this;\n      if (!this.disabled && !this.readonly) {\n        var value = this.$pcCheckboxGroup ? this.$pcCheckboxGroup.d_value : this.d_value;\n        var newModelValue;\n        if (this.binary) {\n          newModelValue = this.d_indeterminate ? this.trueValue : this.checked ? this.falseValue : this.trueValue;\n        } else {\n          if (this.checked || this.d_indeterminate) newModelValue = value.filter(function (val) {\n            return !equals(val, _this.value);\n          });else newModelValue = value ? [].concat(_toConsumableArray(value), [this.value]) : [this.value];\n        }\n        if (this.d_indeterminate) {\n          this.d_indeterminate = false;\n          this.$emit('update:indeterminate', this.d_indeterminate);\n        }\n        this.$pcCheckboxGroup ? this.$pcCheckboxGroup.writeValue(newModelValue, event) : this.writeValue(newModelValue, event);\n        this.$emit('change', event);\n      }\n    },\n    onFocus: function onFocus(event) {\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      this.$emit('blur', event);\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField, event);\n    }\n  },\n  computed: {\n    groupName: function groupName() {\n      return this.$pcCheckboxGroup ? this.$pcCheckboxGroup.groupName : this.$formName;\n    },\n    checked: function checked() {\n      var value = this.$pcCheckboxGroup ? this.$pcCheckboxGroup.d_value : this.d_value;\n      return this.d_indeterminate ? false : this.binary ? value === this.trueValue : contains(this.value, value);\n    },\n    dataP: function dataP() {\n      return cn(_defineProperty({\n        invalid: this.$invalid,\n        checked: this.checked,\n        disabled: this.disabled,\n        filled: this.$variant === 'filled'\n      }, this.size, this.size));\n    }\n  },\n  components: {\n    CheckIcon: CheckIcon,\n    MinusIcon: MinusIcon\n  }\n};\n\nvar _hoisted_1 = [\"data-p-checked\", \"data-p-indeterminate\", \"data-p-disabled\", \"data-p\"];\nvar _hoisted_2 = [\"id\", \"value\", \"name\", \"checked\", \"tabindex\", \"disabled\", \"readonly\", \"required\", \"aria-labelledby\", \"aria-label\", \"aria-invalid\", \"aria-checked\"];\nvar _hoisted_3 = [\"data-p\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_CheckIcon = resolveComponent(\"CheckIcon\");\n  var _component_MinusIcon = resolveComponent(\"MinusIcon\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, $options.getPTOptions('root'), {\n    \"data-p-checked\": $options.checked,\n    \"data-p-indeterminate\": $data.d_indeterminate || undefined,\n    \"data-p-disabled\": _ctx.disabled,\n    \"data-p\": $options.dataP\n  }), [createElementVNode(\"input\", mergeProps({\n    id: _ctx.inputId,\n    type: \"checkbox\",\n    \"class\": [_ctx.cx('input'), _ctx.inputClass],\n    style: _ctx.inputStyle,\n    value: _ctx.value,\n    name: $options.groupName,\n    checked: $options.checked,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.disabled,\n    readonly: _ctx.readonly,\n    required: _ctx.required,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    \"aria-checked\": $data.d_indeterminate ? 'mixed' : undefined,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onChange: _cache[2] || (_cache[2] = function () {\n      return $options.onChange && $options.onChange.apply($options, arguments);\n    })\n  }, $options.getPTOptions('input')), null, 16, _hoisted_2), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('box')\n  }, $options.getPTOptions('box'), {\n    \"data-p\": $options.dataP\n  }), [renderSlot(_ctx.$slots, \"icon\", {\n    checked: $options.checked,\n    indeterminate: $data.d_indeterminate,\n    \"class\": normalizeClass(_ctx.cx('icon')),\n    dataP: $options.dataP\n  }, function () {\n    return [$options.checked ? (openBlock(), createBlock(_component_CheckIcon, mergeProps({\n      key: 0,\n      \"class\": _ctx.cx('icon')\n    }, $options.getPTOptions('icon'), {\n      \"data-p\": $options.dataP\n    }), null, 16, [\"class\", \"data-p\"])) : $data.d_indeterminate ? (openBlock(), createBlock(_component_MinusIcon, mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('icon')\n    }, $options.getPTOptions('icon'), {\n      \"data-p\": $options.dataP\n    }), null, 16, [\"class\", \"data-p\"])) : createCommentVNode(\"\", true)];\n  })], 16, _hoisted_3)], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}