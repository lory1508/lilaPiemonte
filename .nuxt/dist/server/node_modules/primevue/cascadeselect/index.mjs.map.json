{"file":"index.mjs","mappings":";AACA,+CAA6B,MAAA,OAA2B,cAAqD,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","names":[],"sources":["../../../../../../node_modules/primevue/cascadeselect/index.mjs?nuxt_component=async&nuxt_component_name=CascadeSelect&nuxt_component_export=default"],"sourcesContent":["import { findSingle, isTouchDevice, relativePosition, getOuterWidth, absolutePosition, addStyle, focus } from '@primeuix/utils/dom';\nimport { equals, isNotEmpty, resolveFieldData, isEmpty, findLastIndex, isPrintableCharacter, isString } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport AngleRightIcon from '@primevue/icons/angleright';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport BaseInput from '@primevue/core/baseinput';\nimport CascadeSelectStyle from 'primevue/cascadeselect/style';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport Ripple from 'primevue/ripple';\nimport { resolveComponent, resolveDirective, createElementBlock, openBlock, mergeProps, Fragment, renderList, withDirectives, createBlock, createCommentVNode, resolveDynamicComponent, toDisplayString, normalizeClass, createElementVNode, renderSlot, createVNode, createTextVNode, withCtx, Transition } from 'vue';\n\nvar script$2 = {\n  name: 'BaseCascadeSelect',\n  \"extends\": BaseInput,\n  props: {\n    options: Array,\n    optionLabel: null,\n    optionValue: null,\n    optionDisabled: null,\n    optionGroupLabel: null,\n    optionGroupChildren: null,\n    placeholder: String,\n    breakpoint: {\n      type: String,\n      \"default\": '960px'\n    },\n    dataKey: null,\n    showClear: {\n      type: Boolean,\n      \"default\": false\n    },\n    clearIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputProps: {\n      type: null,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelStyle: {\n      type: Object,\n      \"default\": null\n    },\n    panelProps: {\n      type: null,\n      \"default\": null\n    },\n    overlayClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    overlayStyle: {\n      type: Object,\n      \"default\": null\n    },\n    overlayProps: {\n      type: null,\n      \"default\": null\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    dropdownIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    optionGroupIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    autoOptionFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    focusOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    searchLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    searchMessage: {\n      type: String,\n      \"default\": null\n    },\n    selectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySelectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySearchMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyMessage: {\n      type: String,\n      \"default\": null\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: CascadeSelectStyle,\n  provide: function provide() {\n    return {\n      $pcCascadeSelect: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script$1 = {\n  name: 'CascadeSelectSub',\n  hostName: 'CascadeSelect',\n  \"extends\": BaseComponent,\n  emits: ['option-change', 'option-focus-change', 'option-focus-enter-change'],\n  container: null,\n  props: {\n    selectId: String,\n    focusedOptionId: String,\n    options: Array,\n    optionLabel: String,\n    optionValue: String,\n    optionDisabled: null,\n    optionGroupIcon: String,\n    optionGroupLabel: String,\n    optionGroupChildren: {\n      type: [String, Array],\n      \"default\": null\n    },\n    activeOptionPath: Array,\n    level: Number,\n    templates: null,\n    value: null\n  },\n  methods: {\n    getOptionId: function getOptionId(processedOption) {\n      return \"\".concat(this.selectId, \"_\").concat(processedOption.key);\n    },\n    getOptionLabel: function getOptionLabel(processedOption) {\n      return this.optionLabel ? resolveFieldData(processedOption.option, this.optionLabel) : processedOption.option;\n    },\n    getOptionValue: function getOptionValue(processedOption) {\n      return this.optionValue ? resolveFieldData(processedOption.option, this.optionValue) : processedOption.option;\n    },\n    getPTOptions: function getPTOptions(processedOption, index, key) {\n      return this.ptm(key, {\n        context: {\n          option: processedOption,\n          index: index,\n          level: this.level,\n          optionGroup: this.isOptionGroup(processedOption),\n          active: this.isOptionActive(processedOption),\n          focused: this.isOptionFocused(processedOption),\n          disabled: this.isOptionDisabled(processedOption)\n        }\n      });\n    },\n    isOptionDisabled: function isOptionDisabled(processedOption) {\n      return this.optionDisabled ? resolveFieldData(processedOption.option, this.optionDisabled) : false;\n    },\n    getOptionGroupLabel: function getOptionGroupLabel(processedOption) {\n      return this.optionGroupLabel ? resolveFieldData(processedOption.option, this.optionGroupLabel) : null;\n    },\n    getOptionGroupChildren: function getOptionGroupChildren(processedOption) {\n      return processedOption.children;\n    },\n    isOptionGroup: function isOptionGroup(processedOption) {\n      return isNotEmpty(processedOption.children);\n    },\n    isOptionSelected: function isOptionSelected(processedOption) {\n      return equals(this.value, processedOption === null || processedOption === void 0 ? void 0 : processedOption.option);\n    },\n    isOptionActive: function isOptionActive(processedOption) {\n      return this.activeOptionPath && this.activeOptionPath.some(function (path) {\n        return path.key === processedOption.key;\n      });\n    },\n    isOptionFocused: function isOptionFocused(processedOption) {\n      return this.focusedOptionId === this.getOptionId(processedOption);\n    },\n    getOptionLabelToRender: function getOptionLabelToRender(processedOption) {\n      return this.isOptionGroup(processedOption) ? this.getOptionGroupLabel(processedOption) : this.getOptionLabel(processedOption);\n    },\n    onOptionClick: function onOptionClick(event, processedOption) {\n      this.$emit('option-change', {\n        originalEvent: event,\n        processedOption: processedOption,\n        isFocus: true\n      });\n    },\n    onOptionMouseEnter: function onOptionMouseEnter(event, processedOption) {\n      this.$emit('option-focus-enter-change', {\n        originalEvent: event,\n        processedOption: processedOption\n      });\n    },\n    onOptionMouseMove: function onOptionMouseMove(event, processedOption) {\n      this.$emit('option-focus-change', {\n        originalEvent: event,\n        processedOption: processedOption\n      });\n    },\n    containerRef: function containerRef(el) {\n      this.container = el;\n    },\n    listAriaLabel: function listAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n    }\n  },\n  directives: {\n    ripple: Ripple\n  },\n  components: {\n    AngleRightIcon: AngleRightIcon\n  }\n};\n\nvar _hoisted_1$1 = [\"id\", \"aria-label\", \"aria-selected\", \"aria-expanded\", \"aria-level\", \"aria-setsize\", \"aria-posinset\", \"data-p-option-group\", \"data-p-active\", \"data-p-focus\", \"data-p-disabled\"];\nvar _hoisted_2 = [\"onClick\", \"onMouseenter\", \"onMousemove\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_AngleRightIcon = resolveComponent(\"AngleRightIcon\");\n  var _component_CascadeSelectSub = resolveComponent(\"CascadeSelectSub\", true);\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"ul\", mergeProps({\n    ref: $options.containerRef,\n    \"class\": _ctx.cx('list')\n  }, $props.level === 0 ? _ctx.ptm('list') : _ctx.ptm('optionList')), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.options, function (processedOption, index) {\n    return openBlock(), createElementBlock(\"li\", mergeProps({\n      key: $options.getOptionLabelToRender(processedOption),\n      id: $options.getOptionId(processedOption),\n      \"class\": _ctx.cx('option', {\n        processedOption: processedOption\n      }),\n      role: \"treeitem\",\n      \"aria-label\": $options.getOptionLabelToRender(processedOption),\n      \"aria-selected\": $options.isOptionGroup(processedOption) ? undefined : $options.isOptionSelected(processedOption),\n      \"aria-expanded\": $options.isOptionGroup(processedOption) ? $options.isOptionActive(processedOption) : undefined,\n      \"aria-level\": $props.level + 1,\n      \"aria-setsize\": $props.options.length,\n      \"aria-posinset\": index + 1,\n      ref_for: true\n    }, $options.getPTOptions(processedOption, index, 'option'), {\n      \"data-p-option-group\": $options.isOptionGroup(processedOption),\n      \"data-p-active\": $options.isOptionActive(processedOption),\n      \"data-p-focus\": $options.isOptionFocused(processedOption),\n      \"data-p-disabled\": $options.isOptionDisabled(processedOption)\n    }), [withDirectives((openBlock(), createElementBlock(\"div\", mergeProps({\n      \"class\": _ctx.cx('optionContent'),\n      onClick: function onClick($event) {\n        return $options.onOptionClick($event, processedOption);\n      },\n      onMouseenter: function onMouseenter($event) {\n        return $options.onOptionMouseEnter($event, processedOption);\n      },\n      onMousemove: function onMousemove($event) {\n        return $options.onOptionMouseMove($event, processedOption);\n      },\n      ref_for: true\n    }, $options.getPTOptions(processedOption, index, 'optionContent')), [$props.templates['option'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['option']), {\n      key: 0,\n      option: processedOption.option,\n      selected: $options.isOptionGroup(processedOption) ? false : $options.isOptionSelected(processedOption)\n    }, null, 8, [\"option\", \"selected\"])) : (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('optionText'),\n      ref_for: true\n    }, $options.getPTOptions(processedOption, index, 'optionText')), toDisplayString($options.getOptionLabelToRender(processedOption)), 17)), $options.isOptionGroup(processedOption) ? (openBlock(), createElementBlock(\"span\", {\n      key: 2,\n      \"class\": normalizeClass(_ctx.cx('groupIconContainer'))\n    }, [$props.templates['optiongroupicon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['optiongroupicon']), {\n      key: 0,\n      \"class\": normalizeClass(_ctx.cx('groupIcon'))\n    }, null, 8, [\"class\"])) : $props.optionGroupIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 1,\n      \"class\": [_ctx.cx('groupIcon'), $props.optionGroupIcon],\n      \"aria-hidden\": \"true\",\n      ref_for: true\n    }, $options.getPTOptions(processedOption, index, 'groupIcon')), null, 16)) : (openBlock(), createBlock(_component_AngleRightIcon, mergeProps({\n      key: 2,\n      \"class\": _ctx.cx('groupIcon'),\n      \"aria-hidden\": \"true\",\n      ref_for: true\n    }, $options.getPTOptions(processedOption, index, 'groupIcon')), null, 16, [\"class\"]))], 2)) : createCommentVNode(\"\", true)], 16, _hoisted_2)), [[_directive_ripple]]), $options.isOptionGroup(processedOption) && $options.isOptionActive(processedOption) ? (openBlock(), createBlock(_component_CascadeSelectSub, {\n      key: 0,\n      role: \"group\",\n      \"class\": normalizeClass(_ctx.cx('optionList')),\n      selectId: $props.selectId,\n      focusedOptionId: $props.focusedOptionId,\n      options: $options.getOptionGroupChildren(processedOption),\n      activeOptionPath: $props.activeOptionPath,\n      level: $props.level + 1,\n      templates: $props.templates,\n      optionLabel: $props.optionLabel,\n      optionValue: $props.optionValue,\n      optionDisabled: $props.optionDisabled,\n      optionGroupIcon: $props.optionGroupIcon,\n      optionGroupLabel: $props.optionGroupLabel,\n      optionGroupChildren: $props.optionGroupChildren,\n      value: $props.value,\n      onOptionChange: _cache[0] || (_cache[0] = function ($event) {\n        return _ctx.$emit('option-change', $event);\n      }),\n      onOptionFocusChange: _cache[1] || (_cache[1] = function ($event) {\n        return _ctx.$emit('option-focus-change', $event);\n      }),\n      onOptionFocusEnterChange: _cache[2] || (_cache[2] = function ($event) {\n        return _ctx.$emit('option-focus-enter-change', $event);\n      }),\n      pt: _ctx.pt,\n      unstyled: _ctx.unstyled\n    }, null, 8, [\"class\", \"selectId\", \"focusedOptionId\", \"options\", \"activeOptionPath\", \"level\", \"templates\", \"optionLabel\", \"optionValue\", \"optionDisabled\", \"optionGroupIcon\", \"optionGroupLabel\", \"optionGroupChildren\", \"value\", \"pt\", \"unstyled\"])) : createCommentVNode(\"\", true)], 16, _hoisted_1$1);\n  }), 128))], 16);\n}\n\nscript$1.render = render$1;\n\nfunction _typeof$1(o) { \"@babel/helpers - typeof\"; return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$1(o); }\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), true).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$1(t) { var i = _toPrimitive$1(t, \"string\"); return \"symbol\" == _typeof$1(i) ? i : i + \"\"; }\nfunction _toPrimitive$1(t, r) { if (\"object\" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$1(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script = {\n  name: 'CascadeSelect',\n  \"extends\": script$2,\n  inheritAttrs: false,\n  emits: ['change', 'focus', 'blur', 'click', 'group-change', 'before-show', 'before-hide', 'hide', 'show'],\n  outsideClickListener: null,\n  matchMediaListener: null,\n  scrollHandler: null,\n  resizeListener: null,\n  overlay: null,\n  searchTimeout: null,\n  searchValue: null,\n  data: function data() {\n    return {\n      clicked: false,\n      focused: false,\n      focusedOptionInfo: {\n        index: -1,\n        level: 0,\n        parentKey: ''\n      },\n      activeOptionPath: [],\n      overlayVisible: false,\n      dirty: false,\n      mobileActive: false,\n      query: null,\n      queryMatches: false\n    };\n  },\n  watch: {\n    options: function options() {\n      this.autoUpdateModel();\n    }\n  },\n  mounted: function mounted() {\n    this.autoUpdateModel();\n    this.bindMatchMediaListener();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    this.unbindMatchMediaListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndex.clear(this.overlay);\n      this.overlay = null;\n    }\n    if (this.mobileActive) {\n      this.mobileActive = false;\n    }\n  },\n  methods: {\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n    },\n    getOptionGroupLabel: function getOptionGroupLabel(optionGroup) {\n      return this.optionGroupLabel ? resolveFieldData(optionGroup, this.optionGroupLabel) : null;\n    },\n    getOptionGroupChildren: function getOptionGroupChildren(optionGroup, level) {\n      return isString(this.optionGroupChildren) ? resolveFieldData(optionGroup, this.optionGroupChildren) : resolveFieldData(optionGroup, this.optionGroupChildren[level]);\n    },\n    isOptionGroup: function isOptionGroup(option, level) {\n      return Object.prototype.hasOwnProperty.call(option, this.optionGroupChildren[level]);\n    },\n    getProccessedOptionLabel: function getProccessedOptionLabel() {\n      var processedOption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var grouped = this.isProccessedOptionGroup(processedOption);\n      return grouped ? this.getOptionGroupLabel(processedOption.option, processedOption.level) : this.getOptionLabel(processedOption.option);\n    },\n    isProccessedOptionGroup: function isProccessedOptionGroup(processedOption) {\n      return isNotEmpty(processedOption === null || processedOption === void 0 ? void 0 : processedOption.children);\n    },\n    show: function show(isFocus) {\n      this.$emit('before-show');\n      this.overlayVisible = true;\n      this.activeOptionPath = this.$filled ? this.findOptionPathByValue(this.d_value) : this.activeOptionPath;\n      if (this.$filled && isNotEmpty(this.activeOptionPath)) {\n        var processedOption = this.activeOptionPath[this.activeOptionPath.length - 1];\n        this.focusedOptionInfo = {\n          index: processedOption.index,\n          level: processedOption.level,\n          parentKey: processedOption.parentKey\n        };\n      } else {\n        this.focusedOptionInfo = {\n          index: this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex(),\n          level: 0,\n          parentKey: ''\n        };\n      }\n      isFocus && focus(this.$refs.focusInput);\n    },\n    hide: function hide(isFocus) {\n      var _this = this;\n      var _hide = function _hide() {\n        _this.$emit('before-hide');\n        _this.overlayVisible = false;\n        _this.clicked = false;\n        _this.activeOptionPath = [];\n        _this.focusedOptionInfo = {\n          index: -1,\n          level: 0,\n          parentKey: ''\n        };\n        isFocus && focus(_this.$refs.focusInput);\n      };\n      setTimeout(function () {\n        _hide();\n      }, 0); // For ScreenReaders\n    },\n    onFocus: function onFocus(event) {\n      if (this.disabled) {\n        // For ScreenReaders\n        return;\n      }\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      this.focused = false;\n      this.focusedOptionInfo = {\n        index: -1,\n        level: 0,\n        parentKey: ''\n      };\n      this.searchValue = '';\n      this.$emit('blur', event);\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField);\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (this.disabled || this.loading) {\n        event.preventDefault();\n        return;\n      }\n      var metaKey = event.metaKey || event.ctrlKey;\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeftKey(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'Space':\n          this.onSpaceKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n        case 'PageDown':\n        case 'PageUp':\n        case 'Backspace':\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          //NOOP\n          break;\n        default:\n          if (!metaKey && isPrintableCharacter(event.key)) {\n            !this.overlayVisible && this.show();\n            this.searchOptions(event, event.key);\n          }\n          break;\n      }\n      this.clicked = false;\n    },\n    onOptionChange: function onOptionChange(event) {\n      var processedOption = event.processedOption,\n        type = event.type;\n      if (isEmpty(processedOption)) return;\n      var index = processedOption.index,\n        key = processedOption.key,\n        level = processedOption.level,\n        parentKey = processedOption.parentKey,\n        children = processedOption.children;\n      var grouped = isNotEmpty(children);\n      var activeOptionPath = this.activeOptionPath ? this.activeOptionPath.filter(function (p) {\n        return p.parentKey !== parentKey && p.parentKey !== key;\n      }) : [];\n      this.focusedOptionInfo = {\n        index: index,\n        level: level,\n        parentKey: parentKey\n      };\n      if (type == 'hover' && this.queryMatches) {\n        return;\n      }\n      if (grouped) {\n        activeOptionPath.push(processedOption);\n      }\n      this.activeOptionPath = activeOptionPath;\n    },\n    onOptionClick: function onOptionClick(event) {\n      var originalEvent = event.originalEvent,\n        processedOption = event.processedOption,\n        isFocus = event.isFocus,\n        isHide = event.isHide,\n        preventSelection = event.preventSelection;\n      var index = processedOption.index,\n        key = processedOption.key,\n        level = processedOption.level,\n        parentKey = processedOption.parentKey;\n      var grouped = this.isProccessedOptionGroup(processedOption);\n      var selected = this.isSelected(processedOption);\n      if (selected) {\n        this.activeOptionPath = this.activeOptionPath.filter(function (p) {\n          return key !== p.key && key.startsWith(p.key);\n        });\n        this.focusedOptionInfo = {\n          index: index,\n          level: level,\n          parentKey: parentKey\n        };\n      } else {\n        if (grouped) {\n          this.onOptionChange(event);\n          this.onOptionGroupSelect(originalEvent, processedOption);\n        } else {\n          var activeOptionPath = this.activeOptionPath.filter(function (p) {\n            return p.parentKey !== parentKey;\n          });\n          activeOptionPath.push(processedOption);\n          this.focusedOptionInfo = {\n            index: index,\n            level: level,\n            parentKey: parentKey\n          };\n          if (!preventSelection || (processedOption === null || processedOption === void 0 ? void 0 : processedOption.children.length) !== 0) {\n            this.activeOptionPath = activeOptionPath;\n            this.onOptionSelect(originalEvent, processedOption, isHide);\n          }\n        }\n      }\n      isFocus && focus(this.$refs.focusInput);\n    },\n    onOptionMouseEnter: function onOptionMouseEnter(event) {\n      if (this.focusOnHover) {\n        if (event.processedOption.level === 0) {\n          this.dirty = true;\n        }\n        if (this.dirty || !this.dirty && isNotEmpty(this.d_value)) {\n          this.onOptionChange(_objectSpread$1(_objectSpread$1({}, event), {}, {\n            type: 'hover'\n          }));\n        } else if (!this.dirty && event.processedOption.level === 0) {\n          this.onOptionClick(_objectSpread$1(_objectSpread$1({}, event), {}, {\n            type: 'hover'\n          }));\n        }\n      }\n    },\n    onOptionMouseMove: function onOptionMouseMove(event) {\n      if (this.focused && this.focusOnHover) {\n        this.changeFocusedOptionIndex(event, event.processedOption.index);\n      }\n    },\n    onOptionSelect: function onOptionSelect(event, processedOption) {\n      var isHide = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var value = this.getOptionValue(processedOption === null || processedOption === void 0 ? void 0 : processedOption.option);\n      this.activeOptionPath.forEach(function (p) {\n        return p.selected = true;\n      });\n      this.updateModel(event, value);\n      isHide && this.hide(true);\n    },\n    onOptionGroupSelect: function onOptionGroupSelect(event, processedOption) {\n      this.dirty = true;\n      this.$emit('group-change', {\n        originalEvent: event,\n        value: processedOption.option\n      });\n    },\n    onContainerClick: function onContainerClick(event) {\n      if (this.disabled || this.loading) {\n        return;\n      }\n      if (event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n        return;\n      } else if (!this.overlay || !this.overlay.contains(event.target)) {\n        this.overlayVisible ? this.hide() : this.show();\n        focus(this.$refs.focusInput);\n      }\n      this.clicked = true;\n      this.$emit('click', event);\n    },\n    onClearClick: function onClearClick(event) {\n      this.updateModel(event, null);\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n    },\n    onOverlayKeyDown: function onOverlayKeyDown(event) {\n      switch (event.code) {\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      if (!this.overlayVisible) {\n        this.show();\n      } else {\n        var optionIndex = this.focusedOptionInfo.index !== -1 ? this.findNextOptionIndex(this.focusedOptionInfo.index) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n        this.changeFocusedOptionIndex(event, optionIndex, true);\n      }\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      if (event.altKey) {\n        if (this.focusedOptionInfo.index !== -1) {\n          var processedOption = this.visibleOptions[this.focusedOptionInfo.index];\n          var grouped = this.isProccessedOptionGroup(processedOption);\n          !grouped && this.onOptionChange({\n            originalEvent: event,\n            processedOption: processedOption\n          });\n        }\n        this.overlayVisible && this.hide();\n        event.preventDefault();\n      } else {\n        var optionIndex = this.focusedOptionInfo.index !== -1 ? this.findPrevOptionIndex(this.focusedOptionInfo.index) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n        this.changeFocusedOptionIndex(event, optionIndex, true);\n        !this.overlayVisible && this.show();\n        event.preventDefault();\n      }\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var _this2 = this;\n      if (this.overlayVisible) {\n        var processedOption = this.visibleOptions[this.focusedOptionInfo.index];\n        var parentOption = this.activeOptionPath.find(function (p) {\n          return p.key === (processedOption === null || processedOption === void 0 ? void 0 : processedOption.parentKey);\n        });\n        var matched = this.focusedOptionInfo.parentKey === '' || parentOption && parentOption.key === this.focusedOptionInfo.parentKey;\n        var root = isEmpty(processedOption === null || processedOption === void 0 ? void 0 : processedOption.parent);\n        if (matched) {\n          this.activeOptionPath = this.activeOptionPath.filter(function (p) {\n            return p.parentKey !== _this2.focusedOptionInfo.parentKey;\n          });\n        }\n        if (!root) {\n          this.focusedOptionInfo = {\n            index: -1,\n            parentKey: parentOption ? parentOption.parentKey : ''\n          };\n          this.searchValue = '';\n          this.onArrowDownKey(event);\n        }\n        event.preventDefault();\n      }\n    },\n    onArrowRightKey: function onArrowRightKey(event) {\n      if (this.overlayVisible) {\n        var processedOption = this.visibleOptions[this.focusedOptionInfo.index];\n        var grouped = this.isProccessedOptionGroup(processedOption);\n        if (grouped) {\n          var matched = this.activeOptionPath.some(function (p) {\n            return (processedOption === null || processedOption === void 0 ? void 0 : processedOption.key) === p.key;\n          });\n          if (matched) {\n            this.focusedOptionInfo = {\n              index: -1,\n              parentKey: processedOption === null || processedOption === void 0 ? void 0 : processedOption.key\n            };\n            this.searchValue = '';\n            this.onArrowDownKey(event);\n          } else {\n            this.onOptionChange({\n              originalEvent: event,\n              processedOption: processedOption\n            });\n          }\n        }\n        event.preventDefault();\n      }\n    },\n    onHomeKey: function onHomeKey(event) {\n      this.changeFocusedOptionIndex(event, this.findFirstOptionIndex());\n      !this.overlayVisible && this.show();\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      this.changeFocusedOptionIndex(event, this.findLastOptionIndex());\n      !this.overlayVisible && this.show();\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (!this.overlayVisible) {\n        this.focusedOptionInfo.index !== -1; // reset\n        this.onArrowDownKey(event);\n      } else {\n        if (this.focusedOptionInfo.index !== -1) {\n          var processedOption = this.visibleOptions[this.focusedOptionInfo.index];\n          var grouped = this.isProccessedOptionGroup(processedOption);\n          this.onOptionClick({\n            originalEvent: event,\n            processedOption: processedOption,\n            preventSelection: false\n          });\n          !grouped && this.hide();\n        }\n      }\n      event.preventDefault();\n    },\n    onSpaceKey: function onSpaceKey(event) {\n      this.onEnterKey(event);\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      this.overlayVisible && this.hide(true);\n      event.preventDefault();\n    },\n    onTabKey: function onTabKey(event) {\n      if (this.focusedOptionInfo.index !== -1) {\n        var processedOption = this.visibleOptions[this.focusedOptionInfo.index];\n        var grouped = this.isProccessedOptionGroup(processedOption);\n        !grouped && this.onOptionChange({\n          originalEvent: event,\n          processedOption: processedOption\n        });\n      }\n      this.overlayVisible && this.hide();\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      addStyle(el, {\n        position: 'absolute',\n        top: '0'\n      });\n      this.alignOverlay();\n      this.scrollInView();\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.$emit('show');\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.$emit('hide');\n      this.overlay = null;\n      this.dirty = false;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    alignOverlay: function alignOverlay() {\n      if (this.appendTo === 'self') {\n        relativePosition(this.overlay, this.$el);\n      } else {\n        this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n        absolutePosition(this.overlay, this.$el);\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this3 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this3.overlayVisible && _this3.overlay && !_this3.$el.contains(event.target) && !_this3.overlay.contains(event.target)) {\n            _this3.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener, true);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener, true);\n        this.outsideClickListener = null;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this4 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, function () {\n          if (_this4.overlayVisible) {\n            _this4.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this5 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this5.overlayVisible && !isTouchDevice()) {\n            _this5.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    bindMatchMediaListener: function bindMatchMediaListener() {\n      var _this6 = this;\n      if (!this.matchMediaListener) {\n        var query = matchMedia(\"(max-width: \".concat(this.breakpoint, \")\"));\n        this.query = query;\n        this.queryMatches = query.matches;\n        this.matchMediaListener = function () {\n          _this6.queryMatches = query.matches;\n          _this6.mobileActive = false;\n        };\n        this.query.addEventListener('change', this.matchMediaListener);\n      }\n    },\n    unbindMatchMediaListener: function unbindMatchMediaListener() {\n      if (this.matchMediaListener) {\n        this.query.removeEventListener('change', this.matchMediaListener);\n        this.matchMediaListener = null;\n      }\n    },\n    isOptionMatched: function isOptionMatched(processedOption) {\n      var _this$getProccessedOp;\n      return this.isValidOption(processedOption) && ((_this$getProccessedOp = this.getProccessedOptionLabel(processedOption)) === null || _this$getProccessedOp === void 0 ? void 0 : _this$getProccessedOp.toLocaleLowerCase(this.searchLocale).startsWith(this.searchValue.toLocaleLowerCase(this.searchLocale)));\n    },\n    isValidOption: function isValidOption(processedOption) {\n      return isNotEmpty(processedOption) && !this.isOptionDisabled(processedOption.option);\n    },\n    isValidSelectedOption: function isValidSelectedOption(processedOption) {\n      return this.isValidOption(processedOption) && this.isSelected(processedOption);\n    },\n    isSelected: function isSelected(processedOption) {\n      return this.activeOptionPath && this.activeOptionPath.some(function (p) {\n        return p.key === processedOption.key;\n      });\n    },\n    findFirstOptionIndex: function findFirstOptionIndex() {\n      var _this7 = this;\n      return this.visibleOptions.findIndex(function (processedOption) {\n        return _this7.isValidOption(processedOption);\n      });\n    },\n    findLastOptionIndex: function findLastOptionIndex() {\n      var _this8 = this;\n      return findLastIndex(this.visibleOptions, function (processedOption) {\n        return _this8.isValidOption(processedOption);\n      });\n    },\n    findNextOptionIndex: function findNextOptionIndex(index) {\n      var _this9 = this;\n      var matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (processedOption) {\n        return _this9.isValidOption(processedOption);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n    },\n    findPrevOptionIndex: function findPrevOptionIndex(index) {\n      var _this10 = this;\n      var matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), function (processedOption) {\n        return _this10.isValidOption(processedOption);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findSelectedOptionIndex: function findSelectedOptionIndex() {\n      var _this11 = this;\n      return this.visibleOptions.findIndex(function (processedOption) {\n        return _this11.isValidSelectedOption(processedOption);\n      });\n    },\n    findFirstFocusedOptionIndex: function findFirstFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n    },\n    findLastFocusedOptionIndex: function findLastFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n    },\n    findOptionPathByValue: function findOptionPathByValue(value, processedOptions) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      processedOptions = processedOptions || level === 0 && this.processedOptions;\n      if (!processedOptions) return null;\n      if (isEmpty(value)) return [];\n      for (var i = 0; i < processedOptions.length; i++) {\n        var processedOption = processedOptions[i];\n        if (equals(value, this.getOptionValue(processedOption.option), this.equalityKey)) {\n          return [processedOption];\n        }\n        var matchedOptions = this.findOptionPathByValue(value, processedOption.children, level + 1);\n        if (matchedOptions) {\n          matchedOptions.unshift(processedOption);\n          return matchedOptions;\n        }\n      }\n    },\n    searchOptions: function searchOptions(event, _char) {\n      var _this12 = this;\n      this.searchValue = (this.searchValue || '') + _char;\n      var optionIndex = -1;\n      var matched = false;\n      if (isNotEmpty(this.searchValue)) {\n        if (this.focusedOptionInfo.index !== -1) {\n          optionIndex = this.visibleOptions.slice(this.focusedOptionInfo.index).findIndex(function (processedOption) {\n            return _this12.isOptionMatched(processedOption);\n          });\n          optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionInfo.index).findIndex(function (processedOption) {\n            return _this12.isOptionMatched(processedOption);\n          }) : optionIndex + this.focusedOptionInfo.index;\n        } else {\n          optionIndex = this.visibleOptions.findIndex(function (processedOption) {\n            return _this12.isOptionMatched(processedOption);\n          });\n        }\n        if (optionIndex !== -1) {\n          matched = true;\n        }\n        if (optionIndex === -1 && this.focusedOptionInfo.index === -1) {\n          optionIndex = this.findFirstFocusedOptionIndex();\n        }\n        if (optionIndex !== -1) {\n          this.changeFocusedOptionIndex(event, optionIndex);\n        }\n      }\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      this.searchTimeout = setTimeout(function () {\n        _this12.searchValue = '';\n        _this12.searchTimeout = null;\n      }, 500);\n      return matched;\n    },\n    changeFocusedOptionIndex: function changeFocusedOptionIndex(event, index, preventSelection) {\n      if (this.focusedOptionInfo.index !== index) {\n        this.focusedOptionInfo.index = index;\n        this.scrollInView();\n        if (this.focusOnHover) {\n          this.onOptionClick({\n            originalEvent: event,\n            processedOption: this.visibleOptions[index],\n            isHide: false,\n            preventSelection: preventSelection\n          });\n        }\n        if (this.selectOnFocus) {\n          this.onOptionChange({\n            originalEvent: event,\n            processedOption: this.visibleOptions[index],\n            isHide: false\n          });\n        }\n      }\n    },\n    scrollInView: function scrollInView() {\n      var _this13 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      this.$nextTick(function () {\n        var id = index !== -1 ? \"\".concat(_this13.$id, \"_\").concat(index) : _this13.focusedOptionId;\n        var element = findSingle(_this13.list, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n        if (element) {\n          element.scrollIntoView && element.scrollIntoView({\n            block: 'nearest',\n            inline: 'start'\n          });\n        }\n      });\n    },\n    autoUpdateModel: function autoUpdateModel() {\n      if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n        this.focusedOptionInfo.index = this.findFirstFocusedOptionIndex();\n        this.onOptionChange({\n          processedOption: this.visibleOptions[this.focusedOptionInfo.index],\n          isHide: false\n        });\n        !this.overlayVisible && (this.focusedOptionInfo = {\n          index: -1,\n          level: 0,\n          parentKey: ''\n        });\n      }\n    },\n    updateModel: function updateModel(event, value) {\n      this.writeValue(value, event);\n      this.$emit('change', {\n        originalEvent: event,\n        value: value\n      });\n    },\n    createProcessedOptions: function createProcessedOptions(options) {\n      var _this14 = this;\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var parentKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n      var processedOptions = [];\n      options && options.forEach(function (option, index) {\n        var key = (parentKey !== '' ? parentKey + '_' : '') + index;\n        var newOption = {\n          option: option,\n          index: index,\n          level: level,\n          key: key,\n          parent: parent,\n          parentKey: parentKey\n        };\n        newOption['children'] = _this14.createProcessedOptions(_this14.getOptionGroupChildren(option, level), level + 1, newOption, key);\n        processedOptions.push(newOption);\n      });\n      return processedOptions;\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    }\n  },\n  computed: {\n    // @deprecated use $filled instead.\n    hasSelectedOption: function hasSelectedOption() {\n      return this.$filled;\n    },\n    label: function label() {\n      var label = this.placeholder || 'p-emptylabel';\n      if (this.$filled) {\n        var activeOptionPath = this.findOptionPathByValue(this.d_value);\n        var processedOption = isNotEmpty(activeOptionPath) ? activeOptionPath[activeOptionPath.length - 1] : null;\n        return processedOption ? this.getOptionLabel(processedOption.option) : label;\n      }\n      return label;\n    },\n    processedOptions: function processedOptions() {\n      return this.createProcessedOptions(this.options || []);\n    },\n    visibleOptions: function visibleOptions() {\n      var _this15 = this;\n      var processedOption = this.activeOptionPath && this.activeOptionPath.find(function (p) {\n        return p.key === _this15.focusedOptionInfo.parentKey;\n      });\n      return processedOption ? processedOption.children : this.processedOptions;\n    },\n    equalityKey: function equalityKey() {\n      return this.optionValue ? null : this.dataKey;\n    },\n    searchResultMessageText: function searchResultMessageText() {\n      return isNotEmpty(this.visibleOptions) ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n    },\n    searchMessageText: function searchMessageText() {\n      return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n    },\n    emptySearchMessageText: function emptySearchMessageText() {\n      return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n    },\n    emptyMessageText: function emptyMessageText() {\n      return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n    },\n    selectionMessageText: function selectionMessageText() {\n      return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n    },\n    emptySelectionMessageText: function emptySelectionMessageText() {\n      return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n    },\n    selectedMessageText: function selectedMessageText() {\n      return this.$filled ? this.selectionMessageText.replaceAll('{0}', '1') : this.emptySelectionMessageText;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedOptionInfo.index !== -1 ? \"\".concat(this.$id).concat(isNotEmpty(this.focusedOptionInfo.parentKey) ? '_' + this.focusedOptionInfo.parentKey : '', \"_\").concat(this.focusedOptionInfo.index) : null;\n    },\n    isClearIconVisible: function isClearIconVisible() {\n      return this.showClear && this.d_value != null && isNotEmpty(this.options);\n    }\n  },\n  components: {\n    CascadeSelectSub: script$1,\n    Portal: Portal,\n    ChevronDownIcon: ChevronDownIcon,\n    SpinnerIcon: SpinnerIcon,\n    AngleRightIcon: AngleRightIcon,\n    TimesIcon: TimesIcon\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"id\", \"disabled\", \"placeholder\", \"tabindex\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"aria-invalid\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_CascadeSelectSub = resolveComponent(\"CascadeSelectSub\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    onClick: _cache[5] || (_cache[5] = function ($event) {\n      return $options.onContainerClick($event);\n    })\n  }, _ctx.ptmi('root')), [createElementVNode(\"div\", mergeProps({\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenInputContainer'), {\n    \"data-p-hidden-accessible\": true\n  }), [createElementVNode(\"input\", mergeProps({\n    ref: \"focusInput\",\n    id: _ctx.inputId,\n    type: \"text\",\n    \"class\": _ctx.inputClass,\n    style: _ctx.inputStyle,\n    readonly: \"\",\n    disabled: _ctx.disabled,\n    placeholder: _ctx.placeholder,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"tree\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": _ctx.$id + '_tree',\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.inputProps), _ctx.ptm('hiddenInput'))), null, 16, _hoisted_1)], 16), createElementVNode(\"span\", mergeProps({\n    \"class\": _ctx.cx('label')\n  }, _ctx.ptm('label')), [renderSlot(_ctx.$slots, \"value\", {\n    value: _ctx.d_value,\n    placeholder: _ctx.placeholder\n  }, function () {\n    return [createTextVNode(toDisplayString($options.label), 1)];\n  })], 16), $options.isClearIconVisible ? renderSlot(_ctx.$slots, \"clearicon\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('clearIcon')),\n    clearCallback: $options.onClearClick\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon ? 'i' : 'TimesIcon'), mergeProps({\n      ref: \"clearIcon\",\n      \"class\": [_ctx.cx('clearIcon'), _ctx.clearIcon],\n      onClick: $options.onClearClick\n    }, _ctx.ptm('clearIcon'), {\n      \"data-pc-section\": \"clearicon\"\n    }), null, 16, [\"class\", \"onClick\"]))];\n  }) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('dropdown'),\n    role: \"button\",\n    tabindex: \"-1\"\n  }, _ctx.ptm('dropdown')), [_ctx.loading ? renderSlot(_ctx.$slots, \"loadingicon\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('loadingIcon'))\n  }, function () {\n    return [_ctx.loadingIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 0,\n      \"class\": [_ctx.cx('loadingIcon'), 'pi-spin', _ctx.loadingIcon],\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('loadingIcon')), null, 16)) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('loadingIcon'),\n      spin: \"\",\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('loadingIcon')), null, 16, [\"class\"]))];\n  }) : renderSlot(_ctx.$slots, \"dropdownicon\", {\n    key: 1,\n    \"class\": normalizeClass(_ctx.cx('dropdownIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.dropdownIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n      \"class\": [_ctx.cx('dropdownIcon'), _ctx.dropdownIcon],\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('dropdownIcon')), null, 16, [\"class\"]))];\n  })], 16), createElementVNode(\"span\", mergeProps({\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenSearchResult'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.searchResultMessageText), 17), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            \"class\": [_ctx.cx('overlay'), _ctx.panelClass, _ctx.overlayClass],\n            style: [_ctx.panelStyle, _ctx.overlayStyle],\n            onClick: _cache[3] || (_cache[3] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            onKeydown: _cache[4] || (_cache[4] = function () {\n              return $options.onOverlayKeyDown && $options.onOverlayKeyDown.apply($options, arguments);\n            })\n          }, _objectSpread(_objectSpread(_objectSpread({}, _ctx.panelProps), _ctx.overlayProps), _ctx.ptm('overlay'))), [renderSlot(_ctx.$slots, \"header\", {\n            value: _ctx.d_value,\n            options: _ctx.options\n          }), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('listContainer')\n          }, _ctx.ptm('listContainer')), [createVNode(_component_CascadeSelectSub, {\n            id: _ctx.$id + '_tree',\n            role: \"tree\",\n            \"aria-orientation\": \"horizontal\",\n            selectId: _ctx.$id,\n            focusedOptionId: $data.focused ? $options.focusedOptionId : undefined,\n            options: $options.processedOptions,\n            activeOptionPath: $data.activeOptionPath,\n            level: 0,\n            templates: _ctx.$slots,\n            optionLabel: _ctx.optionLabel,\n            optionValue: _ctx.optionValue,\n            optionDisabled: _ctx.optionDisabled,\n            optionGroupIcon: _ctx.optionGroupIcon,\n            optionGroupLabel: _ctx.optionGroupLabel,\n            optionGroupChildren: _ctx.optionGroupChildren,\n            value: _ctx.d_value,\n            onOptionChange: $options.onOptionClick,\n            onOptionFocusChange: $options.onOptionMouseMove,\n            onOptionFocusEnterChange: $options.onOptionMouseEnter,\n            pt: _ctx.pt,\n            unstyled: _ctx.unstyled\n          }, null, 8, [\"id\", \"selectId\", \"focusedOptionId\", \"options\", \"activeOptionPath\", \"templates\", \"optionLabel\", \"optionValue\", \"optionDisabled\", \"optionGroupIcon\", \"optionGroupLabel\", \"optionGroupChildren\", \"value\", \"onOptionChange\", \"onOptionFocusChange\", \"onOptionFocusEnterChange\", \"pt\", \"unstyled\"])], 16), createElementVNode(\"span\", mergeProps({\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenSelectedMessage'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.selectedMessageText), 17), renderSlot(_ctx.$slots, \"footer\", {\n            value: _ctx.d_value,\n            options: _ctx.options\n          })], 16)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}