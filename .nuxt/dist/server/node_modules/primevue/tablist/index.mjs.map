{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/tablist/index.mjs?nuxt_component=async&nuxt_component_name=TabList&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport { getWidth, getHeight, findSingle, getOuterHeight, getOffset, getOuterWidth, isRTL } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TabListStyle from 'primevue/tablist/style';\nimport { resolveDirective, createElementBlock, openBlock, mergeProps, withDirectives, createCommentVNode, createElementVNode, createBlock, resolveDynamicComponent, renderSlot } from 'vue';\n\nvar script$1 = {\n  name: 'BaseTabList',\n  \"extends\": BaseComponent,\n  props: {},\n  style: TabListStyle,\n  provide: function provide() {\n    return {\n      $pcTabList: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'TabList',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  inject: ['$pcTabs'],\n  data: function data() {\n    return {\n      isPrevButtonEnabled: false,\n      isNextButtonEnabled: true\n    };\n  },\n  resizeObserver: undefined,\n  watch: {\n    showNavigators: function showNavigators(newValue) {\n      newValue ? this.bindResizeObserver() : this.unbindResizeObserver();\n    },\n    activeValue: {\n      flush: 'post',\n      handler: function handler() {\n        this.updateInkBar();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n    setTimeout(function () {\n      _this.updateInkBar();\n    }, 150);\n    if (this.showNavigators) {\n      this.updateButtonState();\n      this.bindResizeObserver();\n    }\n  },\n  updated: function updated() {\n    this.showNavigators && this.updateButtonState();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindResizeObserver();\n  },\n  methods: {\n    onScroll: function onScroll(event) {\n      this.showNavigators && this.updateButtonState();\n      event.preventDefault();\n    },\n    onPrevButtonClick: function onPrevButtonClick() {\n      var content = this.$refs.content;\n      var buttonWidths = this.getVisibleButtonWidths();\n      var width = getWidth(content) - buttonWidths;\n      var currentScrollLeft = Math.abs(content.scrollLeft);\n      var scrollStep = width * 0.8;\n      var targetScrollLeft = currentScrollLeft - scrollStep;\n      var scrollLeft = Math.max(targetScrollLeft, 0);\n      content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n    },\n    onNextButtonClick: function onNextButtonClick() {\n      var content = this.$refs.content;\n      var buttonWidths = this.getVisibleButtonWidths();\n      var width = getWidth(content) - buttonWidths;\n      var currentScrollLeft = Math.abs(content.scrollLeft);\n      var scrollStep = width * 0.8;\n      var targetScrollLeft = currentScrollLeft + scrollStep;\n      var maxScrollLeft = content.scrollWidth - width;\n      var scrollLeft = Math.min(targetScrollLeft, maxScrollLeft);\n      content.scrollLeft = isRTL(content) ? -1 * scrollLeft : scrollLeft;\n    },\n    bindResizeObserver: function bindResizeObserver() {\n      var _this2 = this;\n      this.resizeObserver = new ResizeObserver(function () {\n        return _this2.updateButtonState();\n      });\n      this.resizeObserver.observe(this.$refs.list);\n    },\n    unbindResizeObserver: function unbindResizeObserver() {\n      var _this$resizeObserver;\n      (_this$resizeObserver = this.resizeObserver) === null || _this$resizeObserver === void 0 || _this$resizeObserver.unobserve(this.$refs.list);\n      this.resizeObserver = undefined;\n    },\n    updateInkBar: function updateInkBar() {\n      var _this$$refs = this.$refs,\n        content = _this$$refs.content,\n        inkbar = _this$$refs.inkbar,\n        tabs = _this$$refs.tabs;\n      if (!inkbar) return;\n      var activeTab = findSingle(content, '[data-pc-name=\"tab\"][data-p-active=\"true\"]');\n      if (this.$pcTabs.isVertical()) {\n        inkbar.style.height = getOuterHeight(activeTab) + 'px';\n        inkbar.style.top = getOffset(activeTab).top - getOffset(tabs).top + 'px';\n      } else {\n        inkbar.style.width = getOuterWidth(activeTab) + 'px';\n        inkbar.style.left = getOffset(activeTab).left - getOffset(tabs).left + 'px';\n      }\n    },\n    updateButtonState: function updateButtonState() {\n      var _this$$refs2 = this.$refs,\n        list = _this$$refs2.list,\n        content = _this$$refs2.content;\n      var scrollTop = content.scrollTop,\n        scrollWidth = content.scrollWidth,\n        scrollHeight = content.scrollHeight,\n        offsetWidth = content.offsetWidth,\n        offsetHeight = content.offsetHeight;\n      var scrollLeft = Math.abs(content.scrollLeft);\n      var _ref = [getWidth(content), getHeight(content)],\n        width = _ref[0],\n        height = _ref[1];\n      if (this.$pcTabs.isVertical()) {\n        this.isPrevButtonEnabled = scrollTop !== 0;\n        this.isNextButtonEnabled = list.offsetHeight >= offsetHeight && parseInt(scrollTop) !== scrollHeight - height;\n      } else {\n        this.isPrevButtonEnabled = scrollLeft !== 0;\n        this.isNextButtonEnabled = list.offsetWidth >= offsetWidth && parseInt(scrollLeft) !== scrollWidth - width;\n      }\n    },\n    getVisibleButtonWidths: function getVisibleButtonWidths() {\n      var _this$$refs3 = this.$refs,\n        prevButton = _this$$refs3.prevButton,\n        nextButton = _this$$refs3.nextButton;\n      var width = 0;\n      if (this.showNavigators) {\n        width = ((prevButton === null || prevButton === void 0 ? void 0 : prevButton.offsetWidth) || 0) + ((nextButton === null || nextButton === void 0 ? void 0 : nextButton.offsetWidth) || 0);\n      }\n      return width;\n    }\n  },\n  computed: {\n    templates: function templates() {\n      return this.$pcTabs.$slots;\n    },\n    activeValue: function activeValue() {\n      return this.$pcTabs.d_value;\n    },\n    showNavigators: function showNavigators() {\n      return this.$pcTabs.scrollable && this.$pcTabs.showNavigators;\n    },\n    prevButtonAriaLabel: function prevButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n    },\n    nextButtonAriaLabel: function nextButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n    },\n    dataP: function dataP() {\n      return cn({\n        scrollable: this.$pcTabs.scrollable\n      });\n    }\n  },\n  components: {\n    ChevronLeftIcon: ChevronLeftIcon,\n    ChevronRightIcon: ChevronRightIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nvar _hoisted_1 = [\"data-p\"];\nvar _hoisted_2 = [\"aria-label\", \"tabindex\"];\nvar _hoisted_3 = [\"data-p\"];\nvar _hoisted_4 = [\"aria-orientation\"];\nvar _hoisted_5 = [\"aria-label\", \"tabindex\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"list\",\n    \"class\": _ctx.cx('root'),\n    \"data-p\": $options.dataP\n  }, _ctx.ptmi('root')), [$options.showNavigators && $data.isPrevButtonEnabled ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 0,\n    ref: \"prevButton\",\n    type: \"button\",\n    \"class\": _ctx.cx('prevButton'),\n    \"aria-label\": $options.prevButtonAriaLabel,\n    tabindex: $options.$pcTabs.tabindex,\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.onPrevButtonClick && $options.onPrevButtonClick.apply($options, arguments);\n    })\n  }, _ctx.ptm('prevButton'), {\n    \"data-pc-group-section\": \"navigator\"\n  }), [(openBlock(), createBlock(resolveDynamicComponent($options.templates.previcon || 'ChevronLeftIcon'), mergeProps({\n    \"aria-hidden\": \"true\"\n  }, _ctx.ptm('prevIcon')), null, 16))], 16, _hoisted_2)), [[_directive_ripple]]) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    ref: \"content\",\n    \"class\": _ctx.cx('content'),\n    onScroll: _cache[1] || (_cache[1] = function () {\n      return $options.onScroll && $options.onScroll.apply($options, arguments);\n    }),\n    \"data-p\": $options.dataP\n  }, _ctx.ptm('content')), [createElementVNode(\"div\", mergeProps({\n    ref: \"tabs\",\n    \"class\": _ctx.cx('tabList'),\n    role: \"tablist\",\n    \"aria-orientation\": $options.$pcTabs.orientation || 'horizontal'\n  }, _ctx.ptm('tabList')), [renderSlot(_ctx.$slots, \"default\"), createElementVNode(\"span\", mergeProps({\n    ref: \"inkbar\",\n    \"class\": _ctx.cx('activeBar'),\n    role: \"presentation\",\n    \"aria-hidden\": \"true\"\n  }, _ctx.ptm('activeBar')), null, 16)], 16, _hoisted_4)], 16, _hoisted_3), $options.showNavigators && $data.isNextButtonEnabled ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 1,\n    ref: \"nextButton\",\n    type: \"button\",\n    \"class\": _ctx.cx('nextButton'),\n    \"aria-label\": $options.nextButtonAriaLabel,\n    tabindex: $options.$pcTabs.tabindex,\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.onNextButtonClick && $options.onNextButtonClick.apply($options, arguments);\n    })\n  }, _ctx.ptm('nextButton'), {\n    \"data-pc-group-section\": \"navigator\"\n  }), [(openBlock(), createBlock(resolveDynamicComponent($options.templates.nexticon || 'ChevronRightIcon'), mergeProps({\n    \"aria-hidden\": \"true\"\n  }, _ctx.ptm('nextIcon')), null, 16))], 16, _hoisted_5)), [[_directive_ripple]]) : createCommentVNode(\"\", true)], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,yCAA8B,MAAY,OAAgB,cAAuC,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","x_google_ignoreList":[0]}