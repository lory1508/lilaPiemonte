{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/rating/index.mjs?nuxt_component=async&nuxt_component_name=Rating&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport { getFirstFocusableElement, focus } from '@primeuix/utils/dom';\nimport BanIcon from '@primevue/icons/ban';\nimport StarIcon from '@primevue/icons/star';\nimport StarFillIcon from '@primevue/icons/starfill';\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport RatingStyle from 'primevue/rating/style';\nimport { createElementBlock, openBlock, mergeProps, Fragment, renderList, createElementVNode, renderSlot, normalizeClass, createBlock, resolveDynamicComponent } from 'vue';\n\nvar script$1 = {\n  name: 'BaseRating',\n  \"extends\": BaseEditableHolder,\n  props: {\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    stars: {\n      type: Number,\n      \"default\": 5\n    },\n    onIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    offIcon: {\n      type: String,\n      \"default\": undefined\n    }\n  },\n  style: RatingStyle,\n  provide: function provide() {\n    return {\n      $pcRating: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'Rating',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change', 'focus', 'blur'],\n  data: function data() {\n    return {\n      focusedOptionIndex: -1,\n      isFocusVisibleItem: true\n    };\n  },\n  methods: {\n    getPTOptions: function getPTOptions(key, value) {\n      return this.ptm(key, {\n        context: {\n          active: value <= this.d_value,\n          focused: value === this.focusedOptionIndex\n        }\n      });\n    },\n    onOptionClick: function onOptionClick(event, value) {\n      if (!this.readonly && !this.disabled) {\n        this.onOptionSelect(event, value);\n        this.isFocusVisibleItem = false;\n        var firstFocusableEl = getFirstFocusableElement(event.currentTarget);\n        firstFocusableEl && focus(firstFocusableEl);\n      }\n    },\n    onFocus: function onFocus(event, value) {\n      var _event$sourceCapabili;\n      this.focusedOptionIndex = value;\n      this.isFocusVisibleItem = ((_event$sourceCapabili = event.sourceCapabilities) === null || _event$sourceCapabili === void 0 ? void 0 : _event$sourceCapabili.firesTouchEvents) === false;\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      this.focusedOptionIndex = -1;\n      this.$emit('blur', event);\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField);\n    },\n    onChange: function onChange(event, value) {\n      this.onOptionSelect(event, value);\n      this.isFocusVisibleItem = true;\n    },\n    onOptionSelect: function onOptionSelect(event, value) {\n      if (this.focusedOptionIndex === value || this.d_value === value) {\n        this.focusedOptionIndex = -1;\n        this.updateModel(event, null);\n      } else {\n        this.focusedOptionIndex = value;\n        this.updateModel(event, value || null);\n      }\n    },\n    updateModel: function updateModel(event, value) {\n      this.writeValue(value, event);\n      this.$emit('change', {\n        originalEvent: event,\n        value: value\n      });\n    },\n    starAriaLabel: function starAriaLabel(value) {\n      return value === 1 ? this.$primevue.config.locale.aria.star : this.$primevue.config.locale.aria.stars.replace(/{star}/g, value);\n    },\n    dataOption: function dataOption(value) {\n      return cn({\n        readonly: this.readonly,\n        disabled: this.disabled,\n        active: value <= this.d_value,\n        'focus-visible': value === this.focusedOptionIndex && this.isFocusVisibleItem\n      });\n    }\n  },\n  computed: {\n    namex: function namex() {\n      return this.name || \"\".concat(this.$attrSelector, \"_name\");\n    },\n    dataP: function dataP() {\n      return cn({\n        readonly: this.readonly,\n        disabled: this.disabled\n      });\n    }\n  },\n  components: {\n    StarFillIcon: StarFillIcon,\n    StarIcon: StarIcon,\n    BanIcon: BanIcon\n  }\n};\n\nvar _hoisted_1 = [\"data-p\"];\nvar _hoisted_2 = [\"onClick\", \"data-p-active\", \"data-p-focused\", \"data-p\"];\nvar _hoisted_3 = [\"value\", \"name\", \"checked\", \"disabled\", \"readonly\", \"aria-label\", \"onFocus\", \"onChange\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root'), {\n    \"data-p\": $options.dataP\n  }), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.stars, function (value) {\n    return openBlock(), createElementBlock(\"div\", mergeProps({\n      key: value,\n      \"class\": _ctx.cx('option', {\n        value: value\n      }),\n      onClick: function onClick($event) {\n        return $options.onOptionClick($event, value);\n      },\n      ref_for: true\n    }, $options.getPTOptions('option', value), {\n      \"data-p-active\": value <= _ctx.d_value,\n      \"data-p-focused\": value === $data.focusedOptionIndex,\n      \"data-p\": $options.dataOption(value)\n    }), [createElementVNode(\"span\", mergeProps({\n      \"class\": \"p-hidden-accessible\",\n      ref_for: true\n    }, _ctx.ptm('hiddenOptionInputContainer'), {\n      \"data-p-hidden-accessible\": true\n    }), [createElementVNode(\"input\", mergeProps({\n      type: \"radio\",\n      value: value,\n      name: $options.namex,\n      checked: _ctx.d_value === value,\n      disabled: _ctx.disabled,\n      readonly: _ctx.readonly,\n      \"aria-label\": $options.starAriaLabel(value),\n      onFocus: function onFocus($event) {\n        return $options.onFocus($event, value);\n      },\n      onBlur: _cache[0] || (_cache[0] = function () {\n        return $options.onBlur && $options.onBlur.apply($options, arguments);\n      }),\n      onChange: function onChange($event) {\n        return $options.onChange($event, value);\n      },\n      ref_for: true\n    }, _ctx.ptm('hiddenOptionInput')), null, 16, _hoisted_3)], 16), value <= _ctx.d_value ? renderSlot(_ctx.$slots, \"onicon\", {\n      key: 0,\n      value: value,\n      \"class\": normalizeClass(_ctx.cx('onIcon'))\n    }, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.onIcon ? 'span' : 'StarFillIcon'), mergeProps({\n        \"class\": [_ctx.cx('onIcon'), _ctx.onIcon],\n        ref_for: true\n      }, _ctx.ptm('onIcon')), null, 16, [\"class\"]))];\n    }) : renderSlot(_ctx.$slots, \"officon\", {\n      key: 1,\n      value: value,\n      \"class\": normalizeClass(_ctx.cx('offIcon'))\n    }, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.offIcon ? 'span' : 'StarIcon'), mergeProps({\n        \"class\": [_ctx.cx('offIcon'), _ctx.offIcon],\n        ref_for: true\n      }, _ctx.ptm('offIcon')), null, 16, [\"class\"]))];\n    })], 16, _hoisted_2);\n  }), 128))], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAe,aAAA,qBAAqB,MAAM,OAAO,cAA+E,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","x_google_ignoreList":[0]}