{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/tab/index.mjs?nuxt_component=async&nuxt_component_name=Tab&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport { focus, findSingle, getAttribute } from '@primeuix/utils/dom';\nimport { equals } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps, resolveDirective, withDirectives, renderSlot, createBlock, openBlock, resolveDynamicComponent, withCtx, normalizeClass } from 'vue';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TabStyle from 'primevue/tab/style';\n\nvar script$1 = {\n  name: 'BaseTab',\n  \"extends\": BaseComponent,\n  props: {\n    value: {\n      type: [String, Number],\n      \"default\": undefined\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    as: {\n      type: [String, Object],\n      \"default\": 'BUTTON'\n    },\n    asChild: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  style: TabStyle,\n  provide: function provide() {\n    return {\n      $pcTab: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'Tab',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  inject: ['$pcTabs', '$pcTabList'],\n  methods: {\n    onFocus: function onFocus() {\n      this.$pcTabs.selectOnFocus && this.changeActiveValue();\n    },\n    onClick: function onClick() {\n      this.changeActiveValue();\n    },\n    onKeydown: function onKeydown(event) {\n      switch (event.code) {\n        case 'ArrowRight':\n          this.onArrowRightKey(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeftKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'PageDown':\n          this.onPageDownKey(event);\n          break;\n        case 'PageUp':\n          this.onPageUpKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          this.onEnterKey(event);\n          break;\n      }\n    },\n    onArrowRightKey: function onArrowRightKey(event) {\n      var nextTab = this.findNextTab(event.currentTarget);\n      nextTab ? this.changeFocusedTab(event, nextTab) : this.onHomeKey(event);\n      event.preventDefault();\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var prevTab = this.findPrevTab(event.currentTarget);\n      prevTab ? this.changeFocusedTab(event, prevTab) : this.onEndKey(event);\n      event.preventDefault();\n    },\n    onHomeKey: function onHomeKey(event) {\n      var firstTab = this.findFirstTab();\n      this.changeFocusedTab(event, firstTab);\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var lastTab = this.findLastTab();\n      this.changeFocusedTab(event, lastTab);\n      event.preventDefault();\n    },\n    onPageDownKey: function onPageDownKey(event) {\n      this.scrollInView(this.findLastTab());\n      event.preventDefault();\n    },\n    onPageUpKey: function onPageUpKey(event) {\n      this.scrollInView(this.findFirstTab());\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      this.changeActiveValue();\n      event.preventDefault();\n    },\n    findNextTab: function findNextTab(tabElement) {\n      var selfCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var element = selfCheck ? tabElement : tabElement.nextElementSibling;\n      return element ? getAttribute(element, 'data-p-disabled') || getAttribute(element, 'data-pc-section') === 'activebar' ? this.findNextTab(element) : findSingle(element, '[data-pc-name=\"tab\"]') : null;\n    },\n    findPrevTab: function findPrevTab(tabElement) {\n      var selfCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var element = selfCheck ? tabElement : tabElement.previousElementSibling;\n      return element ? getAttribute(element, 'data-p-disabled') || getAttribute(element, 'data-pc-section') === 'activebar' ? this.findPrevTab(element) : findSingle(element, '[data-pc-name=\"tab\"]') : null;\n    },\n    findFirstTab: function findFirstTab() {\n      return this.findNextTab(this.$pcTabList.$refs.tabs.firstElementChild, true);\n    },\n    findLastTab: function findLastTab() {\n      return this.findPrevTab(this.$pcTabList.$refs.tabs.lastElementChild, true);\n    },\n    changeActiveValue: function changeActiveValue() {\n      this.$pcTabs.updateValue(this.value);\n    },\n    changeFocusedTab: function changeFocusedTab(event, element) {\n      focus(element);\n      this.scrollInView(element);\n    },\n    scrollInView: function scrollInView(element) {\n      var _element$scrollIntoVi;\n      element === null || element === void 0 || (_element$scrollIntoVi = element.scrollIntoView) === null || _element$scrollIntoVi === void 0 || _element$scrollIntoVi.call(element, {\n        block: 'nearest'\n      });\n    }\n  },\n  computed: {\n    active: function active() {\n      var _this$$pcTabs;\n      return equals((_this$$pcTabs = this.$pcTabs) === null || _this$$pcTabs === void 0 ? void 0 : _this$$pcTabs.d_value, this.value);\n    },\n    id: function id() {\n      var _this$$pcTabs2;\n      return \"\".concat((_this$$pcTabs2 = this.$pcTabs) === null || _this$$pcTabs2 === void 0 ? void 0 : _this$$pcTabs2.$id, \"_tab_\").concat(this.value);\n    },\n    ariaControls: function ariaControls() {\n      var _this$$pcTabs3;\n      return \"\".concat((_this$$pcTabs3 = this.$pcTabs) === null || _this$$pcTabs3 === void 0 ? void 0 : _this$$pcTabs3.$id, \"_tabpanel_\").concat(this.value);\n    },\n    attrs: function attrs() {\n      return mergeProps(this.asAttrs, this.a11yAttrs, this.ptmi('root', this.ptParams));\n    },\n    asAttrs: function asAttrs() {\n      return this.as === 'BUTTON' ? {\n        type: 'button',\n        disabled: this.disabled\n      } : undefined;\n    },\n    a11yAttrs: function a11yAttrs() {\n      return {\n        id: this.id,\n        tabindex: this.active ? this.$pcTabs.tabindex : -1,\n        role: 'tab',\n        'aria-selected': this.active,\n        'aria-controls': this.ariaControls,\n        'data-pc-name': 'tab',\n        'data-p-disabled': this.disabled,\n        'data-p-active': this.active,\n        onFocus: this.onFocus,\n        onKeydown: this.onKeydown\n      };\n    },\n    ptParams: function ptParams() {\n      return {\n        context: {\n          active: this.active\n        }\n      };\n    },\n    dataP: function dataP() {\n      return cn({\n        active: this.active\n      });\n    }\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return !_ctx.asChild ? withDirectives((openBlock(), createBlock(resolveDynamicComponent(_ctx.as), mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('root'),\n    \"data-p\": $options.dataP,\n    onClick: $options.onClick\n  }, $options.attrs), {\n    \"default\": withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n  }, 16, [\"class\", \"data-p\", \"onClick\"])), [[_directive_ripple]]) : renderSlot(_ctx.$slots, \"default\", {\n    key: 1,\n    dataP: $options.dataP,\n    \"class\": normalizeClass(_ctx.cx('root')),\n    active: $options.active,\n    a11yAttrs: $options.a11yAttrs,\n    onClick: $options.onClick\n  });\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAe,UAAA,qBAAqB,MAAM,OAAO,cAA4E,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","x_google_ignoreList":[0]}