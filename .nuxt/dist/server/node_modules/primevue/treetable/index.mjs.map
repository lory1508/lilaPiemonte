{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/treetable/index.mjs?nuxt_component=async&nuxt_component_name=TreeTable&nuxt_component_export=default"],"sourcesContent":["import { getNextElementSibling, getOuterWidth, getPreviousElementSibling, getAttribute, getIndex, find, focus, findSingle, isClickable, setAttribute, isRTL, getOffset, addStyle, clearSelection } from '@primeuix/utils/dom';\nimport { resolveFieldData, equals, localeComparator, sort } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport { getVNodeProp, HelperSet } from '@primevue/core/utils';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Paginator from 'primevue/paginator';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TreeTableStyle from 'primevue/treetable/style';\nimport { mergeProps, createElementBlock, openBlock, createBlock, createCommentVNode, resolveDynamicComponent, toDisplayString, resolveComponent, createElementVNode, normalizeProps, resolveDirective, withDirectives, Fragment, normalizeClass, withCtx, createTextVNode, renderList, renderSlot, createSlots } from 'vue';\nimport SortAltIcon from '@primevue/icons/sortalt';\nimport SortAmountDownIcon from '@primevue/icons/sortamountdown';\nimport SortAmountUpAltIcon from '@primevue/icons/sortamountupalt';\nimport Badge from 'primevue/badge';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\n\nvar script$5 = {\n  name: 'BaseTreeTable',\n  \"extends\": BaseComponent,\n  props: {\n    value: {\n      type: null,\n      \"default\": null\n    },\n    dataKey: {\n      type: [String, Function],\n      \"default\": 'key'\n    },\n    expandedKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenu: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenuSelection: {\n      type: Object,\n      \"default\": null\n    },\n    rows: {\n      type: Number,\n      \"default\": 0\n    },\n    first: {\n      type: Number,\n      \"default\": 0\n    },\n    totalRecords: {\n      type: Number,\n      \"default\": 0\n    },\n    paginator: {\n      type: Boolean,\n      \"default\": false\n    },\n    paginatorPosition: {\n      type: String,\n      \"default\": 'bottom'\n    },\n    alwaysShowPaginator: {\n      type: Boolean,\n      \"default\": true\n    },\n    paginatorTemplate: {\n      type: String,\n      \"default\": 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown'\n    },\n    pageLinkSize: {\n      type: Number,\n      \"default\": 5\n    },\n    rowsPerPageOptions: {\n      type: Array,\n      \"default\": null\n    },\n    currentPageReportTemplate: {\n      type: String,\n      \"default\": '({currentPage} of {totalPages})'\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    },\n    rowHover: {\n      type: Boolean,\n      \"default\": false\n    },\n    autoLayout: {\n      type: Boolean,\n      \"default\": false\n    },\n    sortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortOrder: {\n      type: Number,\n      \"default\": null\n    },\n    defaultSortOrder: {\n      type: Number,\n      \"default\": 1\n    },\n    multiSortMeta: {\n      type: Array,\n      \"default\": null\n    },\n    sortMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    removableSort: {\n      type: Boolean,\n      \"default\": false\n    },\n    filters: {\n      type: Object,\n      \"default\": null\n    },\n    filterMode: {\n      type: String,\n      \"default\": 'lenient'\n    },\n    filterLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    resizableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    columnResizeMode: {\n      type: String,\n      \"default\": 'fit'\n    },\n    indentation: {\n      type: Number,\n      \"default\": 1\n    },\n    showGridlines: {\n      type: Boolean,\n      \"default\": false\n    },\n    scrollable: {\n      type: Boolean,\n      \"default\": false\n    },\n    scrollHeight: {\n      type: String,\n      \"default\": null\n    },\n    size: {\n      type: String,\n      \"default\": null\n    },\n    tableStyle: {\n      type: null,\n      \"default\": null\n    },\n    tableClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    tableProps: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  style: TreeTableStyle,\n  provide: function provide() {\n    return {\n      $pcTreeTable: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script$4 = {\n  name: 'FooterCell',\n  hostName: 'TreeTable',\n  \"extends\": BaseComponent,\n  props: {\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      styleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  methods: {\n    columnProp: function columnProp(prop) {\n      return getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          frozen: this.columnProp('frozen'),\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var pos = 0;\n          var next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            pos = getOuterWidth(next) + parseFloat(next.style['inset-inline-end'] || 0);\n          }\n          this.styleObject.insetInlineEnd = pos + 'px';\n        } else {\n          var _pos = 0;\n          var prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            _pos = getOuterWidth(prev) + parseFloat(prev.style['inset-inline-start'] || 0);\n          }\n          this.styleObject.insetInlineStart = _pos + 'px';\n        }\n      }\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.columnProp('footerClass'), this.columnProp('class'), this.cx('footerCell')];\n    },\n    containerStyle: function containerStyle() {\n      var bodyStyle = this.columnProp('footerStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n    }\n  }\n};\n\nfunction _typeof$5(o) { \"@babel/helpers - typeof\"; return _typeof$5 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$5(o); }\nfunction ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), true).forEach(function (r) { _defineProperty$5(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$5(e, r, t) { return (r = _toPropertyKey$5(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$5(t) { var i = _toPrimitive$5(t, \"string\"); return \"symbol\" == _typeof$5(i) ? i : i + \"\"; }\nfunction _toPrimitive$5(t, r) { if (\"object\" != _typeof$5(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$5(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1$4 = [\"data-p-frozen-column\"];\nfunction render$4(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"td\", mergeProps({\n    style: $options.containerStyle,\n    \"class\": $options.containerClass,\n    role: \"cell\"\n  }, _objectSpread$5(_objectSpread$5({}, $options.getColumnPT('root')), $options.getColumnPT('footerCell')), {\n    \"data-p-frozen-column\": $options.columnProp('frozen')\n  }), [$props.column.children && $props.column.children.footer ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.footer), {\n    key: 0,\n    column: $props.column\n  }, null, 8, [\"column\"])) : createCommentVNode(\"\", true), $options.columnProp('footer') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('columnFooter')\n  }, $options.getColumnPT('columnFooter')), toDisplayString($options.columnProp('footer')), 17)) : createCommentVNode(\"\", true)], 16, _hoisted_1$4);\n}\n\nscript$4.render = render$4;\n\nvar script$3 = {\n  name: 'HeaderCell',\n  hostName: 'TreeTable',\n  \"extends\": BaseComponent,\n  emits: ['column-click', 'column-resizestart'],\n  props: {\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    resizableColumns: {\n      type: Boolean,\n      \"default\": false\n    },\n    sortField: {\n      type: [String, Function],\n      \"default\": null\n    },\n    sortOrder: {\n      type: Number,\n      \"default\": null\n    },\n    multiSortMeta: {\n      type: Array,\n      \"default\": null\n    },\n    sortMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      styleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  methods: {\n    columnProp: function columnProp(prop) {\n      return getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          sorted: this.isColumnSorted(),\n          frozen: this.$parentInstance.scrollable && this.columnProp('frozen'),\n          resizable: this.resizableColumns,\n          scrollable: this.$parentInstance.scrollable,\n          showGridlines: this.$parentInstance.showGridlines,\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var pos = 0;\n          var next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            pos = getOuterWidth(next) + parseFloat(next.style['inset-inline-end'] || 0);\n          }\n          this.styleObject.insetInlineEnd = pos + 'px';\n        } else {\n          var _pos = 0;\n          var prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            _pos = getOuterWidth(prev) + parseFloat(prev.style['inset-inline-start'] || 0);\n          }\n          this.styleObject.insetInlineStart = _pos + 'px';\n        }\n        var filterRow = this.$el.parentElement.nextElementSibling;\n        if (filterRow) {\n          var index = getIndex(this.$el);\n          filterRow.children[index].style['inset-inline-start'] = this.styleObject['inset-inline-start'];\n          filterRow.children[index].style['inset-inline-end'] = this.styleObject['inset-inline-end'];\n        }\n      }\n    },\n    onClick: function onClick(event) {\n      this.$emit('column-click', {\n        originalEvent: event,\n        column: this.column\n      });\n    },\n    onKeyDown: function onKeyDown(event) {\n      if ((event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && event.currentTarget.nodeName === 'TH' && getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n        this.$emit('column-click', {\n          originalEvent: event,\n          column: this.column\n        });\n        event.preventDefault();\n      }\n    },\n    onResizeStart: function onResizeStart(event) {\n      this.$emit('column-resizestart', event);\n    },\n    getMultiSortMetaIndex: function getMultiSortMetaIndex() {\n      var index = -1;\n      for (var i = 0; i < this.multiSortMeta.length; i++) {\n        var meta = this.multiSortMeta[i];\n        if (meta.field === this.columnProp('field') || meta.field === this.columnProp('sortField')) {\n          index = i;\n          break;\n        }\n      }\n      return index;\n    },\n    isMultiSorted: function isMultiSorted() {\n      return this.columnProp('sortable') && this.getMultiSortMetaIndex() > -1;\n    },\n    isColumnSorted: function isColumnSorted() {\n      return this.sortMode === 'single' ? this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField')) : this.isMultiSorted();\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.columnProp('headerClass'), this.columnProp('class'), this.cx('headerCell')];\n    },\n    containerStyle: function containerStyle() {\n      var headerStyle = this.columnProp('headerStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, headerStyle, this.styleObject] : [columnStyle, headerStyle];\n    },\n    sortState: function sortState() {\n      var sorted = false;\n      var sortOrder = null;\n      if (this.sortMode === 'single') {\n        sorted = this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField'));\n        sortOrder = sorted ? this.sortOrder : 0;\n      } else if (this.sortMode === 'multiple') {\n        var metaIndex = this.getMultiSortMetaIndex();\n        if (metaIndex > -1) {\n          sorted = true;\n          sortOrder = this.multiSortMeta[metaIndex].order;\n        }\n      }\n      return {\n        sorted: sorted,\n        sortOrder: sortOrder\n      };\n    },\n    sortableColumnIcon: function sortableColumnIcon() {\n      var _this$sortState = this.sortState,\n        sorted = _this$sortState.sorted,\n        sortOrder = _this$sortState.sortOrder;\n      if (!sorted) return SortAltIcon;else if (sorted && sortOrder > 0) return SortAmountUpAltIcon;else if (sorted && sortOrder < 0) return SortAmountDownIcon;\n      return null;\n    },\n    ariaSort: function ariaSort() {\n      if (this.columnProp('sortable')) {\n        var _this$sortState2 = this.sortState,\n          sorted = _this$sortState2.sorted,\n          sortOrder = _this$sortState2.sortOrder;\n        if (sorted && sortOrder < 0) return 'descending';else if (sorted && sortOrder > 0) return 'ascending';else return 'none';\n      } else {\n        return null;\n      }\n    }\n  },\n  components: {\n    Badge: Badge,\n    SortAltIcon: SortAltIcon,\n    SortAmountUpAltIcon: SortAmountUpAltIcon,\n    SortAmountDownIcon: SortAmountDownIcon\n  }\n};\n\nfunction _typeof$4(o) { \"@babel/helpers - typeof\"; return _typeof$4 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$4(o); }\nfunction ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), true).forEach(function (r) { _defineProperty$4(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$4(e, r, t) { return (r = _toPropertyKey$4(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$4(t) { var i = _toPrimitive$4(t, \"string\"); return \"symbol\" == _typeof$4(i) ? i : i + \"\"; }\nfunction _toPrimitive$4(t, r) { if (\"object\" != _typeof$4(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$4(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1$3 = [\"tabindex\", \"aria-sort\", \"data-p-sortable-column\", \"data-p-resizable-column\", \"data-p-sorted\", \"data-p-frozen-column\"];\nfunction render$3(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Badge = resolveComponent(\"Badge\");\n  return openBlock(), createElementBlock(\"th\", mergeProps({\n    \"class\": $options.containerClass,\n    style: [$options.containerStyle],\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    tabindex: $options.columnProp('sortable') ? '0' : null,\n    \"aria-sort\": $options.ariaSort,\n    role: \"columnheader\"\n  }, _objectSpread$4(_objectSpread$4({}, $options.getColumnPT('root')), $options.getColumnPT('headerCell')), {\n    \"data-p-sortable-column\": $options.columnProp('sortable'),\n    \"data-p-resizable-column\": $props.resizableColumns,\n    \"data-p-sorted\": $options.isColumnSorted(),\n    \"data-p-frozen-column\": $options.columnProp('frozen')\n  }), [$props.resizableColumns && !$options.columnProp('frozen') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('columnResizer'),\n    onMousedown: _cache[0] || (_cache[0] = function () {\n      return $options.onResizeStart && $options.onResizeStart.apply($options, arguments);\n    })\n  }, $options.getColumnPT('columnResizer')), null, 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('columnHeaderContent')\n  }, $options.getColumnPT('columnHeaderContent')), [$props.column.children && $props.column.children.header ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.header), {\n    key: 0,\n    column: $props.column\n  }, null, 8, [\"column\"])) : createCommentVNode(\"\", true), $options.columnProp('header') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('columnTitle')\n  }, $options.getColumnPT('columnTitle')), toDisplayString($options.columnProp('header')), 17)) : createCommentVNode(\"\", true), $options.columnProp('sortable') ? (openBlock(), createElementBlock(\"span\", normalizeProps(mergeProps({\n    key: 2\n  }, $options.getColumnPT('sort'))), [(openBlock(), createBlock(resolveDynamicComponent($props.column.children && $props.column.children.sorticon || $options.sortableColumnIcon), mergeProps({\n    sorted: $options.sortState.sorted,\n    sortOrder: $options.sortState.sortOrder,\n    \"class\": _ctx.cx('sortIcon')\n  }, $options.getColumnPT('sortIcon')), null, 16, [\"sorted\", \"sortOrder\", \"class\"]))], 16)) : createCommentVNode(\"\", true), $options.isMultiSorted() ? (openBlock(), createBlock(_component_Badge, mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('pcSortBadge')\n  }, $options.getColumnPT('pcSortBadge'), {\n    value: $options.getMultiSortMetaIndex() + 1,\n    size: \"small\"\n  }), null, 16, [\"class\", \"value\"])) : createCommentVNode(\"\", true)], 16)], 16, _hoisted_1$3);\n}\n\nscript$3.render = render$3;\n\nvar script$2 = {\n  name: 'BodyCell',\n  hostName: 'TreeTable',\n  \"extends\": BaseComponent,\n  emits: ['node-toggle', 'checkbox-toggle'],\n  props: {\n    node: {\n      type: Object,\n      \"default\": null\n    },\n    column: {\n      type: Object,\n      \"default\": null\n    },\n    level: {\n      type: Number,\n      \"default\": 0\n    },\n    indentation: {\n      type: Number,\n      \"default\": 1\n    },\n    leaf: {\n      type: Boolean,\n      \"default\": false\n    },\n    expanded: {\n      type: Boolean,\n      \"default\": false\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    checked: {\n      type: Boolean,\n      \"default\": false\n    },\n    partialChecked: {\n      type: Boolean,\n      \"default\": false\n    },\n    templates: {\n      type: Object,\n      \"default\": null\n    },\n    index: {\n      type: Number,\n      \"default\": null\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    }\n  },\n  data: function data() {\n    return {\n      styleObject: {}\n    };\n  },\n  mounted: function mounted() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  updated: function updated() {\n    if (this.columnProp('frozen')) {\n      this.updateStickyPosition();\n    }\n  },\n  methods: {\n    toggle: function toggle() {\n      this.$emit('node-toggle', this.node);\n    },\n    columnProp: function columnProp(prop) {\n      return getVNodeProp(this.column, prop);\n    },\n    getColumnPT: function getColumnPT(key) {\n      var _this$$parentInstance;\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: this.index,\n          selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n          selected: this.$parent.selected,\n          frozen: this.columnProp('frozen'),\n          scrollable: this.$parentInstance.scrollable,\n          showGridlines: this.$parentInstance.showGridlines,\n          size: (_this$$parentInstance = this.$parentInstance) === null || _this$$parentInstance === void 0 ? void 0 : _this$$parentInstance.size,\n          node: this.node\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    getColumnProp: function getColumnProp() {\n      return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo\n    },\n    getColumnCheckboxPT: function getColumnCheckboxPT(key) {\n      var columnMetaData = {\n        props: this.column.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          checked: this.checked,\n          partialChecked: this.partialChecked,\n          node: this.node\n        }\n      };\n      return mergeProps(this.ptm(\"column.\".concat(key), {\n        column: columnMetaData\n      }), this.ptm(\"column.\".concat(key), columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n    },\n    updateStickyPosition: function updateStickyPosition() {\n      if (this.columnProp('frozen')) {\n        var align = this.columnProp('alignFrozen');\n        if (align === 'right') {\n          var pos = 0;\n          var next = getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (next) {\n            pos = getOuterWidth(next) + parseFloat(next.style['inset-inline-end'] || 0);\n          }\n          this.styleObject.insetInlineEnd = pos + 'px';\n        } else {\n          var _pos = 0;\n          var prev = getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n          if (prev) {\n            _pos = getOuterWidth(prev) + parseFloat(prev.style['inset-inline-start'] || 0);\n          }\n          this.styleObject.insetInlineStart = _pos + 'px';\n        }\n      }\n    },\n    resolveFieldData: function resolveFieldData$1(rowData, field) {\n      return resolveFieldData(rowData, field);\n    },\n    toggleCheckbox: function toggleCheckbox() {\n      this.$emit('checkbox-toggle');\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.columnProp('bodyClass'), this.columnProp('class'), this.cx('bodyCell')];\n    },\n    containerStyle: function containerStyle() {\n      var bodyStyle = this.columnProp('bodyStyle');\n      var columnStyle = this.columnProp('style');\n      return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n    },\n    togglerStyle: function togglerStyle() {\n      return {\n        marginLeft: this.level * this.indentation + 'rem',\n        visibility: this.leaf ? 'hidden' : 'visible'\n      };\n    },\n    checkboxSelectionMode: function checkboxSelectionMode() {\n      return this.selectionMode === 'checkbox';\n    }\n  },\n  components: {\n    Checkbox: Checkbox,\n    ChevronRightIcon: ChevronRightIcon,\n    ChevronDownIcon: ChevronDownIcon,\n    CheckIcon: CheckIcon,\n    MinusIcon: MinusIcon,\n    SpinnerIcon: SpinnerIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nfunction _typeof$3(o) { \"@babel/helpers - typeof\"; return _typeof$3 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$3(o); }\nfunction ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), true).forEach(function (r) { _defineProperty$3(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$3(e, r, t) { return (r = _toPropertyKey$3(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$3(t) { var i = _toPrimitive$3(t, \"string\"); return \"symbol\" == _typeof$3(i) ? i : i + \"\"; }\nfunction _toPrimitive$3(t, r) { if (\"object\" != _typeof$3(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$3(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1$2 = [\"data-p-frozen-column\"];\nfunction render$2(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_Checkbox = resolveComponent(\"Checkbox\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"td\", mergeProps({\n    style: $options.containerStyle,\n    \"class\": $options.containerClass,\n    role: \"cell\"\n  }, _objectSpread$3(_objectSpread$3({}, $options.getColumnPT('root')), $options.getColumnPT('bodyCell')), {\n    \"data-p-frozen-column\": $options.columnProp('frozen')\n  }), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('bodyCellContent')\n  }, $options.getColumnPT('bodyCellContent')), [$options.columnProp('expander') ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 0,\n    type: \"button\",\n    \"class\": _ctx.cx('nodeToggleButton'),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.toggle && $options.toggle.apply($options, arguments);\n    }),\n    style: $options.togglerStyle,\n    tabindex: \"-1\"\n  }, $options.getColumnPT('nodeToggleButton'), {\n    \"data-pc-group-section\": \"rowactionbutton\"\n  }), [$props.node.loading && $props.loadingMode === 'icon' ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [$props.templates['nodetoggleicon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['nodetoggleicon']), {\n    key: 0\n  })) : createCommentVNode(\"\", true), $props.templates['nodetogglericon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['nodetogglericon']), {\n    key: 1\n  })) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n    key: 2,\n    spin: \"\"\n  }, _ctx.ptm('nodetoggleicon')), null, 16))], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [$props.column.children && $props.column.children.rowtoggleicon ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.rowtoggleicon), {\n    key: 0,\n    node: $props.node,\n    expanded: $props.expanded,\n    \"class\": normalizeClass(_ctx.cx('nodeToggleIcon'))\n  }, null, 8, [\"node\", \"expanded\", \"class\"])) : $props.templates['nodetoggleicon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['nodetoggleicon']), {\n    key: 1,\n    node: $props.node,\n    expanded: $props.expanded,\n    \"class\": normalizeClass(_ctx.cx('nodeToggleIcon'))\n  }, null, 8, [\"node\", \"expanded\", \"class\"])) : $props.column.children && $props.column.children.rowtogglericon ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.rowtogglericon), {\n    key: 2,\n    node: $props.node,\n    expanded: $props.expanded,\n    \"class\": normalizeClass(_ctx.cx('nodeToggleIcon'))\n  }, null, 8, [\"node\", \"expanded\", \"class\"])) : $props.expanded ? (openBlock(), createBlock(resolveDynamicComponent($props.node.expandedIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n    key: 3,\n    \"class\": _ctx.cx('nodeToggleIcon')\n  }, $options.getColumnPT('nodeToggleIcon')), null, 16, [\"class\"])) : (openBlock(), createBlock(resolveDynamicComponent($props.node.collapsedIcon ? 'span' : 'ChevronRightIcon'), mergeProps({\n    key: 4,\n    \"class\": _ctx.cx('nodeToggleIcon')\n  }, $options.getColumnPT('nodeToggleIcon')), null, 16, [\"class\"]))], 64))], 16)), [[_directive_ripple]]) : createCommentVNode(\"\", true), $options.checkboxSelectionMode && $options.columnProp('expander') ? (openBlock(), createBlock(_component_Checkbox, {\n    key: 1,\n    modelValue: $props.checked,\n    binary: true,\n    \"class\": normalizeClass(_ctx.cx('pcNodeCheckbox')),\n    disabled: $props.node.selectable === false,\n    onChange: $options.toggleCheckbox,\n    tabindex: -1,\n    indeterminate: $props.partialChecked,\n    unstyled: _ctx.unstyled,\n    pt: $options.getColumnCheckboxPT('pcNodeCheckbox'),\n    \"data-p-partialchecked\": $props.partialChecked\n  }, {\n    icon: withCtx(function (slotProps) {\n      return [$props.templates['checkboxicon'] ? (openBlock(), createBlock(resolveDynamicComponent($props.templates['checkboxicon']), {\n        key: 0,\n        checked: slotProps.checked,\n        partialChecked: $props.partialChecked,\n        \"class\": normalizeClass(slotProps[\"class\"])\n      }, null, 8, [\"checked\", \"partialChecked\", \"class\"])) : createCommentVNode(\"\", true)];\n    }),\n    _: 1\n  }, 8, [\"modelValue\", \"class\", \"disabled\", \"onChange\", \"indeterminate\", \"unstyled\", \"pt\", \"data-p-partialchecked\"])) : createCommentVNode(\"\", true), $props.column.children && $props.column.children.body ? (openBlock(), createBlock(resolveDynamicComponent($props.column.children.body), {\n    key: 2,\n    node: $props.node,\n    column: $props.column\n  }, null, 8, [\"node\", \"column\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 3\n  }, [createTextVNode(toDisplayString($options.resolveFieldData($props.node.data, $options.columnProp('field'))), 1)], 64))], 16)], 16, _hoisted_1$2);\n}\n\nscript$2.render = render$2;\n\nfunction _typeof$2(o) { \"@babel/helpers - typeof\"; return _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$2(o); }\nfunction _createForOfIteratorHelper$1(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), true).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$2(e, r, t) { return (r = _toPropertyKey$2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$2(t) { var i = _toPrimitive$2(t, \"string\"); return \"symbol\" == _typeof$2(i) ? i : i + \"\"; }\nfunction _toPrimitive$2(t, r) { if (\"object\" != _typeof$2(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$2(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _toConsumableArray$1(r) { return _arrayWithoutHoles$1(r) || _iterableToArray$1(r) || _unsupportedIterableToArray$1(r) || _nonIterableSpread$1(); }\nfunction _nonIterableSpread$1() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray$1(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }\nfunction _iterableToArray$1(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles$1(r) { if (Array.isArray(r)) return _arrayLikeToArray$1(r); }\nfunction _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar script$1 = {\n  name: 'TreeTableRow',\n  hostName: 'TreeTable',\n  \"extends\": BaseComponent,\n  emits: ['node-click', 'node-toggle', 'checkbox-change', 'nodeClick', 'nodeToggle', 'checkboxChange', 'row-rightclick', 'rowRightclick'],\n  props: {\n    node: {\n      type: null,\n      \"default\": null\n    },\n    dataKey: {\n      type: [String, Function],\n      \"default\": 'key'\n    },\n    parentNode: {\n      type: null,\n      \"default\": null\n    },\n    columns: {\n      type: null,\n      \"default\": null\n    },\n    expandedKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionKeys: {\n      type: null,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": null\n    },\n    level: {\n      type: Number,\n      \"default\": 0\n    },\n    indentation: {\n      type: Number,\n      \"default\": 1\n    },\n    tabindex: {\n      type: Number,\n      \"default\": -1\n    },\n    ariaSetSize: {\n      type: Number,\n      \"default\": null\n    },\n    ariaPosInset: {\n      type: Number,\n      \"default\": null\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    },\n    templates: {\n      type: Object,\n      \"default\": null\n    },\n    contextMenu: {\n      type: Boolean,\n      \"default\": false\n    },\n    contextMenuSelection: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  nodeTouched: false,\n  methods: {\n    columnProp: function columnProp(col, prop) {\n      return getVNodeProp(col, prop);\n    },\n    toggle: function toggle() {\n      this.$emit('node-toggle', this.node);\n    },\n    onClick: function onClick(event) {\n      if (isClickable(event.target) || getAttribute(event.target, 'data-pc-section') === 'nodetogglebutton' || getAttribute(event.target, 'data-pc-section') === 'nodetoggleicon' || event.target.tagName === 'path') {\n        return;\n      }\n      this.setTabIndexForSelectionMode(event, this.nodeTouched);\n      this.$emit('node-click', {\n        originalEvent: event,\n        nodeTouched: this.nodeTouched,\n        node: this.node\n      });\n      this.nodeTouched = false;\n    },\n    onRowRightClick: function onRowRightClick(event) {\n      this.$emit('row-rightclick', {\n        originalEvent: event,\n        node: this.node\n      });\n    },\n    onTouchEnd: function onTouchEnd() {\n      this.nodeTouched = true;\n    },\n    nodeKey: function nodeKey(node) {\n      return resolveFieldData(node, this.dataKey);\n    },\n    onKeyDown: function onKeyDown(event, item) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeftKey(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          if (!isClickable(event.target)) {\n            this.onEnterKey(event, item);\n          }\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      var nextElementSibling = event.currentTarget.nextElementSibling;\n      nextElementSibling && this.focusRowChange(event.currentTarget, nextElementSibling);\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      var previousElementSibling = event.currentTarget.previousElementSibling;\n      previousElementSibling && this.focusRowChange(event.currentTarget, previousElementSibling);\n      event.preventDefault();\n    },\n    onArrowRightKey: function onArrowRightKey(event) {\n      var _this = this;\n      var ishiddenIcon = findSingle(event.currentTarget, 'button').style.visibility === 'hidden';\n      var togglerElement = findSingle(this.$refs.node, '[data-pc-section=\"nodetogglebutton\"]');\n      if (ishiddenIcon) return;\n      !this.expanded && togglerElement.click();\n      this.$nextTick(function () {\n        _this.onArrowDownKey(event);\n      });\n      event.preventDefault();\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      if (this.level === 0 && !this.expanded) {\n        return;\n      }\n      var currentTarget = event.currentTarget;\n      var ishiddenIcon = findSingle(currentTarget, 'button').style.visibility === 'hidden';\n      var togglerElement = findSingle(currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n      if (this.expanded && !ishiddenIcon) {\n        togglerElement.click();\n        return;\n      }\n      var target = this.findBeforeClickableNode(currentTarget);\n      target && this.focusRowChange(currentTarget, target);\n    },\n    onHomeKey: function onHomeKey(event) {\n      var findFirstElement = findSingle(event.currentTarget.parentElement, \"tr[aria-level=\\\"\".concat(this.level + 1, \"\\\"]\"));\n      findFirstElement && focus(findFirstElement);\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var nodes = find(event.currentTarget.parentElement, \"tr[aria-level=\\\"\".concat(this.level + 1, \"\\\"]\"));\n      var findFirstElement = nodes[nodes.length - 1];\n      focus(findFirstElement);\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      event.preventDefault();\n      this.setTabIndexForSelectionMode(event, this.nodeTouched);\n      if (this.selectionMode === 'checkbox') {\n        this.toggleCheckbox();\n        return;\n      }\n      this.$emit('node-click', {\n        originalEvent: event,\n        nodeTouched: this.nodeTouched,\n        node: this.node\n      });\n      this.nodeTouched = false;\n    },\n    onTabKey: function onTabKey() {\n      var rows = _toConsumableArray$1(find(this.$refs.node.parentElement, 'tr'));\n      var hasSelectedRow = rows.some(function (row) {\n        return getAttribute(row, 'data-p-selected') || row.getAttribute('aria-checked') === 'true';\n      });\n      rows.forEach(function (row) {\n        row.tabIndex = -1;\n      });\n      if (hasSelectedRow) {\n        var selectedNodes = rows.filter(function (node) {\n          return getAttribute(node, 'data-p-selected') || node.getAttribute('aria-checked') === 'true';\n        });\n        selectedNodes[0].tabIndex = 0;\n        return;\n      }\n      rows[0].tabIndex = 0;\n    },\n    focusRowChange: function focusRowChange(firstFocusableRow, currentFocusedRow) {\n      firstFocusableRow.tabIndex = '-1';\n      currentFocusedRow.tabIndex = '0';\n      focus(currentFocusedRow);\n    },\n    findBeforeClickableNode: function findBeforeClickableNode(node) {\n      var prevNode = node.previousElementSibling;\n      if (prevNode) {\n        var prevNodeButton = prevNode.querySelector('button');\n        if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n          return prevNode;\n        }\n        return this.findBeforeClickableNode(prevNode);\n      }\n      return null;\n    },\n    toggleCheckbox: function toggleCheckbox() {\n      var _selectionKeys = this.selectionKeys ? _objectSpread$2({}, this.selectionKeys) : {};\n      var _check = !this.checked;\n      this.propagateDown(this.node, _check, _selectionKeys);\n      this.$emit('checkbox-change', {\n        node: this.node,\n        check: _check,\n        selectionKeys: _selectionKeys\n      });\n    },\n    propagateDown: function propagateDown(node, check, selectionKeys) {\n      if (check) selectionKeys[this.nodeKey(node)] = {\n        checked: true,\n        partialChecked: false\n      };else delete selectionKeys[this.nodeKey(node)];\n      if (node.children && node.children.length) {\n        var _iterator = _createForOfIteratorHelper$1(node.children),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n            this.propagateDown(child, check, selectionKeys);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    },\n    propagateUp: function propagateUp(event) {\n      var check = event.check;\n      var _selectionKeys = _objectSpread$2({}, event.selectionKeys);\n      var checkedChildCount = 0;\n      var childPartialSelected = false;\n      var _iterator2 = _createForOfIteratorHelper$1(this.node.children),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n          if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (check && checkedChildCount === this.node.children.length) {\n        _selectionKeys[this.nodeKey(this.node)] = {\n          checked: true,\n          partialChecked: false\n        };\n      } else {\n        if (!check) {\n          delete _selectionKeys[this.nodeKey(this.node)];\n        }\n        if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== this.node.children.length) _selectionKeys[this.nodeKey(this.node)] = {\n          checked: false,\n          partialChecked: true\n        };else _selectionKeys[this.nodeKey(this.node)] = {\n          checked: false,\n          partialChecked: false\n        };\n      }\n      this.$emit('checkbox-change', {\n        node: event.node,\n        check: event.check,\n        selectionKeys: _selectionKeys\n      });\n    },\n    onCheckboxChange: function onCheckboxChange(event) {\n      var check = event.check;\n      var _selectionKeys = _objectSpread$2({}, event.selectionKeys);\n      var checkedChildCount = 0;\n      var childPartialSelected = false;\n      var _iterator3 = _createForOfIteratorHelper$1(this.node.children),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (check && checkedChildCount === this.node.children.length) {\n        _selectionKeys[this.nodeKey(this.node)] = {\n          checked: true,\n          partialChecked: false\n        };\n      } else {\n        if (!check) {\n          delete _selectionKeys[this.nodeKey(this.node)];\n        }\n        if (childPartialSelected || checkedChildCount > 0 && checkedChildCount !== this.node.children.length) _selectionKeys[this.nodeKey(this.node)] = {\n          checked: false,\n          partialChecked: true\n        };else _selectionKeys[this.nodeKey(this.node)] = {\n          checked: false,\n          partialChecked: false\n        };\n      }\n      this.$emit('checkbox-change', {\n        node: event.node,\n        check: event.check,\n        selectionKeys: _selectionKeys\n      });\n    },\n    setTabIndexForSelectionMode: function setTabIndexForSelectionMode(event, nodeTouched) {\n      if (this.selectionMode !== null) {\n        var elements = _toConsumableArray$1(find(this.$refs.node.parentElement, 'tr'));\n        event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n        if (elements.every(function (element) {\n          return element.tabIndex === -1;\n        })) {\n          elements[0].tabIndex = 0;\n        }\n      }\n    }\n  },\n  computed: {\n    containerClass: function containerClass() {\n      return [this.node.styleClass, this.cx('row')];\n    },\n    expanded: function expanded() {\n      return this.expandedKeys && this.expandedKeys[this.nodeKey(this.node)] === true;\n    },\n    leaf: function leaf() {\n      return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n    },\n    selected: function selected() {\n      return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] === true : false;\n    },\n    isSelectedWithContextMenu: function isSelectedWithContextMenu() {\n      if (this.node && this.contextMenuSelection) {\n        return equals(this.node, this.contextMenuSelection, this.dataKey);\n      }\n      return false;\n    },\n    checked: function checked() {\n      return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].checked : false;\n    },\n    partialChecked: function partialChecked() {\n      return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].partialChecked : false;\n    },\n    getAriaSelected: function getAriaSelected() {\n      return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : null;\n    },\n    ptmOptions: function ptmOptions() {\n      return {\n        context: {\n          selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n          selected: this.selected,\n          scrollable: this.$parentInstance.scrollable\n        }\n      };\n    }\n  },\n  components: {\n    TTBodyCell: script$2\n  }\n};\n\nvar _hoisted_1$1 = [\"tabindex\", \"aria-expanded\", \"aria-level\", \"aria-setsize\", \"aria-posinset\", \"aria-selected\", \"aria-checked\", \"data-p-selected\", \"data-p-selected-contextmenu\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_TTBodyCell = resolveComponent(\"TTBodyCell\");\n  var _component_TreeTableRow = resolveComponent(\"TreeTableRow\", true);\n  return openBlock(), createElementBlock(Fragment, null, [createElementVNode(\"tr\", mergeProps({\n    ref: \"node\",\n    \"class\": $options.containerClass,\n    style: $props.node.style,\n    tabindex: $props.tabindex,\n    role: \"row\",\n    \"aria-expanded\": $props.node.children && $props.node.children.length ? $options.expanded : undefined,\n    \"aria-level\": $props.level + 1,\n    \"aria-setsize\": $props.ariaSetSize,\n    \"aria-posinset\": $props.ariaPosInset,\n    \"aria-selected\": $options.getAriaSelected,\n    \"aria-checked\": $options.checked || undefined,\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    onTouchend: _cache[3] || (_cache[3] = function () {\n      return $options.onTouchEnd && $options.onTouchEnd.apply($options, arguments);\n    }),\n    onContextmenu: _cache[4] || (_cache[4] = function () {\n      return $options.onRowRightClick && $options.onRowRightClick.apply($options, arguments);\n    })\n  }, _ctx.ptm('row', $options.ptmOptions), {\n    \"data-p-selected\": $options.selected,\n    \"data-p-selected-contextmenu\": $props.contextMenuSelection && $options.isSelectedWithContextMenu\n  }), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createBlock(_component_TTBodyCell, {\n      key: 0,\n      column: col,\n      node: $props.node,\n      level: $props.level,\n      leaf: $options.leaf,\n      indentation: $props.indentation,\n      expanded: $options.expanded,\n      selectionMode: $props.selectionMode,\n      checked: $options.checked,\n      partialChecked: $options.partialChecked,\n      templates: $props.templates,\n      onNodeToggle: _cache[0] || (_cache[0] = function ($event) {\n        return _ctx.$emit('node-toggle', $event);\n      }),\n      onCheckboxToggle: $options.toggleCheckbox,\n      index: i,\n      loadingMode: $props.loadingMode,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"column\", \"node\", \"level\", \"leaf\", \"indentation\", \"expanded\", \"selectionMode\", \"checked\", \"partialChecked\", \"templates\", \"onCheckboxToggle\", \"index\", \"loadingMode\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16, _hoisted_1$1), $options.expanded && $props.node.children && $props.node.children.length ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList($props.node.children, function (childNode) {\n    return openBlock(), createBlock(_component_TreeTableRow, {\n      key: $options.nodeKey(childNode),\n      dataKey: $props.dataKey,\n      columns: $props.columns,\n      node: childNode,\n      parentNode: $props.node,\n      level: $props.level + 1,\n      expandedKeys: $props.expandedKeys,\n      selectionMode: $props.selectionMode,\n      selectionKeys: $props.selectionKeys,\n      contextMenu: $props.contextMenu,\n      contextMenuSelection: $props.contextMenuSelection,\n      indentation: $props.indentation,\n      ariaPosInset: $props.node.children.indexOf(childNode) + 1,\n      ariaSetSize: $props.node.children.length,\n      templates: $props.templates,\n      onNodeToggle: _cache[5] || (_cache[5] = function ($event) {\n        return _ctx.$emit('node-toggle', $event);\n      }),\n      onNodeClick: _cache[6] || (_cache[6] = function ($event) {\n        return _ctx.$emit('node-click', $event);\n      }),\n      onRowRightclick: _cache[7] || (_cache[7] = function ($event) {\n        return _ctx.$emit('row-rightclick', $event);\n      }),\n      onCheckboxChange: $options.onCheckboxChange,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"dataKey\", \"columns\", \"node\", \"parentNode\", \"level\", \"expandedKeys\", \"selectionMode\", \"selectionKeys\", \"contextMenu\", \"contextMenuSelection\", \"indentation\", \"ariaPosInset\", \"ariaSetSize\", \"templates\", \"onCheckboxChange\", \"unstyled\", \"pt\"]);\n  }), 128)) : createCommentVNode(\"\", true)], 64);\n}\n\nscript$1.render = render$1;\n\nfunction _typeof$1(o) { \"@babel/helpers - typeof\"; return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$1(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), true).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$1(t) { var i = _toPrimitive$1(t, \"string\"); return \"symbol\" == _typeof$1(i) ? i : i + \"\"; }\nfunction _toPrimitive$1(t, r) { if (\"object\" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$1(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar script = {\n  name: 'TreeTable',\n  \"extends\": script$5,\n  inheritAttrs: false,\n  emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect', 'update:first', 'update:rows', 'page', 'update:sortField', 'update:sortOrder', 'update:multiSortMeta', 'sort', 'filter', 'column-resize-end', 'update:contextMenuSelection', 'row-contextmenu'],\n  provide: function provide() {\n    return {\n      $columns: this.d_columns\n    };\n  },\n  data: function data() {\n    return {\n      d_expandedKeys: this.expandedKeys || {},\n      d_first: this.first,\n      d_rows: this.rows,\n      d_sortField: this.sortField,\n      d_sortOrder: this.sortOrder,\n      d_multiSortMeta: this.multiSortMeta ? _toConsumableArray(this.multiSortMeta) : [],\n      hasASelectedNode: false,\n      d_columns: new HelperSet({\n        type: 'Column'\n      })\n    };\n  },\n  documentColumnResizeListener: null,\n  documentColumnResizeEndListener: null,\n  lastResizeHelperX: null,\n  resizeColumnElement: null,\n  watch: {\n    expandedKeys: function expandedKeys(newValue) {\n      this.d_expandedKeys = newValue;\n    },\n    first: function first(newValue) {\n      this.d_first = newValue;\n    },\n    rows: function rows(newValue) {\n      this.d_rows = newValue;\n    },\n    sortField: function sortField(newValue) {\n      this.d_sortField = newValue;\n    },\n    sortOrder: function sortOrder(newValue) {\n      this.d_sortOrder = newValue;\n    },\n    multiSortMeta: function multiSortMeta(newValue) {\n      this.d_multiSortMeta = newValue;\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.destroyStyleElement();\n    this.d_columns.clear();\n  },\n  methods: {\n    columnProp: function columnProp(col, prop) {\n      return getVNodeProp(col, prop);\n    },\n    ptHeaderCellOptions: function ptHeaderCellOptions(column) {\n      return {\n        context: {\n          frozen: this.columnProp(column, 'frozen')\n        }\n      };\n    },\n    onNodeToggle: function onNodeToggle(node) {\n      var key = this.nodeKey(node);\n      if (this.d_expandedKeys[key]) {\n        delete this.d_expandedKeys[key];\n        this.$emit('node-collapse', node);\n      } else {\n        this.d_expandedKeys[key] = true;\n        this.$emit('node-expand', node);\n      }\n      this.d_expandedKeys = _objectSpread$1({}, this.d_expandedKeys);\n      this.$emit('update:expandedKeys', this.d_expandedKeys);\n    },\n    onNodeClick: function onNodeClick(event) {\n      if (this.rowSelectionMode && event.node.selectable !== false) {\n        var metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n        var _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n        this.$emit('update:selectionKeys', _selectionKeys);\n      }\n    },\n    nodeKey: function nodeKey(node) {\n      return resolveFieldData(node, this.dataKey);\n    },\n    handleSelectionWithMetaKey: function handleSelectionWithMetaKey(event) {\n      var originalEvent = event.originalEvent;\n      var node = event.node;\n      var nodeKey = this.nodeKey(node);\n      var metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      var selected = this.isNodeSelected(node);\n      var _selectionKeys;\n      if (selected && metaKey) {\n        if (this.isSingleSelectionMode()) {\n          _selectionKeys = {};\n        } else {\n          _selectionKeys = _objectSpread$1({}, this.selectionKeys);\n          delete _selectionKeys[nodeKey];\n        }\n        this.$emit('node-unselect', node);\n      } else {\n        if (this.isSingleSelectionMode()) {\n          _selectionKeys = {};\n        } else if (this.isMultipleSelectionMode()) {\n          _selectionKeys = !metaKey ? {} : this.selectionKeys ? _objectSpread$1({}, this.selectionKeys) : {};\n        }\n        _selectionKeys[nodeKey] = true;\n        this.$emit('node-select', node);\n      }\n      return _selectionKeys;\n    },\n    handleSelectionWithoutMetaKey: function handleSelectionWithoutMetaKey(event) {\n      var node = event.node;\n      var nodeKey = this.nodeKey(node);\n      var selected = this.isNodeSelected(node);\n      var _selectionKeys;\n      if (this.isSingleSelectionMode()) {\n        if (selected) {\n          _selectionKeys = {};\n          this.$emit('node-unselect', node);\n        } else {\n          _selectionKeys = {};\n          _selectionKeys[nodeKey] = true;\n          this.$emit('node-select', node);\n        }\n      } else {\n        if (selected) {\n          _selectionKeys = _objectSpread$1({}, this.selectionKeys);\n          delete _selectionKeys[nodeKey];\n          this.$emit('node-unselect', node);\n        } else {\n          _selectionKeys = this.selectionKeys ? _objectSpread$1({}, this.selectionKeys) : {};\n          _selectionKeys[nodeKey] = true;\n          this.$emit('node-select', node);\n        }\n      }\n      return _selectionKeys;\n    },\n    onCheckboxChange: function onCheckboxChange(event) {\n      this.$emit('update:selectionKeys', event.selectionKeys);\n      if (event.check) this.$emit('node-select', event.node);else this.$emit('node-unselect', event.node);\n    },\n    onRowRightClick: function onRowRightClick(event) {\n      if (this.contextMenu) {\n        clearSelection();\n        event.originalEvent.target.focus();\n      }\n      this.$emit('update:contextMenuSelection', event.node);\n      this.$emit('row-contextmenu', event);\n    },\n    isSingleSelectionMode: function isSingleSelectionMode() {\n      return this.selectionMode === 'single';\n    },\n    isMultipleSelectionMode: function isMultipleSelectionMode() {\n      return this.selectionMode === 'multiple';\n    },\n    onPage: function onPage(event) {\n      this.d_first = event.first;\n      this.d_rows = event.rows;\n      var pageEvent = this.createLazyLoadEvent(event);\n      pageEvent.pageCount = event.pageCount;\n      pageEvent.page = event.page;\n      this.d_expandedKeys = {};\n      this.$emit('update:expandedKeys', this.d_expandedKeys);\n      this.$emit('update:first', this.d_first);\n      this.$emit('update:rows', this.d_rows);\n      this.$emit('page', pageEvent);\n    },\n    resetPage: function resetPage() {\n      this.d_first = 0;\n      this.$emit('update:first', this.d_first);\n    },\n    getFilterColumnHeaderClass: function getFilterColumnHeaderClass(column) {\n      return [this.cx('headerCell', {\n        column: column\n      }), this.columnProp(column, 'filterHeaderClass')];\n    },\n    onColumnHeaderClick: function onColumnHeaderClick(e) {\n      var event = e.originalEvent;\n      var column = e.column;\n      if (this.columnProp(column, 'sortable')) {\n        var targetNode = event.target;\n        var columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n        if (getAttribute(targetNode, 'data-p-sortable-column') === true || getAttribute(targetNode, 'data-pc-section') === 'columntitle' || getAttribute(targetNode, 'data-pc-section') === 'columnheadercontent' || getAttribute(targetNode, 'data-pc-section') === 'sorticon' || getAttribute(targetNode.parentElement, 'data-pc-section') === 'sorticon' || getAttribute(targetNode.parentElement.parentElement, 'data-pc-section') === 'sorticon' || targetNode.closest('[data-p-sortable-column=\"true\"]')) {\n          clearSelection();\n          if (this.sortMode === 'single') {\n            if (this.d_sortField === columnField) {\n              if (this.removableSort && this.d_sortOrder * -1 === this.defaultSortOrder) {\n                this.d_sortOrder = null;\n                this.d_sortField = null;\n              } else {\n                this.d_sortOrder = this.d_sortOrder * -1;\n              }\n            } else {\n              this.d_sortOrder = this.defaultSortOrder;\n              this.d_sortField = columnField;\n            }\n            this.$emit('update:sortField', this.d_sortField);\n            this.$emit('update:sortOrder', this.d_sortOrder);\n            this.resetPage();\n          } else if (this.sortMode === 'multiple') {\n            var metaKey = event.metaKey || event.ctrlKey;\n            if (!metaKey) {\n              this.d_multiSortMeta = this.d_multiSortMeta.filter(function (meta) {\n                return meta.field === columnField;\n              });\n            }\n            this.addMultiSortField(columnField);\n            this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n          }\n          this.$emit('sort', this.createLazyLoadEvent(event));\n        }\n      }\n    },\n    addMultiSortField: function addMultiSortField(field) {\n      var index = this.d_multiSortMeta.findIndex(function (meta) {\n        return meta.field === field;\n      });\n      if (index >= 0) {\n        if (this.removableSort && this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder) this.d_multiSortMeta.splice(index, 1);else this.d_multiSortMeta[index] = {\n          field: field,\n          order: this.d_multiSortMeta[index].order * -1\n        };\n      } else {\n        this.d_multiSortMeta.push({\n          field: field,\n          order: this.defaultSortOrder\n        });\n      }\n      this.d_multiSortMeta = _toConsumableArray(this.d_multiSortMeta);\n    },\n    sortSingle: function sortSingle(nodes) {\n      return this.sortNodesSingle(nodes);\n    },\n    sortNodesSingle: function sortNodesSingle(nodes) {\n      var _this = this;\n      var _nodes = _toConsumableArray(nodes);\n      var comparer = localeComparator();\n      _nodes.sort(function (node1, node2) {\n        var value1 = resolveFieldData(node1.data, _this.d_sortField);\n        var value2 = resolveFieldData(node2.data, _this.d_sortField);\n        return sort(value1, value2, _this.d_sortOrder, comparer);\n      });\n      return _nodes;\n    },\n    sortMultiple: function sortMultiple(nodes) {\n      return this.sortNodesMultiple(nodes);\n    },\n    sortNodesMultiple: function sortNodesMultiple(nodes) {\n      var _this2 = this;\n      var _nodes = _toConsumableArray(nodes);\n      _nodes.sort(function (node1, node2) {\n        return _this2.multisortField(node1, node2, 0);\n      });\n      return _nodes;\n    },\n    multisortField: function multisortField(node1, node2, index) {\n      var value1 = resolveFieldData(node1.data, this.d_multiSortMeta[index].field);\n      var value2 = resolveFieldData(node2.data, this.d_multiSortMeta[index].field);\n      var comparer = localeComparator();\n      if (value1 === value2) {\n        return this.d_multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, index + 1) : 0;\n      }\n      return sort(value1, value2, this.d_multiSortMeta[index].order, comparer);\n    },\n    filter: function filter(value) {\n      var filteredNodes = [];\n      var strict = this.filterMode === 'strict';\n      var _iterator = _createForOfIteratorHelper(value),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n          var copyNode = _objectSpread$1({}, node);\n          var localMatch = true;\n          var globalMatch = false;\n          for (var j = 0; j < this.columns.length; j++) {\n            var col = this.columns[j];\n            var filterField = this.columnProp(col, 'filterField') || this.columnProp(col, 'field');\n\n            //local\n            if (Object.prototype.hasOwnProperty.call(this.filters, filterField)) {\n              var filterMatchMode = this.columnProp(col, 'filterMatchMode') || 'startsWith';\n              var filterValue = this.filters[filterField];\n              var filterConstraint = FilterService.filters[filterMatchMode];\n              var paramsWithoutNode = {\n                filterField: filterField,\n                filterValue: filterValue,\n                filterConstraint: filterConstraint,\n                strict: strict\n              };\n              if (strict && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !strict && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n                localMatch = false;\n              }\n              if (!localMatch) {\n                break;\n              }\n            }\n\n            //global\n            if (this.hasGlobalFilter() && !globalMatch) {\n              var copyNodeForGlobal = _objectSpread$1({}, copyNode);\n              var _filterValue = this.filters['global'];\n              var _filterConstraint = FilterService.filters['contains'];\n              var globalFilterParamsWithoutNode = {\n                filterField: filterField,\n                filterValue: _filterValue,\n                filterConstraint: _filterConstraint,\n                strict: strict\n              };\n              if (strict && (this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode)) || !strict && (this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode))) {\n                globalMatch = true;\n                copyNode = copyNodeForGlobal;\n              }\n            }\n          }\n          var matches = localMatch;\n          if (this.hasGlobalFilter()) {\n            matches = localMatch && globalMatch;\n          }\n          if (matches) {\n            filteredNodes.push(copyNode);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var filterEvent = this.createLazyLoadEvent(event);\n      filterEvent.filteredValue = filteredNodes;\n      this.$emit('filter', filterEvent);\n      return filteredNodes;\n    },\n    findFilteredNodes: function findFilteredNodes(node, paramsWithoutNode) {\n      if (node) {\n        var matched = false;\n        if (node.children) {\n          var childNodes = _toConsumableArray(node.children);\n          node.children = [];\n          var _iterator2 = _createForOfIteratorHelper(childNodes),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var childNode = _step2.value;\n              var copyChildNode = _objectSpread$1({}, childNode);\n              if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                matched = true;\n                node.children.push(copyChildNode);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n        if (matched) {\n          return true;\n        }\n      }\n    },\n    isFilterMatched: function isFilterMatched(node, _ref) {\n      var filterField = _ref.filterField,\n        filterValue = _ref.filterValue,\n        filterConstraint = _ref.filterConstraint,\n        strict = _ref.strict;\n      var matched = false;\n      var dataFieldValue = resolveFieldData(node.data, filterField);\n      if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n        matched = true;\n      }\n      if (!matched || strict && !this.isNodeLeaf(node)) {\n        matched = this.findFilteredNodes(node, {\n          filterField: filterField,\n          filterValue: filterValue,\n          filterConstraint: filterConstraint,\n          strict: strict\n        }) || matched;\n      }\n      return matched;\n    },\n    isNodeSelected: function isNodeSelected(node) {\n      return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)] === true : false;\n    },\n    isNodeLeaf: function isNodeLeaf(node) {\n      return node.leaf === false ? false : !(node.children && node.children.length);\n    },\n    createLazyLoadEvent: function createLazyLoadEvent(event) {\n      var _this3 = this;\n      var filterMatchModes;\n      if (this.hasFilters()) {\n        filterMatchModes = {};\n        this.columns.forEach(function (col) {\n          if (_this3.columnProp(col, 'field')) {\n            filterMatchModes[col.props.field] = _this3.columnProp(col, 'filterMatchMode');\n          }\n        });\n      }\n      return {\n        originalEvent: event,\n        first: this.d_first,\n        rows: this.d_rows,\n        sortField: this.d_sortField,\n        sortOrder: this.d_sortOrder,\n        multiSortMeta: this.d_multiSortMeta,\n        filters: this.filters,\n        filterMatchModes: filterMatchModes\n      };\n    },\n    onColumnResizeStart: function onColumnResizeStart(event) {\n      var containerLeft = getOffset(this.$el).left;\n      this.resizeColumnElement = event.target.parentElement;\n      this.columnResizing = true;\n      this.lastResizeHelperX = event.pageX - containerLeft + this.$el.scrollLeft;\n      this.bindColumnResizeEvents();\n    },\n    onColumnResize: function onColumnResize(event) {\n      var containerLeft = getOffset(this.$el).left;\n      this.$el.setAttribute('data-p-unselectable-text', 'true');\n      !this.isUnstyled && addStyle(this.$el, {\n        'user-select': 'none'\n      });\n      this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n      this.$refs.resizeHelper.style.top = 0 + 'px';\n      this.$refs.resizeHelper.style.left = event.pageX - containerLeft + this.$el.scrollLeft + 'px';\n      this.$refs.resizeHelper.style.display = 'block';\n    },\n    onColumnResizeEnd: function onColumnResizeEnd() {\n      var delta = isRTL(this.$el) ? this.lastResizeHelperX - this.$refs.resizeHelper.offsetLeft : this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n      var columnWidth = this.resizeColumnElement.offsetWidth;\n      var newColumnWidth = columnWidth + delta;\n      var minWidth = this.resizeColumnElement.style.minWidth || 15;\n      if (columnWidth + delta > parseInt(minWidth, 10)) {\n        if (this.columnResizeMode === 'fit') {\n          var nextColumn = this.resizeColumnElement.nextElementSibling;\n          var nextColumnWidth = nextColumn.offsetWidth - delta;\n          if (newColumnWidth > 15 && nextColumnWidth > 15) {\n            this.resizeTableCells(newColumnWidth, nextColumnWidth);\n          }\n        } else if (this.columnResizeMode === 'expand') {\n          var tableWidth = this.$refs.table.offsetWidth + delta + 'px';\n          var updateTableWidth = function updateTableWidth(el) {\n            !!el && (el.style.width = el.style.minWidth = tableWidth);\n          };\n\n          // Reasoning: resize table cells before updating the table width so that it can use existing computed cell widths and adjust only the one column.\n          this.resizeTableCells(newColumnWidth);\n          updateTableWidth(this.$refs.table);\n        }\n        this.$emit('column-resize-end', {\n          element: this.resizeColumnElement,\n          delta: delta\n        });\n      }\n      this.$refs.resizeHelper.style.display = 'none';\n      this.resizeColumn = null;\n      this.$el.removeAttribute('data-p-unselectable-text');\n      !this.isUnstyled && (this.$el.style['user-select'] = '');\n      this.unbindColumnResizeEvents();\n    },\n    resizeTableCells: function resizeTableCells(newColumnWidth, nextColumnWidth) {\n      var colIndex = getIndex(this.resizeColumnElement);\n      var widths = [];\n      var headers = find(this.$refs.table, 'thead[data-pc-section=\"thead\"] > tr > th');\n      headers.forEach(function (header) {\n        return widths.push(getOuterWidth(header));\n      });\n      this.destroyStyleElement();\n      this.createStyleElement();\n      var innerHTML = '';\n      var selector = \"[data-pc-name=\\\"treetable\\\"][\".concat(this.$attrSelector, \"] > [data-pc-section=\\\"tablecontainer\\\"] > table[data-pc-section=\\\"table\\\"]\");\n      widths.forEach(function (width, index) {\n        var colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width;\n        var style = \"width: \".concat(colWidth, \"px !important; max-width: \").concat(colWidth, \"px !important\");\n        innerHTML += \"\\n                    \".concat(selector, \" > thead[data-pc-section=\\\"thead\\\"] > tr > th:nth-child(\").concat(index + 1, \"),\\n                    \").concat(selector, \" > tbody[data-pc-section=\\\"tbody\\\"] > tr > td:nth-child(\").concat(index + 1, \"),\\n                    \").concat(selector, \" > tfoot[data-pc-section=\\\"tfoot\\\"] > tr > td:nth-child(\").concat(index + 1, \") {\\n                        \").concat(style, \"\\n                    }\\n                \");\n      });\n      this.styleElement.innerHTML = innerHTML;\n    },\n    bindColumnResizeEvents: function bindColumnResizeEvents() {\n      var _this4 = this;\n      if (!this.documentColumnResizeListener) {\n        this.documentColumnResizeListener = document.addEventListener('mousemove', function (event) {\n          if (_this4.columnResizing) {\n            _this4.onColumnResize(event);\n          }\n        });\n      }\n      if (!this.documentColumnResizeEndListener) {\n        this.documentColumnResizeEndListener = document.addEventListener('mouseup', function () {\n          if (_this4.columnResizing) {\n            _this4.columnResizing = false;\n            _this4.onColumnResizeEnd();\n          }\n        });\n      }\n    },\n    unbindColumnResizeEvents: function unbindColumnResizeEvents() {\n      if (this.documentColumnResizeListener) {\n        document.removeEventListener('document', this.documentColumnResizeListener);\n        this.documentColumnResizeListener = null;\n      }\n      if (this.documentColumnResizeEndListener) {\n        document.removeEventListener('document', this.documentColumnResizeEndListener);\n        this.documentColumnResizeEndListener = null;\n      }\n    },\n    onColumnKeyDown: function onColumnKeyDown(event, col) {\n      if ((event.code === 'Enter' || event.code === 'NumpadEnter') && event.currentTarget.nodeName === 'TH' && getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n        this.onColumnHeaderClick(event, col);\n      }\n    },\n    hasColumnFilter: function hasColumnFilter() {\n      if (this.columns) {\n        var _iterator3 = _createForOfIteratorHelper(this.columns),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var col = _step3.value;\n            if (col.children && col.children.filter) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      return false;\n    },\n    hasFilters: function hasFilters() {\n      return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n    },\n    hasGlobalFilter: function hasGlobalFilter() {\n      return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n    },\n    getItemLabel: function getItemLabel(node) {\n      return node.data.name;\n    },\n    createStyleElement: function createStyleElement() {\n      var _this$$primevue;\n      this.styleElement = document.createElement('style');\n      this.styleElement.type = 'text/css';\n      setAttribute(this.styleElement, 'nonce', (_this$$primevue = this.$primevue) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.config) === null || _this$$primevue === void 0 || (_this$$primevue = _this$$primevue.csp) === null || _this$$primevue === void 0 ? void 0 : _this$$primevue.nonce);\n      document.head.appendChild(this.styleElement);\n    },\n    destroyStyleElement: function destroyStyleElement() {\n      if (this.styleElement) {\n        document.head.removeChild(this.styleElement);\n        this.styleElement = null;\n      }\n    },\n    setTabindex: function setTabindex(node, index) {\n      if (this.isNodeSelected(node)) {\n        this.hasASelectedNode = true;\n        return 0;\n      }\n      if (this.selectionMode) {\n        if (!this.isNodeSelected(node) && index === 0 && !this.hasASelectedNode) return 0;\n      } else if (!this.selectionMode && index === 0) {\n        return 0;\n      }\n      return -1;\n    }\n  },\n  computed: {\n    columns: function columns() {\n      return this.d_columns.get(this);\n    },\n    processedData: function processedData() {\n      if (this.lazy) {\n        return this.value;\n      } else {\n        if (this.value && this.value.length) {\n          var data = this.value;\n          if (this.sorted) {\n            if (this.sortMode === 'single') data = this.sortSingle(data);else if (this.sortMode === 'multiple') data = this.sortMultiple(data);\n          }\n          if (this.hasFilters()) {\n            data = this.filter(data);\n          }\n          return data;\n        } else {\n          return null;\n        }\n      }\n    },\n    dataToRender: function dataToRender() {\n      var data = this.processedData;\n      if (this.paginator) {\n        var first = this.lazy ? 0 : this.d_first;\n        return data.slice(first, first + this.d_rows);\n      } else {\n        return data;\n      }\n    },\n    empty: function empty() {\n      var data = this.processedData;\n      return !data || data.length === 0;\n    },\n    sorted: function sorted() {\n      return this.d_sortField || this.d_multiSortMeta && this.d_multiSortMeta.length > 0;\n    },\n    hasFooter: function hasFooter() {\n      var hasFooter = false;\n      var _iterator4 = _createForOfIteratorHelper(this.columns),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var col = _step4.value;\n          if (this.columnProp(col, 'footer') || col.children && col.children.footer) {\n            hasFooter = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return hasFooter;\n    },\n    paginatorTop: function paginatorTop() {\n      return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n    },\n    paginatorBottom: function paginatorBottom() {\n      return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n    },\n    singleSelectionMode: function singleSelectionMode() {\n      return this.selectionMode && this.selectionMode === 'single';\n    },\n    multipleSelectionMode: function multipleSelectionMode() {\n      return this.selectionMode && this.selectionMode === 'multiple';\n    },\n    rowSelectionMode: function rowSelectionMode() {\n      return this.singleSelectionMode || this.multipleSelectionMode;\n    },\n    totalRecordsLength: function totalRecordsLength() {\n      if (this.lazy) {\n        return this.totalRecords;\n      } else {\n        var data = this.processedData;\n        return data ? data.length : 0;\n      }\n    }\n  },\n  components: {\n    TTRow: script$1,\n    TTPaginator: Paginator,\n    TTHeaderCell: script$3,\n    TTFooterCell: script$4,\n    SpinnerIcon: SpinnerIcon\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"colspan\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_TTPaginator = resolveComponent(\"TTPaginator\");\n  var _component_TTHeaderCell = resolveComponent(\"TTHeaderCell\");\n  var _component_TTRow = resolveComponent(\"TTRow\");\n  var _component_TTFooterCell = resolveComponent(\"TTFooterCell\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    \"data-scrollselectors\": \".p-treetable-scrollable-body\"\n  }, _ctx.ptmi('root')), [renderSlot(_ctx.$slots, \"default\"), _ctx.loading && _ctx.loadingMode === 'mask' ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('loading')\n  }, _ctx.ptm('loading')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('mask')\n  }, _ctx.ptm('mask')), [renderSlot(_ctx.$slots, \"loadingicon\", {\n    \"class\": normalizeClass(_ctx.cx('loadingIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon ? 'span' : 'SpinnerIcon'), mergeProps({\n      spin: \"\",\n      \"class\": [_ctx.cx('loadingIcon'), _ctx.loadingIcon]\n    }, _ctx.ptm('loadingIcon')), null, 16, [\"class\"]))];\n  })], 16)], 16)) : createCommentVNode(\"\", true), _ctx.$slots.header ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('header')\n  }, _ctx.ptm('header')), [renderSlot(_ctx.$slots, \"header\")], 16)) : createCommentVNode(\"\", true), $options.paginatorTop ? (openBlock(), createBlock(_component_TTPaginator, {\n    key: 2,\n    rows: $data.d_rows,\n    first: $data.d_first,\n    totalRecords: $options.totalRecordsLength,\n    pageLinkSize: _ctx.pageLinkSize,\n    template: _ctx.paginatorTemplate,\n    rowsPerPageOptions: _ctx.rowsPerPageOptions,\n    currentPageReportTemplate: _ctx.currentPageReportTemplate,\n    \"class\": normalizeClass(_ctx.cx('pcPaginator', {\n      position: 'top'\n    })),\n    onPage: _cache[0] || (_cache[0] = function ($event) {\n      return $options.onPage($event);\n    }),\n    alwaysShow: _ctx.alwaysShowPaginator,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.ptm('pcPaginator')\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.paginatorcontainer ? {\n    name: \"container\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorcontainer\", {\n        first: slotProps.first,\n        last: slotProps.last,\n        rows: slotProps.rows,\n        page: slotProps.page,\n        pageCount: slotProps.pageCount,\n        totalRecords: slotProps.totalRecords,\n        firstPageCallback: slotProps.firstPageCallback,\n        lastPageCallback: slotProps.lastPageCallback,\n        prevPageCallback: slotProps.prevPageCallback,\n        nextPageCallback: slotProps.nextPageCallback,\n        rowChangeCallback: slotProps.rowChangeCallback\n      })];\n    }),\n    key: \"0\"\n  } : undefined, _ctx.$slots.paginatorstart ? {\n    name: \"start\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorstart\")];\n    }),\n    key: \"1\"\n  } : undefined, _ctx.$slots.paginatorend ? {\n    name: \"end\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorend\")];\n    }),\n    key: \"2\"\n  } : undefined, _ctx.$slots.paginatorfirstpagelinkicon ? {\n    name: \"firstpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorfirstpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"3\"\n  } : undefined, _ctx.$slots.paginatorprevpagelinkicon ? {\n    name: \"prevpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorprevpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"4\"\n  } : undefined, _ctx.$slots.paginatornextpagelinkicon ? {\n    name: \"nextpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatornextpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"5\"\n  } : undefined, _ctx.$slots.paginatorlastpagelinkicon ? {\n    name: \"lastpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorlastpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"6\"\n  } : undefined, _ctx.$slots.paginatorjumptopagedropdownicon ? {\n    name: \"jumptopagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorjumptopagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"7\"\n  } : undefined, _ctx.$slots.paginatorrowsperpagedropdownicon ? {\n    name: \"rowsperpagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorrowsperpagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"8\"\n  } : undefined]), 1032, [\"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"template\", \"rowsPerPageOptions\", \"currentPageReportTemplate\", \"class\", \"alwaysShow\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('tableContainer'),\n    style: [_ctx.sx('tableContainer'), {\n      maxHeight: _ctx.scrollHeight\n    }]\n  }, _ctx.ptm('tableContainer')), [createElementVNode(\"table\", mergeProps({\n    ref: \"table\",\n    role: \"table\",\n    \"class\": [_ctx.cx('table'), _ctx.tableClass],\n    style: _ctx.tableStyle\n  }, _objectSpread(_objectSpread({}, _ctx.tableProps), _ctx.ptm('table'))), [createElementVNode(\"thead\", mergeProps({\n    \"class\": _ctx.cx('thead'),\n    style: _ctx.sx('thead'),\n    role: \"rowgroup\"\n  }, _ctx.ptm('thead')), [createElementVNode(\"tr\", mergeProps({\n    role: \"row\"\n  }, _ctx.ptm('headerRow')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createBlock(_component_TTHeaderCell, {\n      key: 0,\n      column: col,\n      resizableColumns: _ctx.resizableColumns,\n      sortField: $data.d_sortField,\n      sortOrder: $data.d_sortOrder,\n      multiSortMeta: $data.d_multiSortMeta,\n      sortMode: _ctx.sortMode,\n      onColumnClick: _cache[1] || (_cache[1] = function ($event) {\n        return $options.onColumnHeaderClick($event);\n      }),\n      onColumnResizestart: _cache[2] || (_cache[2] = function ($event) {\n        return $options.onColumnResizeStart($event);\n      }),\n      index: i,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"column\", \"resizableColumns\", \"sortField\", \"sortOrder\", \"multiSortMeta\", \"sortMode\", \"index\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16), $options.hasColumnFilter() ? (openBlock(), createElementBlock(\"tr\", normalizeProps(mergeProps({\n    key: 0\n  }, _ctx.ptm('headerRow'))), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createElementBlock(\"th\", mergeProps({\n      key: 0,\n      \"class\": $options.getFilterColumnHeaderClass(col),\n      style: [$options.columnProp(col, 'style'), $options.columnProp(col, 'filterHeaderStyle')],\n      ref_for: true\n    }, _ctx.ptm('headerCell', $options.ptHeaderCellOptions(col))), [col.children && col.children.filter ? (openBlock(), createBlock(resolveDynamicComponent(col.children.filter), {\n      key: 0,\n      column: col,\n      index: i\n    }, null, 8, [\"column\", \"index\"])) : createCommentVNode(\"\", true)], 16)) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16)) : createCommentVNode(\"\", true)], 16), createElementVNode(\"tbody\", mergeProps({\n    \"class\": _ctx.cx('tbody'),\n    role: \"rowgroup\"\n  }, _ctx.ptm('tbody')), [!$options.empty ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList($options.dataToRender, function (node, index) {\n    return openBlock(), createBlock(_component_TTRow, {\n      key: $options.nodeKey(node),\n      dataKey: _ctx.dataKey,\n      columns: $options.columns,\n      node: node,\n      level: 0,\n      expandedKeys: $data.d_expandedKeys,\n      indentation: _ctx.indentation,\n      selectionMode: _ctx.selectionMode,\n      selectionKeys: _ctx.selectionKeys,\n      ariaSetSize: $options.dataToRender.length,\n      ariaPosInset: index + 1,\n      tabindex: $options.setTabindex(node, index),\n      loadingMode: _ctx.loadingMode,\n      contextMenu: _ctx.contextMenu,\n      contextMenuSelection: _ctx.contextMenuSelection,\n      templates: _ctx.$slots,\n      onNodeToggle: $options.onNodeToggle,\n      onNodeClick: $options.onNodeClick,\n      onCheckboxChange: $options.onCheckboxChange,\n      onRowRightclick: _cache[3] || (_cache[3] = function ($event) {\n        return $options.onRowRightClick($event);\n      }),\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"dataKey\", \"columns\", \"node\", \"expandedKeys\", \"indentation\", \"selectionMode\", \"selectionKeys\", \"ariaSetSize\", \"ariaPosInset\", \"tabindex\", \"loadingMode\", \"contextMenu\", \"contextMenuSelection\", \"templates\", \"onNodeToggle\", \"onNodeClick\", \"onCheckboxChange\", \"unstyled\", \"pt\"]);\n  }), 128)) : (openBlock(), createElementBlock(\"tr\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('emptyMessage')\n  }, _ctx.ptm('emptyMessage')), [createElementVNode(\"td\", mergeProps({\n    colspan: $options.columns.length\n  }, _ctx.ptm('emptyMessageCell')), [renderSlot(_ctx.$slots, \"empty\")], 16, _hoisted_1)], 16))], 16), $options.hasFooter ? (openBlock(), createElementBlock(\"tfoot\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('tfoot'),\n    style: _ctx.sx('tfoot'),\n    role: \"rowgroup\"\n  }, _ctx.ptm('tfoot')), [createElementVNode(\"tr\", mergeProps({\n    role: \"row\"\n  }, _ctx.ptm('footerRow')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.columns, function (col, i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.columnProp(col, 'columnKey') || $options.columnProp(col, 'field') || i\n    }, [!$options.columnProp(col, 'hidden') ? (openBlock(), createBlock(_component_TTFooterCell, {\n      key: 0,\n      column: col,\n      index: i,\n      unstyled: _ctx.unstyled,\n      pt: _ctx.pt\n    }, null, 8, [\"column\", \"index\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16)], 16)) : createCommentVNode(\"\", true)], 16)], 16), $options.paginatorBottom ? (openBlock(), createBlock(_component_TTPaginator, {\n    key: 3,\n    rows: $data.d_rows,\n    first: $data.d_first,\n    totalRecords: $options.totalRecordsLength,\n    pageLinkSize: _ctx.pageLinkSize,\n    template: _ctx.paginatorTemplate,\n    rowsPerPageOptions: _ctx.rowsPerPageOptions,\n    currentPageReportTemplate: _ctx.currentPageReportTemplate,\n    \"class\": normalizeClass(_ctx.cx('pcPaginator', {\n      position: 'bottom'\n    })),\n    onPage: _cache[4] || (_cache[4] = function ($event) {\n      return $options.onPage($event);\n    }),\n    alwaysShow: _ctx.alwaysShowPaginator,\n    unstyled: _ctx.unstyled,\n    pt: _ctx.ptm('pcPaginator')\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.paginatorcontainer ? {\n    name: \"container\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorcontainer\", {\n        first: slotProps.first,\n        last: slotProps.last,\n        rows: slotProps.rows,\n        page: slotProps.page,\n        pageCount: slotProps.pageCount,\n        totalRecords: slotProps.totalRecords,\n        firstPageCallback: slotProps.firstPageCallback,\n        lastPageCallback: slotProps.lastPageCallback,\n        prevPageCallback: slotProps.prevPageCallback,\n        nextPageCallback: slotProps.nextPageCallback,\n        rowChangeCallback: slotProps.rowChangeCallback\n      })];\n    }),\n    key: \"0\"\n  } : undefined, _ctx.$slots.paginatorstart ? {\n    name: \"start\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorstart\")];\n    }),\n    key: \"1\"\n  } : undefined, _ctx.$slots.paginatorend ? {\n    name: \"end\",\n    fn: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"paginatorend\")];\n    }),\n    key: \"2\"\n  } : undefined, _ctx.$slots.paginatorfirstpagelinkicon ? {\n    name: \"firstpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorfirstpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"3\"\n  } : undefined, _ctx.$slots.paginatorprevpagelinkicon ? {\n    name: \"prevpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorprevpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"4\"\n  } : undefined, _ctx.$slots.paginatornextpagelinkicon ? {\n    name: \"nextpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatornextpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"5\"\n  } : undefined, _ctx.$slots.paginatorlastpagelinkicon ? {\n    name: \"lastpagelinkicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorlastpagelinkicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"6\"\n  } : undefined, _ctx.$slots.paginatorjumptopagedropdownicon ? {\n    name: \"jumptopagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorjumptopagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"7\"\n  } : undefined, _ctx.$slots.paginatorrowsperpagedropdownicon ? {\n    name: \"rowsperpagedropdownicon\",\n    fn: withCtx(function (slotProps) {\n      return [renderSlot(_ctx.$slots, \"paginatorrowsperpagedropdownicon\", {\n        \"class\": normalizeClass(slotProps[\"class\"])\n      })];\n    }),\n    key: \"8\"\n  } : undefined]), 1032, [\"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"template\", \"rowsPerPageOptions\", \"currentPageReportTemplate\", \"class\", \"alwaysShow\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 4,\n    \"class\": _ctx.cx('footer')\n  }, _ctx.ptm('footer')), [renderSlot(_ctx.$slots, \"footer\")], 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    ref: \"resizeHelper\",\n    \"class\": _ctx.cx('columnResizeIndicator'),\n    style: {\n      \"display\": \"none\"\n    }\n  }, _ctx.ptm('columnResizeIndicator')), null, 16)], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAS,gBAAA,qBAA0B,MAAA,OAAA,cAA8B,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","x_google_ignoreList":[0]}