{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/menubar/index.mjs?nuxt_component=async&nuxt_component_name=Menubar&nuxt_component_export=default"],"sourcesContent":["import { findSingle, isTouchDevice, focus } from '@primeuix/utils/dom';\nimport { isNotEmpty, resolve, findLastIndex, isEmpty, isPrintableCharacter } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport BarsIcon from '@primevue/icons/bars';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport MenubarStyle from 'primevue/menubar/style';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleRightIcon from '@primevue/icons/angleright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps, resolveComponent, resolveDirective, createElementBlock, openBlock, Fragment, renderList, createCommentVNode, createElementVNode, createBlock, withDirectives, resolveDynamicComponent, normalizeClass, toDisplayString, normalizeStyle, renderSlot, createVNode, normalizeProps, guardReactiveProps } from 'vue';\n\nvar script$2 = {\n  name: 'BaseMenubar',\n  \"extends\": BaseComponent,\n  props: {\n    model: {\n      type: Array,\n      \"default\": null\n    },\n    buttonProps: {\n      type: null,\n      \"default\": null\n    },\n    breakpoint: {\n      type: String,\n      \"default\": '960px'\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: MenubarStyle,\n  provide: function provide() {\n    return {\n      $pcMenubar: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script$1 = {\n  name: 'MenubarSub',\n  hostName: 'Menubar',\n  \"extends\": BaseComponent,\n  emits: ['item-mouseenter', 'item-click', 'item-mousemove'],\n  props: {\n    items: {\n      type: Array,\n      \"default\": null\n    },\n    root: {\n      type: Boolean,\n      \"default\": false\n    },\n    popup: {\n      type: Boolean,\n      \"default\": false\n    },\n    mobileActive: {\n      type: Boolean,\n      \"default\": false\n    },\n    templates: {\n      type: Object,\n      \"default\": null\n    },\n    level: {\n      type: Number,\n      \"default\": 0\n    },\n    menuId: {\n      type: String,\n      \"default\": null\n    },\n    focusedItemId: {\n      type: String,\n      \"default\": null\n    },\n    activeItemPath: {\n      type: Object,\n      \"default\": null\n    }\n  },\n  list: null,\n  methods: {\n    getItemId: function getItemId(processedItem) {\n      return \"\".concat(this.menuId, \"_\").concat(processedItem.key);\n    },\n    getItemKey: function getItemKey(processedItem) {\n      return this.getItemId(processedItem);\n    },\n    getItemProp: function getItemProp(processedItem, name, params) {\n      return processedItem && processedItem.item ? resolve(processedItem.item[name], params) : undefined;\n    },\n    getItemLabel: function getItemLabel(processedItem) {\n      return this.getItemProp(processedItem, 'label');\n    },\n    getItemLabelId: function getItemLabelId(processedItem) {\n      return \"\".concat(this.menuId, \"_\").concat(processedItem.key, \"_label\");\n    },\n    getPTOptions: function getPTOptions(processedItem, index, key) {\n      return this.ptm(key, {\n        context: {\n          item: processedItem.item,\n          index: index,\n          active: this.isItemActive(processedItem),\n          focused: this.isItemFocused(processedItem),\n          disabled: this.isItemDisabled(processedItem),\n          level: this.level\n        }\n      });\n    },\n    isItemActive: function isItemActive(processedItem) {\n      return this.activeItemPath.some(function (path) {\n        return path.key === processedItem.key;\n      });\n    },\n    isItemVisible: function isItemVisible(processedItem) {\n      return this.getItemProp(processedItem, 'visible') !== false;\n    },\n    isItemDisabled: function isItemDisabled(processedItem) {\n      return this.getItemProp(processedItem, 'disabled');\n    },\n    isItemFocused: function isItemFocused(processedItem) {\n      return this.focusedItemId === this.getItemId(processedItem);\n    },\n    isItemGroup: function isItemGroup(processedItem) {\n      return isNotEmpty(processedItem.items);\n    },\n    onItemClick: function onItemClick(event, processedItem) {\n      this.getItemProp(processedItem, 'command', {\n        originalEvent: event,\n        item: processedItem.item\n      });\n      this.$emit('item-click', {\n        originalEvent: event,\n        processedItem: processedItem,\n        isFocus: true\n      });\n    },\n    onItemMouseEnter: function onItemMouseEnter(event, processedItem) {\n      this.$emit('item-mouseenter', {\n        originalEvent: event,\n        processedItem: processedItem\n      });\n    },\n    onItemMouseMove: function onItemMouseMove(event, processedItem) {\n      this.$emit('item-mousemove', {\n        originalEvent: event,\n        processedItem: processedItem\n      });\n    },\n    getAriaPosInset: function getAriaPosInset(index) {\n      return index - this.calculateAriaSetSize.slice(0, index).length + 1;\n    },\n    getMenuItemProps: function getMenuItemProps(processedItem, index) {\n      return {\n        action: mergeProps({\n          \"class\": this.cx('itemLink'),\n          tabindex: -1\n        }, this.getPTOptions(processedItem, index, 'itemLink')),\n        icon: mergeProps({\n          \"class\": [this.cx('itemIcon'), this.getItemProp(processedItem, 'icon')]\n        }, this.getPTOptions(processedItem, index, 'itemIcon')),\n        label: mergeProps({\n          \"class\": this.cx('itemLabel')\n        }, this.getPTOptions(processedItem, index, 'itemLabel')),\n        submenuicon: mergeProps({\n          \"class\": this.cx('submenuIcon')\n        }, this.getPTOptions(processedItem, index, 'submenuIcon'))\n      };\n    }\n  },\n  computed: {\n    calculateAriaSetSize: function calculateAriaSetSize() {\n      var _this = this;\n      return this.items.filter(function (processedItem) {\n        return _this.isItemVisible(processedItem) && _this.getItemProp(processedItem, 'separator');\n      });\n    },\n    getAriaSetSize: function getAriaSetSize() {\n      var _this2 = this;\n      return this.items.filter(function (processedItem) {\n        return _this2.isItemVisible(processedItem) && !_this2.getItemProp(processedItem, 'separator');\n      }).length;\n    }\n  },\n  components: {\n    AngleRightIcon: AngleRightIcon,\n    AngleDownIcon: AngleDownIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nvar _hoisted_1$1 = [\"id\", \"aria-label\", \"aria-disabled\", \"aria-expanded\", \"aria-haspopup\", \"aria-level\", \"aria-setsize\", \"aria-posinset\", \"data-p-active\", \"data-p-focused\", \"data-p-disabled\"];\nvar _hoisted_2 = [\"onClick\", \"onMouseenter\", \"onMousemove\"];\nvar _hoisted_3 = [\"href\", \"target\"];\nvar _hoisted_4 = [\"id\"];\nvar _hoisted_5 = [\"id\"];\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_MenubarSub = resolveComponent(\"MenubarSub\", true);\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"ul\", mergeProps({\n    \"class\": $props.level === 0 ? _ctx.cx('rootList') : _ctx.cx('submenu')\n  }, $props.level === 0 ? _ctx.ptm('rootList') : _ctx.ptm('submenu')), [(openBlock(true), createElementBlock(Fragment, null, renderList($props.items, function (processedItem, index) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.getItemKey(processedItem)\n    }, [$options.isItemVisible(processedItem) && !$options.getItemProp(processedItem, 'separator') ? (openBlock(), createElementBlock(\"li\", mergeProps({\n      key: 0,\n      id: $options.getItemId(processedItem),\n      style: $options.getItemProp(processedItem, 'style'),\n      \"class\": [_ctx.cx('item', {\n        processedItem: processedItem\n      }), $options.getItemProp(processedItem, 'class')],\n      role: \"menuitem\",\n      \"aria-label\": $options.getItemLabel(processedItem),\n      \"aria-disabled\": $options.isItemDisabled(processedItem) || undefined,\n      \"aria-expanded\": $options.isItemGroup(processedItem) ? $options.isItemActive(processedItem) : undefined,\n      \"aria-haspopup\": $options.isItemGroup(processedItem) && !$options.getItemProp(processedItem, 'to') ? 'menu' : undefined,\n      \"aria-level\": $props.level + 1,\n      \"aria-setsize\": $options.getAriaSetSize,\n      \"aria-posinset\": $options.getAriaPosInset(index),\n      ref_for: true\n    }, $options.getPTOptions(processedItem, index, 'item'), {\n      \"data-p-active\": $options.isItemActive(processedItem),\n      \"data-p-focused\": $options.isItemFocused(processedItem),\n      \"data-p-disabled\": $options.isItemDisabled(processedItem)\n    }), [createElementVNode(\"div\", mergeProps({\n      \"class\": _ctx.cx('itemContent'),\n      onClick: function onClick($event) {\n        return $options.onItemClick($event, processedItem);\n      },\n      onMouseenter: function onMouseenter($event) {\n        return $options.onItemMouseEnter($event, processedItem);\n      },\n      onMousemove: function onMousemove($event) {\n        return $options.onItemMouseMove($event, processedItem);\n      },\n      ref_for: true\n    }, $options.getPTOptions(processedItem, index, 'itemContent')), [!$props.templates.item ? withDirectives((openBlock(), createElementBlock(\"a\", mergeProps({\n      key: 0,\n      href: $options.getItemProp(processedItem, 'url'),\n      \"class\": _ctx.cx('itemLink'),\n      target: $options.getItemProp(processedItem, 'target'),\n      tabindex: \"-1\",\n      ref_for: true\n    }, $options.getPTOptions(processedItem, index, 'itemLink')), [$props.templates.itemicon ? (openBlock(), createBlock(resolveDynamicComponent($props.templates.itemicon), {\n      key: 0,\n      item: processedItem.item,\n      \"class\": normalizeClass(_ctx.cx('itemIcon'))\n    }, null, 8, [\"item\", \"class\"])) : $options.getItemProp(processedItem, 'icon') ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 1,\n      \"class\": [_ctx.cx('itemIcon'), $options.getItemProp(processedItem, 'icon')],\n      ref_for: true\n    }, $options.getPTOptions(processedItem, index, 'itemIcon')), null, 16)) : createCommentVNode(\"\", true), createElementVNode(\"span\", mergeProps({\n      id: $options.getItemLabelId(processedItem),\n      \"class\": _ctx.cx('itemLabel'),\n      ref_for: true\n    }, $options.getPTOptions(processedItem, index, 'itemLabel')), toDisplayString($options.getItemLabel(processedItem)), 17, _hoisted_4), $options.getItemProp(processedItem, 'items') ? (openBlock(), createElementBlock(Fragment, {\n      key: 2\n    }, [$props.templates.submenuicon ? (openBlock(), createBlock(resolveDynamicComponent($props.templates.submenuicon), {\n      key: 0,\n      root: $props.root,\n      active: $options.isItemActive(processedItem),\n      \"class\": normalizeClass(_ctx.cx('submenuIcon'))\n    }, null, 8, [\"root\", \"active\", \"class\"])) : (openBlock(), createBlock(resolveDynamicComponent($props.root ? 'AngleDownIcon' : 'AngleRightIcon'), mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('submenuIcon'),\n      ref_for: true\n    }, $options.getPTOptions(processedItem, index, 'submenuIcon')), null, 16, [\"class\"]))], 64)) : createCommentVNode(\"\", true)], 16, _hoisted_3)), [[_directive_ripple]]) : (openBlock(), createBlock(resolveDynamicComponent($props.templates.item), {\n      key: 1,\n      item: processedItem.item,\n      root: $props.root,\n      hasSubmenu: $options.getItemProp(processedItem, 'items'),\n      label: $options.getItemLabel(processedItem),\n      props: $options.getMenuItemProps(processedItem, index)\n    }, null, 8, [\"item\", \"root\", \"hasSubmenu\", \"label\", \"props\"]))], 16, _hoisted_2), $options.isItemVisible(processedItem) && $options.isItemGroup(processedItem) ? (openBlock(), createBlock(_component_MenubarSub, {\n      key: 0,\n      id: $options.getItemId(processedItem) + '_list',\n      menuId: $props.menuId,\n      role: \"menu\",\n      style: normalizeStyle(_ctx.sx('submenu', true, {\n        processedItem: processedItem\n      })),\n      focusedItemId: $props.focusedItemId,\n      items: processedItem.items,\n      mobileActive: $props.mobileActive,\n      activeItemPath: $props.activeItemPath,\n      templates: $props.templates,\n      level: $props.level + 1,\n      \"aria-labelledby\": $options.getItemLabelId(processedItem),\n      pt: _ctx.pt,\n      unstyled: _ctx.unstyled,\n      onItemClick: _cache[0] || (_cache[0] = function ($event) {\n        return _ctx.$emit('item-click', $event);\n      }),\n      onItemMouseenter: _cache[1] || (_cache[1] = function ($event) {\n        return _ctx.$emit('item-mouseenter', $event);\n      }),\n      onItemMousemove: _cache[2] || (_cache[2] = function ($event) {\n        return _ctx.$emit('item-mousemove', $event);\n      })\n    }, null, 8, [\"id\", \"menuId\", \"style\", \"focusedItemId\", \"items\", \"mobileActive\", \"activeItemPath\", \"templates\", \"level\", \"aria-labelledby\", \"pt\", \"unstyled\"])) : createCommentVNode(\"\", true)], 16, _hoisted_1$1)) : createCommentVNode(\"\", true), $options.isItemVisible(processedItem) && $options.getItemProp(processedItem, 'separator') ? (openBlock(), createElementBlock(\"li\", mergeProps({\n      key: 1,\n      id: $options.getItemId(processedItem),\n      \"class\": [_ctx.cx('separator'), $options.getItemProp(processedItem, 'class')],\n      style: $options.getItemProp(processedItem, 'style'),\n      role: \"separator\",\n      ref_for: true\n    }, _ctx.ptm('separator')), null, 16, _hoisted_5)) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16);\n}\n\nscript$1.render = render$1;\n\nvar script = {\n  name: 'Menubar',\n  \"extends\": script$2,\n  inheritAttrs: false,\n  emits: ['focus', 'blur'],\n  matchMediaListener: null,\n  data: function data() {\n    return {\n      mobileActive: false,\n      focused: false,\n      focusedItemInfo: {\n        index: -1,\n        level: 0,\n        parentKey: ''\n      },\n      activeItemPath: [],\n      dirty: false,\n      query: null,\n      queryMatches: false\n    };\n  },\n  watch: {\n    activeItemPath: function activeItemPath(newPath) {\n      if (isNotEmpty(newPath)) {\n        this.bindOutsideClickListener();\n        this.bindResizeListener();\n      } else {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n      }\n    }\n  },\n  outsideClickListener: null,\n  container: null,\n  menubar: null,\n  mounted: function mounted() {\n    this.bindMatchMediaListener();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.mobileActive = false;\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    this.unbindMatchMediaListener();\n    if (this.container) {\n      ZIndex.clear(this.container);\n    }\n    this.container = null;\n  },\n  methods: {\n    getItemProp: function getItemProp(item, name) {\n      return item ? resolve(item[name]) : undefined;\n    },\n    getItemLabel: function getItemLabel(item) {\n      return this.getItemProp(item, 'label');\n    },\n    isItemDisabled: function isItemDisabled(item) {\n      return this.getItemProp(item, 'disabled');\n    },\n    isItemVisible: function isItemVisible(item) {\n      return this.getItemProp(item, 'visible') !== false;\n    },\n    isItemGroup: function isItemGroup(item) {\n      return isNotEmpty(this.getItemProp(item, 'items'));\n    },\n    isItemSeparator: function isItemSeparator(item) {\n      return this.getItemProp(item, 'separator');\n    },\n    getProccessedItemLabel: function getProccessedItemLabel(processedItem) {\n      return processedItem ? this.getItemLabel(processedItem.item) : undefined;\n    },\n    isProccessedItemGroup: function isProccessedItemGroup(processedItem) {\n      return processedItem && isNotEmpty(processedItem.items);\n    },\n    toggle: function toggle(event) {\n      var _this = this;\n      if (this.mobileActive) {\n        this.mobileActive = false;\n        ZIndex.clear(this.menubar);\n        this.hide();\n      } else {\n        this.mobileActive = true;\n        ZIndex.set('menu', this.menubar, this.$primevue.config.zIndex.menu);\n        setTimeout(function () {\n          _this.show();\n        }, 1);\n      }\n      this.bindOutsideClickListener();\n      event.preventDefault();\n    },\n    show: function show() {\n      focus(this.menubar);\n    },\n    hide: function hide(event, isFocus) {\n      var _this2 = this;\n      if (this.mobileActive) {\n        this.mobileActive = false;\n        setTimeout(function () {\n          focus(_this2.$refs.menubutton);\n        }, 0);\n      }\n      this.activeItemPath = [];\n      this.focusedItemInfo = {\n        index: -1,\n        level: 0,\n        parentKey: ''\n      };\n      isFocus && focus(this.menubar);\n      this.dirty = false;\n    },\n    onFocus: function onFocus(event) {\n      this.focused = true;\n      this.focusedItemInfo = this.focusedItemInfo.index !== -1 ? this.focusedItemInfo : {\n        index: this.findFirstFocusedItemIndex(),\n        level: 0,\n        parentKey: ''\n      };\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focused = false;\n      this.focusedItemInfo = {\n        index: -1,\n        level: 0,\n        parentKey: ''\n      };\n      this.searchValue = '';\n      this.dirty = false;\n      this.$emit('blur', event);\n    },\n    onKeyDown: function onKeyDown(event) {\n      var metaKey = event.metaKey || event.ctrlKey;\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeftKey(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'Space':\n          this.onSpaceKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n        case 'PageDown':\n        case 'PageUp':\n        case 'Backspace':\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          //NOOP\n          break;\n        default:\n          if (!metaKey && isPrintableCharacter(event.key)) {\n            this.searchItems(event, event.key);\n          }\n          break;\n      }\n    },\n    onItemChange: function onItemChange(event, type) {\n      var processedItem = event.processedItem,\n        isFocus = event.isFocus;\n      if (isEmpty(processedItem)) return;\n      var index = processedItem.index,\n        key = processedItem.key,\n        level = processedItem.level,\n        parentKey = processedItem.parentKey,\n        items = processedItem.items;\n      var grouped = isNotEmpty(items);\n      var activeItemPath = this.activeItemPath.filter(function (p) {\n        return p.parentKey !== parentKey && p.parentKey !== key;\n      });\n      grouped && activeItemPath.push(processedItem);\n      this.focusedItemInfo = {\n        index: index,\n        level: level,\n        parentKey: parentKey\n      };\n      grouped && (this.dirty = true);\n      isFocus && focus(this.menubar);\n      if (type === 'hover' && this.queryMatches) {\n        return;\n      }\n      this.activeItemPath = activeItemPath;\n    },\n    onItemClick: function onItemClick(event) {\n      var originalEvent = event.originalEvent,\n        processedItem = event.processedItem;\n      var grouped = this.isProccessedItemGroup(processedItem);\n      var root = isEmpty(processedItem.parent);\n      var selected = this.isSelected(processedItem);\n      if (selected) {\n        var index = processedItem.index,\n          key = processedItem.key,\n          level = processedItem.level,\n          parentKey = processedItem.parentKey;\n        this.activeItemPath = this.activeItemPath.filter(function (p) {\n          return key !== p.key && key.startsWith(p.key);\n        });\n        this.focusedItemInfo = {\n          index: index,\n          level: level,\n          parentKey: parentKey\n        };\n        this.dirty = !root;\n        focus(this.menubar);\n      } else {\n        if (grouped) {\n          this.onItemChange(event);\n        } else {\n          var rootProcessedItem = root ? processedItem : this.activeItemPath.find(function (p) {\n            return p.parentKey === '';\n          });\n          this.hide(originalEvent);\n          this.changeFocusedItemIndex(originalEvent, rootProcessedItem ? rootProcessedItem.index : -1);\n          this.mobileActive = false;\n          focus(this.menubar);\n        }\n      }\n    },\n    onItemMouseEnter: function onItemMouseEnter(event) {\n      if (this.dirty) {\n        this.onItemChange(event, 'hover');\n      }\n    },\n    onItemMouseMove: function onItemMouseMove(event) {\n      if (this.focused) {\n        this.changeFocusedItemIndex(event, event.processedItem.index);\n      }\n    },\n    menuButtonClick: function menuButtonClick(event) {\n      this.toggle(event);\n    },\n    menuButtonKeydown: function menuButtonKeydown(event) {\n      (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && this.menuButtonClick(event);\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      var processedItem = this.visibleItems[this.focusedItemInfo.index];\n      var root = processedItem ? isEmpty(processedItem.parent) : null;\n      if (root) {\n        var grouped = this.isProccessedItemGroup(processedItem);\n        if (grouped) {\n          this.onItemChange({\n            originalEvent: event,\n            processedItem: processedItem\n          });\n          this.focusedItemInfo = {\n            index: -1,\n            parentKey: processedItem.key\n          };\n          this.onArrowRightKey(event);\n        }\n      } else {\n        var itemIndex = this.focusedItemInfo.index !== -1 ? this.findNextItemIndex(this.focusedItemInfo.index) : this.findFirstFocusedItemIndex();\n        this.changeFocusedItemIndex(event, itemIndex);\n      }\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      var _this3 = this;\n      var processedItem = this.visibleItems[this.focusedItemInfo.index];\n      var root = isEmpty(processedItem.parent);\n      if (root) {\n        var grouped = this.isProccessedItemGroup(processedItem);\n        if (grouped) {\n          this.onItemChange({\n            originalEvent: event,\n            processedItem: processedItem\n          });\n          this.focusedItemInfo = {\n            index: -1,\n            parentKey: processedItem.key\n          };\n          var itemIndex = this.findLastItemIndex();\n          this.changeFocusedItemIndex(event, itemIndex);\n        }\n      } else {\n        var parentItem = this.activeItemPath.find(function (p) {\n          return p.key === processedItem.parentKey;\n        });\n        if (this.focusedItemInfo.index === 0) {\n          this.focusedItemInfo = {\n            index: -1,\n            parentKey: parentItem ? parentItem.parentKey : ''\n          };\n          this.searchValue = '';\n          this.onArrowLeftKey(event);\n          this.activeItemPath = this.activeItemPath.filter(function (p) {\n            return p.parentKey !== _this3.focusedItemInfo.parentKey;\n          });\n        } else {\n          var _itemIndex = this.focusedItemInfo.index !== -1 ? this.findPrevItemIndex(this.focusedItemInfo.index) : this.findLastFocusedItemIndex();\n          this.changeFocusedItemIndex(event, _itemIndex);\n        }\n      }\n      event.preventDefault();\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var _this4 = this;\n      var processedItem = this.visibleItems[this.focusedItemInfo.index];\n      var parentItem = processedItem ? this.activeItemPath.find(function (p) {\n        return p.key === processedItem.parentKey;\n      }) : null;\n      if (parentItem) {\n        this.onItemChange({\n          originalEvent: event,\n          processedItem: parentItem\n        });\n        this.activeItemPath = this.activeItemPath.filter(function (p) {\n          return p.parentKey !== _this4.focusedItemInfo.parentKey;\n        });\n        event.preventDefault();\n      } else {\n        var itemIndex = this.focusedItemInfo.index !== -1 ? this.findPrevItemIndex(this.focusedItemInfo.index) : this.findLastFocusedItemIndex();\n        this.changeFocusedItemIndex(event, itemIndex);\n        event.preventDefault();\n      }\n    },\n    onArrowRightKey: function onArrowRightKey(event) {\n      var processedItem = this.visibleItems[this.focusedItemInfo.index];\n      var parentItem = processedItem ? this.activeItemPath.find(function (p) {\n        return p.key === processedItem.parentKey;\n      }) : null;\n      if (parentItem) {\n        var grouped = this.isProccessedItemGroup(processedItem);\n        if (grouped) {\n          this.onItemChange({\n            originalEvent: event,\n            processedItem: processedItem\n          });\n          this.focusedItemInfo = {\n            index: -1,\n            parentKey: processedItem.key\n          };\n          this.onArrowDownKey(event);\n        }\n      } else {\n        var itemIndex = this.focusedItemInfo.index !== -1 ? this.findNextItemIndex(this.focusedItemInfo.index) : this.findFirstFocusedItemIndex();\n        this.changeFocusedItemIndex(event, itemIndex);\n        event.preventDefault();\n      }\n    },\n    onHomeKey: function onHomeKey(event) {\n      this.changeFocusedItemIndex(event, this.findFirstItemIndex());\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      this.changeFocusedItemIndex(event, this.findLastItemIndex());\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (this.focusedItemInfo.index !== -1) {\n        var element = findSingle(this.menubar, \"li[id=\\\"\".concat(\"\".concat(this.focusedItemId), \"\\\"]\"));\n        var anchorElement = element && findSingle(element, 'a[data-pc-section=\"itemlink\"]');\n        anchorElement ? anchorElement.click() : element && element.click();\n        var processedItem = this.visibleItems[this.focusedItemInfo.index];\n        var grouped = this.isProccessedItemGroup(processedItem);\n        !grouped && (this.focusedItemInfo.index = this.findFirstFocusedItemIndex());\n      }\n      event.preventDefault();\n    },\n    onSpaceKey: function onSpaceKey(event) {\n      this.onEnterKey(event);\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      if (this.focusedItemInfo.level !== 0) {\n        var _focusedItemInfo = this.focusedItemInfo;\n        this.hide(event, false);\n        this.focusedItemInfo = {\n          index: Number(_focusedItemInfo.parentKey.split('_')[0]),\n          level: 0,\n          parentKey: ''\n        };\n      }\n      event.preventDefault();\n    },\n    onTabKey: function onTabKey(event) {\n      if (this.focusedItemInfo.index !== -1) {\n        var processedItem = this.visibleItems[this.focusedItemInfo.index];\n        var grouped = this.isProccessedItemGroup(processedItem);\n        !grouped && this.onItemChange({\n          originalEvent: event,\n          processedItem: processedItem\n        });\n      }\n      this.hide();\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this5 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          var isOutsideContainer = _this5.container && !_this5.container.contains(event.target);\n          var isOutsideTarget = !(_this5.target && (_this5.target === event.target || _this5.target.contains(event.target)));\n          if (isOutsideContainer && isOutsideTarget) {\n            _this5.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener, true);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener, true);\n        this.outsideClickListener = null;\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this6 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function (event) {\n          if (!isTouchDevice()) {\n            _this6.hide(event, true);\n          }\n          _this6.mobileActive = false;\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    bindMatchMediaListener: function bindMatchMediaListener() {\n      var _this7 = this;\n      if (!this.matchMediaListener) {\n        var query = matchMedia(\"(max-width: \".concat(this.breakpoint, \")\"));\n        this.query = query;\n        this.queryMatches = query.matches;\n        this.matchMediaListener = function () {\n          _this7.queryMatches = query.matches;\n          _this7.mobileActive = false;\n        };\n        this.query.addEventListener('change', this.matchMediaListener);\n      }\n    },\n    unbindMatchMediaListener: function unbindMatchMediaListener() {\n      if (this.matchMediaListener) {\n        this.query.removeEventListener('change', this.matchMediaListener);\n        this.matchMediaListener = null;\n      }\n    },\n    isItemMatched: function isItemMatched(processedItem) {\n      var _this$getProccessedIt;\n      return this.isValidItem(processedItem) && ((_this$getProccessedIt = this.getProccessedItemLabel(processedItem)) === null || _this$getProccessedIt === void 0 ? void 0 : _this$getProccessedIt.toLocaleLowerCase().startsWith(this.searchValue.toLocaleLowerCase()));\n    },\n    isValidItem: function isValidItem(processedItem) {\n      return !!processedItem && !this.isItemDisabled(processedItem.item) && !this.isItemSeparator(processedItem.item) && this.isItemVisible(processedItem.item);\n    },\n    isValidSelectedItem: function isValidSelectedItem(processedItem) {\n      return this.isValidItem(processedItem) && this.isSelected(processedItem);\n    },\n    isSelected: function isSelected(processedItem) {\n      return this.activeItemPath.some(function (p) {\n        return p.key === processedItem.key;\n      });\n    },\n    findFirstItemIndex: function findFirstItemIndex() {\n      var _this8 = this;\n      return this.visibleItems.findIndex(function (processedItem) {\n        return _this8.isValidItem(processedItem);\n      });\n    },\n    findLastItemIndex: function findLastItemIndex() {\n      var _this9 = this;\n      return findLastIndex(this.visibleItems, function (processedItem) {\n        return _this9.isValidItem(processedItem);\n      });\n    },\n    findNextItemIndex: function findNextItemIndex(index) {\n      var _this10 = this;\n      var matchedItemIndex = index < this.visibleItems.length - 1 ? this.visibleItems.slice(index + 1).findIndex(function (processedItem) {\n        return _this10.isValidItem(processedItem);\n      }) : -1;\n      return matchedItemIndex > -1 ? matchedItemIndex + index + 1 : index;\n    },\n    findPrevItemIndex: function findPrevItemIndex(index) {\n      var _this11 = this;\n      var matchedItemIndex = index > 0 ? findLastIndex(this.visibleItems.slice(0, index), function (processedItem) {\n        return _this11.isValidItem(processedItem);\n      }) : -1;\n      return matchedItemIndex > -1 ? matchedItemIndex : index;\n    },\n    findSelectedItemIndex: function findSelectedItemIndex() {\n      var _this12 = this;\n      return this.visibleItems.findIndex(function (processedItem) {\n        return _this12.isValidSelectedItem(processedItem);\n      });\n    },\n    findFirstFocusedItemIndex: function findFirstFocusedItemIndex() {\n      var selectedIndex = this.findSelectedItemIndex();\n      return selectedIndex < 0 ? this.findFirstItemIndex() : selectedIndex;\n    },\n    findLastFocusedItemIndex: function findLastFocusedItemIndex() {\n      var selectedIndex = this.findSelectedItemIndex();\n      return selectedIndex < 0 ? this.findLastItemIndex() : selectedIndex;\n    },\n    searchItems: function searchItems(event, _char) {\n      var _this13 = this;\n      this.searchValue = (this.searchValue || '') + _char;\n      var itemIndex = -1;\n      var matched = false;\n      if (this.focusedItemInfo.index !== -1) {\n        itemIndex = this.visibleItems.slice(this.focusedItemInfo.index).findIndex(function (processedItem) {\n          return _this13.isItemMatched(processedItem);\n        });\n        itemIndex = itemIndex === -1 ? this.visibleItems.slice(0, this.focusedItemInfo.index).findIndex(function (processedItem) {\n          return _this13.isItemMatched(processedItem);\n        }) : itemIndex + this.focusedItemInfo.index;\n      } else {\n        itemIndex = this.visibleItems.findIndex(function (processedItem) {\n          return _this13.isItemMatched(processedItem);\n        });\n      }\n      if (itemIndex !== -1) {\n        matched = true;\n      }\n      if (itemIndex === -1 && this.focusedItemInfo.index === -1) {\n        itemIndex = this.findFirstFocusedItemIndex();\n      }\n      if (itemIndex !== -1) {\n        this.changeFocusedItemIndex(event, itemIndex);\n      }\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      this.searchTimeout = setTimeout(function () {\n        _this13.searchValue = '';\n        _this13.searchTimeout = null;\n      }, 500);\n      return matched;\n    },\n    changeFocusedItemIndex: function changeFocusedItemIndex(event, index) {\n      if (this.focusedItemInfo.index !== index) {\n        this.focusedItemInfo.index = index;\n        this.scrollInView();\n      }\n    },\n    scrollInView: function scrollInView() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      var id = index !== -1 ? \"\".concat(this.$id, \"_\").concat(index) : this.focusedItemId;\n      var element = findSingle(this.menubar, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n      if (element) {\n        element.scrollIntoView && element.scrollIntoView({\n          block: 'nearest',\n          inline: 'start'\n        });\n      }\n    },\n    createProcessedItems: function createProcessedItems(items) {\n      var _this14 = this;\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var parentKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n      var processedItems = [];\n      items && items.forEach(function (item, index) {\n        var key = (parentKey !== '' ? parentKey + '_' : '') + index;\n        var newItem = {\n          item: item,\n          index: index,\n          level: level,\n          key: key,\n          parent: parent,\n          parentKey: parentKey\n        };\n        newItem['items'] = _this14.createProcessedItems(item.items, level + 1, newItem, key);\n        processedItems.push(newItem);\n      });\n      return processedItems;\n    },\n    containerRef: function containerRef(el) {\n      this.container = el;\n    },\n    menubarRef: function menubarRef(el) {\n      this.menubar = el ? el.$el : undefined;\n    }\n  },\n  computed: {\n    processedItems: function processedItems() {\n      return this.createProcessedItems(this.model || []);\n    },\n    visibleItems: function visibleItems() {\n      var _this15 = this;\n      var processedItem = this.activeItemPath.find(function (p) {\n        return p.key === _this15.focusedItemInfo.parentKey;\n      });\n      return processedItem ? processedItem.items : this.processedItems;\n    },\n    focusedItemId: function focusedItemId() {\n      return this.focusedItemInfo.index !== -1 ? \"\".concat(this.$id).concat(isNotEmpty(this.focusedItemInfo.parentKey) ? '_' + this.focusedItemInfo.parentKey : '', \"_\").concat(this.focusedItemInfo.index) : null;\n    }\n  },\n  components: {\n    MenubarSub: script$1,\n    BarsIcon: BarsIcon\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"aria-haspopup\", \"aria-expanded\", \"aria-controls\", \"aria-label\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_BarsIcon = resolveComponent(\"BarsIcon\");\n  var _component_MenubarSub = resolveComponent(\"MenubarSub\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: $options.containerRef,\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [_ctx.$slots.start ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('start')\n  }, _ctx.ptm('start')), [renderSlot(_ctx.$slots, \"start\")], 16)) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, _ctx.$slots.button ? 'button' : 'menubutton', {\n    id: _ctx.$id,\n    \"class\": normalizeClass(_ctx.cx('button')),\n    toggleCallback: function toggleCallback(event) {\n      return $options.menuButtonClick(event);\n    }\n  }, function () {\n    var _ctx$$primevue$config;\n    return [_ctx.model && _ctx.model.length > 0 ? (openBlock(), createElementBlock(\"a\", mergeProps({\n      key: 0,\n      ref: \"menubutton\",\n      role: \"button\",\n      tabindex: \"0\",\n      \"class\": _ctx.cx('button'),\n      \"aria-haspopup\": _ctx.model.length && _ctx.model.length > 0 ? true : false,\n      \"aria-expanded\": $data.mobileActive,\n      \"aria-controls\": _ctx.$id,\n      \"aria-label\": (_ctx$$primevue$config = _ctx.$primevue.config.locale.aria) === null || _ctx$$primevue$config === void 0 ? void 0 : _ctx$$primevue$config.navigation,\n      onClick: _cache[0] || (_cache[0] = function ($event) {\n        return $options.menuButtonClick($event);\n      }),\n      onKeydown: _cache[1] || (_cache[1] = function ($event) {\n        return $options.menuButtonKeydown($event);\n      })\n    }, _objectSpread(_objectSpread({}, _ctx.buttonProps), _ctx.ptm('button'))), [renderSlot(_ctx.$slots, _ctx.$slots.buttonicon ? 'buttonicon' : 'menubuttonicon', {}, function () {\n      return [createVNode(_component_BarsIcon, normalizeProps(guardReactiveProps(_ctx.ptm('buttonicon'))), null, 16)];\n    })], 16, _hoisted_1)) : createCommentVNode(\"\", true)];\n  }), createVNode(_component_MenubarSub, {\n    ref: $options.menubarRef,\n    id: _ctx.$id + '_list',\n    role: \"menubar\",\n    items: $options.processedItems,\n    templates: _ctx.$slots,\n    root: true,\n    mobileActive: $data.mobileActive,\n    tabindex: \"0\",\n    \"aria-activedescendant\": $data.focused ? $options.focusedItemId : undefined,\n    menuId: _ctx.$id,\n    focusedItemId: $data.focused ? $options.focusedItemId : undefined,\n    activeItemPath: $data.activeItemPath,\n    level: 0,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    pt: _ctx.pt,\n    unstyled: _ctx.unstyled,\n    onFocus: $options.onFocus,\n    onBlur: $options.onBlur,\n    onKeydown: $options.onKeyDown,\n    onItemClick: $options.onItemClick,\n    onItemMouseenter: $options.onItemMouseEnter,\n    onItemMousemove: $options.onItemMouseMove\n  }, null, 8, [\"id\", \"items\", \"templates\", \"mobileActive\", \"aria-activedescendant\", \"menuId\", \"focusedItemId\", \"activeItemPath\", \"aria-labelledby\", \"aria-label\", \"pt\", \"unstyled\", \"onFocus\", \"onBlur\", \"onKeydown\", \"onItemClick\", \"onItemMouseenter\", \"onItemMousemove\"]), _ctx.$slots.end ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 1,\n    \"class\": _ctx.cx('end')\n  }, _ctx.ptm('end')), [renderSlot(_ctx.$slots, \"end\")], 16)) : createCommentVNode(\"\", true)], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAqB,cAAA,qBAAwB,MAAA,OAAA,cAAqC,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","x_google_ignoreList":[0]}