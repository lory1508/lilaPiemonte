{"file":"index.mjs","mappings":";AACA,MAAe,eAAA,qBAAqB,MAAM,OAAO,cAAiF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","names":[],"sources":["../../../../../../node_modules/primevue/terminal/index.mjs?nuxt_component=async&nuxt_component_name=Terminal&nuxt_component_export=default"],"sourcesContent":["import TerminalService from 'primevue/terminalservice';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TerminalStyle from 'primevue/terminal/style';\nimport { createElementBlock, openBlock, mergeProps, createCommentVNode, createElementVNode, toDisplayString, Fragment, renderList, withDirectives, vModelText } from 'vue';\n\nvar script$1 = {\n  name: 'BaseTerminal',\n  \"extends\": BaseComponent,\n  props: {\n    welcomeMessage: {\n      type: String,\n      \"default\": null\n    },\n    prompt: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: TerminalStyle,\n  provide: function provide() {\n    return {\n      $pcTerminal: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'Terminal',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  data: function data() {\n    return {\n      commandText: null,\n      commands: []\n    };\n  },\n  mounted: function mounted() {\n    TerminalService.on('response', this.responseListener);\n    this.$refs.input.focus();\n  },\n  updated: function updated() {\n    this.$el.scrollTop = this.$el.scrollHeight;\n  },\n  beforeUnmount: function beforeUnmount() {\n    TerminalService.off('response', this.responseListener);\n  },\n  methods: {\n    onClick: function onClick() {\n      this.$refs.input.focus();\n    },\n    onKeydown: function onKeydown(event) {\n      if (event.key === 'Enter' && this.commandText) {\n        this.commands.push({\n          text: this.commandText\n        });\n        TerminalService.emit('command', this.commandText);\n        this.commandText = '';\n      }\n    },\n    responseListener: function responseListener(response) {\n      this.commands[this.commands.length - 1].response = response;\n    }\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [_ctx.welcomeMessage ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('welcomeMessage')\n  }, _ctx.ptm('welcomeMessage')), toDisplayString(_ctx.welcomeMessage), 17)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('commandList')\n  }, _ctx.ptm('content')), [(openBlock(true), createElementBlock(Fragment, null, renderList($data.commands, function (command, i) {\n    return openBlock(), createElementBlock(\"div\", mergeProps({\n      key: command.text + i.toString(),\n      \"class\": _ctx.cx('command'),\n      ref_for: true\n    }, _ctx.ptm('commands')), [createElementVNode(\"span\", mergeProps({\n      \"class\": _ctx.cx('promptLabel'),\n      ref_for: true\n    }, _ctx.ptm('prompt')), toDisplayString(_ctx.prompt), 17), createElementVNode(\"span\", mergeProps({\n      \"class\": _ctx.cx('commandValue'),\n      ref_for: true\n    }, _ctx.ptm('command')), toDisplayString(command.text), 17), createElementVNode(\"div\", mergeProps({\n      \"class\": _ctx.cx('commandResponse'),\n      \"aria-live\": \"polite\",\n      ref_for: true\n    }, _ctx.ptm('response')), toDisplayString(command.response), 17)], 16);\n  }), 128))], 16), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('prompt')\n  }, _ctx.ptm('container')), [createElementVNode(\"span\", mergeProps({\n    \"class\": _ctx.cx('promptLabel')\n  }, _ctx.ptm('prompt')), toDisplayString(_ctx.prompt), 17), withDirectives(createElementVNode(\"input\", mergeProps({\n    ref: \"input\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.commandText = $event;\n    }),\n    \"class\": _ctx.cx('promptValue'),\n    type: \"text\",\n    autocomplete: \"off\",\n    onKeydown: _cache[1] || (_cache[1] = function () {\n      return $options.onKeydown && $options.onKeydown.apply($options, arguments);\n    })\n  }, _ctx.ptm('commandText')), null, 16), [[vModelText, $data.commandText]])], 16)], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}