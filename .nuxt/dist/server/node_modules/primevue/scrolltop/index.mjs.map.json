{"file":"index.mjs","mappings":";AACA,MAAuB,gBAAA,qBAAA,MAAA,OAAA,cAAA,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","names":[],"sources":["../../../../../../node_modules/primevue/scrolltop/index.mjs?nuxt_component=async&nuxt_component_name=ScrollTop&nuxt_component_export=default"],"sourcesContent":["import { getWindowScrollTop } from '@primeuix/utils/dom';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport ChevronUpIcon from '@primevue/icons/chevronup';\nimport Button from 'primevue/button';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport ScrollTopStyle from 'primevue/scrolltop/style';\nimport { resolveComponent, createBlock, openBlock, Transition, mergeProps, withCtx, createCommentVNode, renderSlot, normalizeClass, resolveDynamicComponent } from 'vue';\n\nvar script$1 = {\n  name: 'BaseScrollTop',\n  \"extends\": BaseComponent,\n  props: {\n    target: {\n      type: String,\n      \"default\": 'window'\n    },\n    threshold: {\n      type: Number,\n      \"default\": 400\n    },\n    icon: {\n      type: String,\n      \"default\": undefined\n    },\n    behavior: {\n      type: String,\n      \"default\": 'smooth'\n    },\n    buttonProps: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          rounded: true\n        };\n      }\n    }\n  },\n  style: ScrollTopStyle,\n  provide: function provide() {\n    return {\n      $pcScrollTop: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'ScrollTop',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  scrollListener: null,\n  container: null,\n  data: function data() {\n    return {\n      visible: false\n    };\n  },\n  mounted: function mounted() {\n    if (this.target === 'window') this.bindDocumentScrollListener();else if (this.target === 'parent') this.bindParentScrollListener();\n  },\n  beforeUnmount: function beforeUnmount() {\n    if (this.target === 'window') this.unbindDocumentScrollListener();else if (this.target === 'parent') this.unbindParentScrollListener();\n    if (this.container) {\n      ZIndex.clear(this.container);\n      this.overlay = null;\n    }\n  },\n  methods: {\n    onClick: function onClick() {\n      var scrollElement = this.target === 'window' ? window : this.$el.parentElement;\n      scrollElement.scroll({\n        top: 0,\n        behavior: this.behavior\n      });\n    },\n    checkVisibility: function checkVisibility(scrollY) {\n      if (scrollY > this.threshold) this.visible = true;else this.visible = false;\n    },\n    bindParentScrollListener: function bindParentScrollListener() {\n      var _this = this;\n      this.scrollListener = function () {\n        _this.checkVisibility(_this.$el.parentElement.scrollTop);\n      };\n      this.$el.parentElement.addEventListener('scroll', this.scrollListener);\n    },\n    bindDocumentScrollListener: function bindDocumentScrollListener() {\n      var _this2 = this;\n      this.scrollListener = function () {\n        _this2.checkVisibility(getWindowScrollTop());\n      };\n      window.addEventListener('scroll', this.scrollListener);\n    },\n    unbindParentScrollListener: function unbindParentScrollListener() {\n      if (this.scrollListener) {\n        this.$el.parentElement.removeEventListener('scroll', this.scrollListener);\n        this.scrollListener = null;\n      }\n    },\n    unbindDocumentScrollListener: function unbindDocumentScrollListener() {\n      if (this.scrollListener) {\n        window.removeEventListener('scroll', this.scrollListener);\n        this.scrollListener = null;\n      }\n    },\n    onEnter: function onEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    containerRef: function containerRef(el) {\n      this.container = el ? el.$el : undefined;\n    }\n  },\n  computed: {\n    scrollTopAriaLabel: function scrollTopAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.scrollTop : undefined;\n    }\n  },\n  components: {\n    ChevronUpIcon: ChevronUpIcon,\n    Button: Button\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Button = resolveComponent(\"Button\");\n  return openBlock(), createBlock(Transition, mergeProps({\n    name: \"p-scrolltop\",\n    appear: \"\",\n    onEnter: $options.onEnter,\n    onAfterLeave: $options.onAfterLeave\n  }, _ctx.ptm('transition')), {\n    \"default\": withCtx(function () {\n      return [$data.visible ? (openBlock(), createBlock(_component_Button, mergeProps({\n        key: 0,\n        ref: $options.containerRef,\n        \"class\": _ctx.cx('root'),\n        onClick: $options.onClick,\n        \"aria-label\": $options.scrollTopAriaLabel,\n        unstyled: _ctx.unstyled\n      }, _ctx.buttonProps, {\n        pt: _ctx.ptm('root')\n      }), {\n        icon: withCtx(function (slotProps) {\n          return [renderSlot(_ctx.$slots, \"icon\", {\n            \"class\": normalizeClass(_ctx.cx('icon'))\n          }, function () {\n            return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon ? 'span' : 'ChevronUpIcon'), mergeProps({\n              \"class\": [_ctx.cx('icon'), _ctx.icon, slotProps[\"class\"]]\n            }, _ctx.ptm('root')['icon'], {\n              \"data-pc-section\": \"icon\"\n            }), null, 16, [\"class\"]))];\n          })];\n        }),\n        _: 3\n      }, 16, [\"class\", \"onClick\", \"aria-label\", \"unstyled\", \"pt\"])) : createCommentVNode(\"\", true)];\n    }),\n    _: 3\n  }, 16, [\"onEnter\", \"onAfterLeave\"]);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}