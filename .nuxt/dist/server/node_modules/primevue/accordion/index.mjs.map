{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/accordion/index.mjs?nuxt_component=async&nuxt_component_name=Accordion&nuxt_component_export=default"],"sourcesContent":["import ChevronRightIcon from '@primevue/icons/chevronright';\nimport ChevronUpIcon from '@primevue/icons/chevronup';\nimport AccordionContent from 'primevue/accordioncontent';\nimport AccordionHeader from 'primevue/accordionheader';\nimport AccordionPanel from 'primevue/accordionpanel';\nimport { mergeProps, resolveComponent, createElementBlock, openBlock, renderSlot, Fragment, renderList, createBlock, withCtx, createVNode, normalizeClass, createCommentVNode, resolveDynamicComponent, toDisplayString } from 'vue';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport AccordionStyle from 'primevue/accordion/style';\n\nvar script$1 = {\n  name: 'BaseAccordion',\n  \"extends\": BaseComponent,\n  props: {\n    value: {\n      type: [String, Number, Array],\n      \"default\": undefined\n    },\n    multiple: {\n      type: Boolean,\n      \"default\": false\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    expandIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    collapseIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    // @deprecated since v4.\n    activeIndex: {\n      type: [Number, Array],\n      \"default\": null\n    }\n  },\n  style: AccordionStyle,\n  provide: function provide() {\n    return {\n      $pcAccordion: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'Accordion',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:value', 'update:activeIndex', 'tab-open', 'tab-close', 'tab-click'],\n  data: function data() {\n    return {\n      d_value: this.value\n    };\n  },\n  watch: {\n    value: function value(newValue) {\n      this.d_value = newValue;\n    },\n    activeIndex: {\n      immediate: true,\n      handler: function handler(newValue) {\n        if (this.hasAccordionTab) {\n          this.d_value = this.multiple ? newValue === null || newValue === void 0 ? void 0 : newValue.map(String) : newValue === null || newValue === void 0 ? void 0 : newValue.toString();\n        }\n      }\n    }\n  },\n  methods: {\n    isItemActive: function isItemActive(value) {\n      var _this$d_value;\n      return this.multiple ? (_this$d_value = this.d_value) === null || _this$d_value === void 0 ? void 0 : _this$d_value.includes(value) : this.d_value === value;\n    },\n    updateValue: function updateValue(newValue) {\n      var _this$d_value2;\n      var active = this.isItemActive(newValue);\n      if (this.multiple) {\n        if (active) {\n          this.d_value = this.d_value.filter(function (v) {\n            return v !== newValue;\n          });\n        } else {\n          if (this.d_value) this.d_value.push(newValue);else this.d_value = [newValue];\n        }\n      } else {\n        this.d_value = active ? null : newValue;\n      }\n      this.$emit('update:value', this.d_value);\n\n      // @deprecated since v4.\n      this.$emit('update:activeIndex', this.multiple ? (_this$d_value2 = this.d_value) === null || _this$d_value2 === void 0 ? void 0 : _this$d_value2.map(Number) : Number(this.d_value));\n      this.$emit(active ? 'tab-close' : 'tab-open', {\n        originalEvent: undefined,\n        index: Number(newValue)\n      });\n    },\n    // @deprecated since v4. Use new structure instead.\n    isAccordionTab: function isAccordionTab(child) {\n      return child.type.name === 'AccordionTab';\n    },\n    getTabProp: function getTabProp(tab, name) {\n      return tab.props ? tab.props[name] : undefined;\n    },\n    getKey: function getKey(tab, index) {\n      return this.getTabProp(tab, 'header') || index;\n    },\n    getHeaderPT: function getHeaderPT(tab, index) {\n      var _this = this;\n      return {\n        root: mergeProps({\n          onClick: function onClick(event) {\n            return _this.onTabClick(event, index);\n          }\n        }, this.getTabProp(tab, 'headerProps'), this.getTabPT(tab, 'header', index)),\n        toggleicon: mergeProps(this.getTabProp(tab, 'headeractionprops'), this.getTabPT(tab, 'headeraction', index))\n      };\n    },\n    getContentPT: function getContentPT(tab, index) {\n      return {\n        root: mergeProps(this.getTabProp(tab, 'contentProps'), this.getTabPT(tab, 'toggleablecontent', index)),\n        transition: this.getTabPT(tab, 'transition', index),\n        content: this.getTabPT(tab, 'content', index)\n      };\n    },\n    getTabPT: function getTabPT(tab, key, index) {\n      var count = this.tabs.length;\n      var tabMetaData = {\n        props: tab.props || {},\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: index,\n          count: count,\n          first: index === 0,\n          last: index === count - 1,\n          active: this.isItemActive(\"\".concat(index))\n        }\n      };\n      return mergeProps(this.ptm(\"accordiontab.\".concat(key), tabMetaData), this.ptmo(this.getTabProp(tab, 'pt'), key, tabMetaData));\n    },\n    onTabClick: function onTabClick(event, index) {\n      this.$emit('tab-click', {\n        originalEvent: event,\n        index: index\n      });\n    }\n  },\n  computed: {\n    // @deprecated since v4.\n    tabs: function tabs() {\n      var _this2 = this;\n      return this.$slots[\"default\"]().reduce(function (tabs, child) {\n        if (_this2.isAccordionTab(child)) {\n          tabs.push(child);\n        } else if (child.children && child.children instanceof Array) {\n          child.children.forEach(function (nestedChild) {\n            if (_this2.isAccordionTab(nestedChild)) {\n              tabs.push(nestedChild);\n            }\n          });\n        }\n        return tabs;\n      }, []);\n    },\n    hasAccordionTab: function hasAccordionTab() {\n      return this.tabs.length;\n    }\n  },\n  components: {\n    AccordionPanel: AccordionPanel,\n    AccordionHeader: AccordionHeader,\n    AccordionContent: AccordionContent,\n    ChevronUpIcon: ChevronUpIcon,\n    ChevronRightIcon: ChevronRightIcon\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_AccordionHeader = resolveComponent(\"AccordionHeader\");\n  var _component_AccordionContent = resolveComponent(\"AccordionContent\");\n  var _component_AccordionPanel = resolveComponent(\"AccordionPanel\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [$options.hasAccordionTab ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList($options.tabs, function (tab, i) {\n    return openBlock(), createBlock(_component_AccordionPanel, {\n      key: $options.getKey(tab, i),\n      value: \"\".concat(i),\n      pt: {\n        root: $options.getTabPT(tab, 'root', i)\n      },\n      disabled: $options.getTabProp(tab, 'disabled')\n    }, {\n      \"default\": withCtx(function () {\n        return [createVNode(_component_AccordionHeader, {\n          \"class\": normalizeClass($options.getTabProp(tab, 'headerClass')),\n          pt: $options.getHeaderPT(tab, i)\n        }, {\n          toggleicon: withCtx(function (slotProps) {\n            return [slotProps.active ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.$slots.collapseicon ? _ctx.$slots.collapseicon : _ctx.collapseIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n              key: 0,\n              \"class\": [_ctx.collapseIcon, slotProps[\"class\"]],\n              \"aria-hidden\": \"true\",\n              ref_for: true\n            }, $options.getTabPT(tab, 'headericon', i)), null, 16, [\"class\"])) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.$slots.expandicon ? _ctx.$slots.expandicon : _ctx.expandIcon ? 'span' : 'ChevronUpIcon'), mergeProps({\n              key: 1,\n              \"class\": [_ctx.expandIcon, slotProps[\"class\"]],\n              \"aria-hidden\": \"true\",\n              ref_for: true\n            }, $options.getTabPT(tab, 'headericon', i)), null, 16, [\"class\"]))];\n          }),\n          \"default\": withCtx(function () {\n            return [tab.children && tab.children.headericon ? (openBlock(), createBlock(resolveDynamicComponent(tab.children.headericon), {\n              key: 0,\n              isTabActive: $options.isItemActive(\"\".concat(i)),\n              active: $options.isItemActive(\"\".concat(i)),\n              index: i\n            }, null, 8, [\"isTabActive\", \"active\", \"index\"])) : createCommentVNode(\"\", true), tab.props && tab.props.header ? (openBlock(), createElementBlock(\"span\", mergeProps({\n              key: 1,\n              ref_for: true\n            }, $options.getTabPT(tab, 'headertitle', i)), toDisplayString(tab.props.header), 17)) : createCommentVNode(\"\", true), tab.children && tab.children.header ? (openBlock(), createBlock(resolveDynamicComponent(tab.children.header), {\n              key: 2\n            })) : createCommentVNode(\"\", true)];\n          }),\n          _: 2\n        }, 1032, [\"class\", \"pt\"]), createVNode(_component_AccordionContent, {\n          pt: $options.getContentPT(tab, i)\n        }, {\n          \"default\": withCtx(function () {\n            return [(openBlock(), createBlock(resolveDynamicComponent(tab)))];\n          }),\n          _: 2\n        }, 1032, [\"pt\"])];\n      }),\n      _: 2\n    }, 1032, [\"value\", \"pt\", \"disabled\"]);\n  }), 128)) : renderSlot(_ctx.$slots, \"default\", {\n    key: 1\n  })], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAe,gBAAA,qBAAqB,MAAM,OAAO,cAAkF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","x_google_ignoreList":[0]}