{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/dynamicdialog/index.mjs?nuxt_component=async&nuxt_component_name=DynamicDialog&nuxt_component_export=default"],"sourcesContent":["import { uuid } from '@primeuix/utils';\nimport Dialog from 'primevue/dialog';\nimport DynamicDialogEventBus from 'primevue/dynamicdialogeventbus';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport DynamicDialogStyle from 'primevue/dynamicdialog/style';\nimport { resolveComponent, createElementBlock, openBlock, Fragment, renderList, createBlock, mergeProps, createSlots, withCtx, resolveDynamicComponent } from 'vue';\n\nvar script$1 = {\n  name: 'BaseDynamicDialog',\n  \"extends\": BaseComponent,\n  props: {},\n  style: DynamicDialogStyle,\n  provide: function provide() {\n    return {\n      $pcDynamicDialog: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'DynamicDialog',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  data: function data() {\n    return {\n      instanceMap: {}\n    };\n  },\n  openListener: null,\n  closeListener: null,\n  currentInstance: null,\n  mounted: function mounted() {\n    var _this = this;\n    this.openListener = function (_ref) {\n      var instance = _ref.instance;\n      var key = uuid() + '_dynamic_dialog';\n      instance.visible = true;\n      instance.key = key;\n      _this.instanceMap[key] = instance;\n    };\n    this.closeListener = function (_ref2) {\n      var instance = _ref2.instance,\n        params = _ref2.params;\n      var key = instance.key;\n      var currentInstance = _this.instanceMap[key];\n      if (currentInstance) {\n        currentInstance.visible = false;\n        currentInstance.options.onClose && currentInstance.options.onClose({\n          data: params,\n          type: 'config-close'\n        });\n        _this.currentInstance = currentInstance;\n      }\n    };\n    DynamicDialogEventBus.on('open', this.openListener);\n    DynamicDialogEventBus.on('close', this.closeListener);\n  },\n  beforeUnmount: function beforeUnmount() {\n    DynamicDialogEventBus.off('open', this.openListener);\n    DynamicDialogEventBus.off('close', this.closeListener);\n  },\n  methods: {\n    onDialogHide: function onDialogHide(instance) {\n      !this.currentInstance && instance.options.onClose && instance.options.onClose({\n        type: 'dialog-close'\n      });\n    },\n    onDialogAfterHide: function onDialogAfterHide(instance) {\n      this.currentInstance && delete this.currentInstance;\n      this.currentInstance = null;\n      delete this.instanceMap[instance.key];\n    },\n    getTemplateItems: function getTemplateItems(template) {\n      return Array.isArray(template) ? template : [template];\n    }\n  },\n  components: {\n    DDialog: Dialog\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_DDialog = resolveComponent(\"DDialog\");\n  return openBlock(true), createElementBlock(Fragment, null, renderList($data.instanceMap, function (instance, key) {\n    return openBlock(), createBlock(_component_DDialog, mergeProps({\n      key: key,\n      visible: instance.visible,\n      \"onUpdate:visible\": function onUpdateVisible($event) {\n        return instance.visible = $event;\n      },\n      _instance: instance,\n      ref_for: true\n    }, instance.options.props, {\n      onHide: function onHide($event) {\n        return $options.onDialogHide(instance);\n      },\n      onAfterHide: function onAfterHide($event) {\n        return $options.onDialogAfterHide(instance);\n      }\n    }), createSlots({\n      \"default\": withCtx(function () {\n        return [(openBlock(), createBlock(resolveDynamicComponent(instance.content), mergeProps({\n          ref_for: true\n        }, instance.options.emits), null, 16))];\n      }),\n      _: 2\n    }, [instance.options.templates && instance.options.templates.header ? {\n      name: \"header\",\n      fn: withCtx(function () {\n        return [(openBlock(true), createElementBlock(Fragment, null, renderList($options.getTemplateItems(instance.options.templates.header), function (header, index) {\n          return openBlock(), createBlock(resolveDynamicComponent(header), mergeProps({\n            key: index + '_header',\n            ref_for: true\n          }, instance.options.emits), null, 16);\n        }), 128))];\n      }),\n      key: \"0\"\n    } : undefined, instance.options.templates && instance.options.templates.footer ? {\n      name: \"footer\",\n      fn: withCtx(function () {\n        return [(openBlock(true), createElementBlock(Fragment, null, renderList($options.getTemplateItems(instance.options.templates.footer), function (footer, index) {\n          return openBlock(), createBlock(resolveDynamicComponent(footer), mergeProps({\n            key: index + '_footer',\n            ref_for: true\n          }, instance.options.emits), null, 16);\n        }), 128))];\n      }),\n      key: \"1\"\n    } : undefined]), 1040, [\"visible\", \"onUpdate:visible\", \"_instance\", \"onHide\", \"onAfterHide\"]);\n  }), 128);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAe,oBAAA,qBAAqB,MAAM,OAAO,cAAsF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","x_google_ignoreList":[0]}