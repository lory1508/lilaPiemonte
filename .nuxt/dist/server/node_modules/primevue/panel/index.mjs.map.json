{"file":"index.mjs","mappings":";AACA,MAAe,YAAA,qBAAqB,MAAM,OAAO,cAA8E,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","names":[],"sources":["../../../../../../node_modules/primevue/panel/index.mjs?nuxt_component=async&nuxt_component_name=Panel&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Button from 'primevue/button';\nimport Ripple from 'primevue/ripple';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport PanelStyle from 'primevue/panel/style';\nimport { resolveComponent, createElementBlock, openBlock, mergeProps, createElementVNode, createVNode, renderSlot, normalizeClass, createCommentVNode, toDisplayString, withCtx, createBlock, resolveDynamicComponent, Transition, withDirectives, vShow } from 'vue';\n\nvar script$1 = {\n  name: 'BasePanel',\n  \"extends\": BaseComponent,\n  props: {\n    header: String,\n    toggleable: Boolean,\n    collapsed: Boolean,\n    toggleButtonProps: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          severity: 'secondary',\n          text: true,\n          rounded: true\n        };\n      }\n    }\n  },\n  style: PanelStyle,\n  provide: function provide() {\n    return {\n      $pcPanel: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'Panel',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:collapsed', 'toggle'],\n  data: function data() {\n    return {\n      d_collapsed: this.collapsed\n    };\n  },\n  watch: {\n    collapsed: function collapsed(newValue) {\n      this.d_collapsed = newValue;\n    }\n  },\n  methods: {\n    toggle: function toggle(event) {\n      this.d_collapsed = !this.d_collapsed;\n      this.$emit('update:collapsed', this.d_collapsed);\n      this.$emit('toggle', {\n        originalEvent: event,\n        value: this.d_collapsed\n      });\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n        this.toggle(event);\n        event.preventDefault();\n      }\n    }\n  },\n  computed: {\n    buttonAriaLabel: function buttonAriaLabel() {\n      return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.header;\n    },\n    dataP: function dataP() {\n      return cn({\n        toggleable: this.toggleable\n      });\n    }\n  },\n  components: {\n    PlusIcon: PlusIcon,\n    MinusIcon: MinusIcon,\n    Button: Button\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nvar _hoisted_1 = [\"data-p\"];\nvar _hoisted_2 = [\"data-p\"];\nvar _hoisted_3 = [\"id\"];\nvar _hoisted_4 = [\"id\", \"aria-labelledby\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Button = resolveComponent(\"Button\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    \"data-p\": $options.dataP\n  }, _ctx.ptmi('root')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('header'),\n    \"data-p\": $options.dataP\n  }, _ctx.ptm('header')), [renderSlot(_ctx.$slots, \"header\", {\n    id: _ctx.$id + '_header',\n    \"class\": normalizeClass(_ctx.cx('title'))\n  }, function () {\n    return [_ctx.header ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 0,\n      id: _ctx.$id + '_header',\n      \"class\": _ctx.cx('title')\n    }, _ctx.ptm('title')), toDisplayString(_ctx.header), 17, _hoisted_3)) : createCommentVNode(\"\", true)];\n  }), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('headerActions')\n  }, _ctx.ptm('headerActions')), [renderSlot(_ctx.$slots, \"icons\"), _ctx.toggleable ? renderSlot(_ctx.$slots, \"togglebutton\", {\n    key: 0,\n    collapsed: $data.d_collapsed,\n    toggleCallback: function toggleCallback(event) {\n      return $options.toggle(event);\n    },\n    keydownCallback: function keydownCallback(event) {\n      return $options.onKeyDown(event);\n    }\n  }, function () {\n    return [createVNode(_component_Button, mergeProps({\n      id: _ctx.$id + '_header',\n      \"class\": _ctx.cx('pcToggleButton'),\n      \"aria-label\": $options.buttonAriaLabel,\n      \"aria-controls\": _ctx.$id + '_content',\n      \"aria-expanded\": !$data.d_collapsed,\n      unstyled: _ctx.unstyled,\n      onClick: _cache[0] || (_cache[0] = function ($event) {\n        return $options.toggle(_ctx.event);\n      }),\n      onKeydown: _cache[1] || (_cache[1] = function ($event) {\n        return $options.onKeyDown(_ctx.event);\n      })\n    }, _ctx.toggleButtonProps, {\n      pt: _ctx.ptm('pcToggleButton')\n    }), {\n      icon: withCtx(function (slotProps) {\n        return [renderSlot(_ctx.$slots, _ctx.$slots.toggleicon ? 'toggleicon' : 'togglericon', {\n          collapsed: $data.d_collapsed\n        }, function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent($data.d_collapsed ? 'PlusIcon' : 'MinusIcon'), mergeProps({\n            \"class\": slotProps[\"class\"]\n          }, _ctx.ptm('pcToggleButton')['icon']), null, 16, [\"class\"]))];\n        })];\n      }),\n      _: 3\n    }, 16, [\"id\", \"class\", \"aria-label\", \"aria-controls\", \"aria-expanded\", \"unstyled\", \"pt\"])];\n  }) : createCommentVNode(\"\", true)], 16)], 16, _hoisted_2), createVNode(Transition, mergeProps({\n    name: \"p-toggleable-content\"\n  }, _ctx.ptm('transition')), {\n    \"default\": withCtx(function () {\n      return [withDirectives(createElementVNode(\"div\", mergeProps({\n        id: _ctx.$id + '_content',\n        \"class\": _ctx.cx('contentContainer'),\n        role: \"region\",\n        \"aria-labelledby\": _ctx.$id + '_header'\n      }, _ctx.ptm('contentContainer')), [createElementVNode(\"div\", mergeProps({\n        \"class\": _ctx.cx('content')\n      }, _ctx.ptm('content')), [renderSlot(_ctx.$slots, \"default\")], 16), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", mergeProps({\n        key: 0,\n        \"class\": _ctx.cx('footer')\n      }, _ctx.ptm('footer')), [renderSlot(_ctx.$slots, \"footer\")], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_4), [[vShow, !$data.d_collapsed]])];\n    }),\n    _: 3\n  }, 16)], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}