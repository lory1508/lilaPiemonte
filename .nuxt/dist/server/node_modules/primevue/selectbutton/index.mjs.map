{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/selectbutton/index.mjs?nuxt_component=async&nuxt_component_name=SelectButton&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport ToggleButton from 'primevue/togglebutton';\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport SelectButtonStyle from 'primevue/selectbutton/style';\nimport { resolveComponent, createElementBlock, openBlock, mergeProps, Fragment, renderList, createBlock, createSlots, withCtx, renderSlot, createElementVNode, toDisplayString } from 'vue';\n\nvar script$1 = {\n  name: 'BaseSelectButton',\n  \"extends\": BaseEditableHolder,\n  props: {\n    options: Array,\n    optionLabel: null,\n    optionValue: null,\n    optionDisabled: null,\n    multiple: Boolean,\n    allowEmpty: {\n      type: Boolean,\n      \"default\": true\n    },\n    dataKey: null,\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    size: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: SelectButtonStyle,\n  provide: function provide() {\n    return {\n      $pcSelectButton: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar script = {\n  name: 'SelectButton',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change'],\n  methods: {\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n    },\n    getOptionRenderKey: function getOptionRenderKey(option) {\n      return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n    },\n    isOptionReadonly: function isOptionReadonly(option) {\n      if (this.allowEmpty) return false;\n      var selected = this.isSelected(option);\n      if (this.multiple) {\n        return selected && this.d_value.length === 1;\n      } else {\n        return selected;\n      }\n    },\n    onOptionSelect: function onOptionSelect(event, option, index) {\n      var _this = this;\n      if (this.disabled || this.isOptionDisabled(option) || this.isOptionReadonly(option)) {\n        return;\n      }\n      var selected = this.isSelected(option);\n      var optionValue = this.getOptionValue(option);\n      var newValue;\n      if (this.multiple) {\n        if (selected) {\n          newValue = this.d_value.filter(function (val) {\n            return !equals(val, optionValue, _this.equalityKey);\n          });\n          if (!this.allowEmpty && newValue.length === 0) return;\n        } else {\n          newValue = this.d_value ? [].concat(_toConsumableArray(this.d_value), [optionValue]) : [optionValue];\n        }\n      } else {\n        if (selected && !this.allowEmpty) return;\n        newValue = selected ? null : optionValue;\n      }\n      this.writeValue(newValue, event);\n      this.$emit('change', {\n        event: event,\n        value: newValue\n      });\n    },\n    isSelected: function isSelected(option) {\n      var selected = false;\n      var optionValue = this.getOptionValue(option);\n      if (this.multiple) {\n        if (this.d_value) {\n          var _iterator = _createForOfIteratorHelper(this.d_value),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var val = _step.value;\n              if (equals(val, optionValue, this.equalityKey)) {\n                selected = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      } else {\n        selected = equals(this.d_value, optionValue, this.equalityKey);\n      }\n      return selected;\n    }\n  },\n  computed: {\n    equalityKey: function equalityKey() {\n      return this.optionValue ? null : this.dataKey;\n    },\n    dataP: function dataP() {\n      return cn({\n        invalid: this.$invalid\n      });\n    }\n  },\n  directives: {\n    ripple: Ripple\n  },\n  components: {\n    ToggleButton: ToggleButton\n  }\n};\n\nvar _hoisted_1 = [\"aria-labelledby\", \"data-p\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_ToggleButton = resolveComponent(\"ToggleButton\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    role: \"group\",\n    \"aria-labelledby\": _ctx.ariaLabelledby\n  }, _ctx.ptmi('root'), {\n    \"data-p\": $options.dataP\n  }), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, function (option, index) {\n    return openBlock(), createBlock(_component_ToggleButton, {\n      key: $options.getOptionRenderKey(option),\n      modelValue: $options.isSelected(option),\n      onLabel: $options.getOptionLabel(option),\n      offLabel: $options.getOptionLabel(option),\n      disabled: _ctx.disabled || $options.isOptionDisabled(option),\n      unstyled: _ctx.unstyled,\n      size: _ctx.size,\n      readonly: $options.isOptionReadonly(option),\n      onChange: function onChange($event) {\n        return $options.onOptionSelect($event, option, index);\n      },\n      pt: _ctx.ptm('pcToggleButton')\n    }, createSlots({\n      _: 2\n    }, [_ctx.$slots.option ? {\n      name: \"default\",\n      fn: withCtx(function () {\n        return [renderSlot(_ctx.$slots, \"option\", {\n          option: option,\n          index: index\n        }, function () {\n          return [createElementVNode(\"span\", mergeProps({\n            ref_for: true\n          }, _ctx.ptm('pcToggleButton')['label']), toDisplayString($options.getOptionLabel(option)), 17)];\n        })];\n      }),\n      key: \"0\"\n    } : undefined]), 1032, [\"modelValue\", \"onLabel\", \"offLabel\", \"disabled\", \"unstyled\", \"size\", \"readonly\", \"onChange\", \"pt\"]);\n  }), 128))], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAe,mBAAA,qBAAqB,MAAM,OAAO,cAAqF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","x_google_ignoreList":[0]}