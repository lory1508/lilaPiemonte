{"file":"index.mjs","mappings":";AACA,4CAAoC,MAAA,OAAA,cAAA,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","names":[],"sources":["../../../../../../node_modules/primevue/treeselect/index.mjs?nuxt_component=async&nuxt_component_name=TreeSelect&nuxt_component_export=default"],"sourcesContent":["import { findSingle, isTouchDevice, relativePosition, getOuterWidth, absolutePosition, getFocusableElements, addStyle, focus, find, getLastFocusableElement, getFirstFocusableElement } from '@primeuix/utils/dom';\nimport { isNotEmpty, isEmpty } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport TimesIcon from '@primevue/icons/times';\nimport Chip from 'primevue/chip';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport Tree from 'primevue/tree';\nimport BaseInput from '@primevue/core/baseinput';\nimport TreeSelectStyle from 'primevue/treeselect/style';\nimport { resolveComponent, createElementBlock, openBlock, mergeProps, createElementVNode, renderSlot, createCommentVNode, createVNode, Fragment, createTextVNode, toDisplayString, renderList, normalizeClass, createBlock, resolveDynamicComponent, withCtx, Transition, withModifiers, createSlots } from 'vue';\n\nvar script$1 = {\n  name: 'BaseTreeSelect',\n  \"extends\": BaseInput,\n  props: {\n    options: Array,\n    scrollHeight: {\n      type: String,\n      \"default\": '20rem'\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    tabindex: {\n      type: Number,\n      \"default\": null\n    },\n    selectionMode: {\n      type: String,\n      \"default\": 'single'\n    },\n    selectedItemsLabel: {\n      type: String,\n      \"default\": null\n    },\n    maxSelectedLabels: {\n      type: Number,\n      \"default\": null\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    emptyMessage: {\n      type: String,\n      \"default\": null\n    },\n    display: {\n      type: String,\n      \"default\": 'comma'\n    },\n    metaKeySelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    loadingMode: {\n      type: String,\n      \"default\": 'mask'\n    },\n    showClear: {\n      type: Boolean,\n      \"default\": false\n    },\n    clearIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    filter: {\n      type: Boolean,\n      \"default\": false\n    },\n    filterBy: {\n      type: [String, Function],\n      \"default\": 'label'\n    },\n    filterMode: {\n      type: String,\n      \"default\": 'lenient'\n    },\n    filterPlaceholder: {\n      type: String,\n      \"default\": null\n    },\n    filterLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputProps: {\n      type: null,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelProps: {\n      type: null,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    expandedKeys: {\n      type: null,\n      \"default\": null\n    }\n  },\n  style: TreeSelectStyle,\n  provide: function provide() {\n    return {\n      $pcTreeSelect: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _typeof$1(o) { \"@babel/helpers - typeof\"; return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$1(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), true).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$1(t) { var i = _toPrimitive$1(t, \"string\"); return \"symbol\" == _typeof$1(i) ? i : i + \"\"; }\nfunction _toPrimitive$1(t, r) { if (\"object\" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$1(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar script = {\n  name: 'TreeSelect',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['before-show', 'before-hide', 'change', 'show', 'hide', 'node-select', 'node-unselect', 'node-expand', 'node-collapse', 'focus', 'blur', 'update:expandedKeys'],\n  inject: {\n    $pcFluid: {\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      focused: false,\n      overlayVisible: false,\n      d_expandedKeys: this.expandedKeys || {}\n    };\n  },\n  watch: {\n    modelValue: {\n      handler: function handler() {\n        if (!this.selfChange) {\n          this.updateTreeState();\n        }\n        this.selfChange = false;\n      },\n      immediate: true\n    },\n    options: function options() {\n      this.updateTreeState();\n    },\n    expandedKeys: function expandedKeys(value) {\n      this.d_expandedKeys = value;\n    }\n  },\n  outsideClickListener: null,\n  resizeListener: null,\n  scrollHandler: null,\n  overlay: null,\n  selfChange: false,\n  selfClick: false,\n  beforeUnmount: function beforeUnmount() {\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndex.clear(this.overlay);\n      this.overlay = null;\n    }\n  },\n  mounted: function mounted() {\n    this.updateTreeState();\n  },\n  methods: {\n    show: function show() {\n      this.$emit('before-show');\n      this.overlayVisible = true;\n    },\n    hide: function hide() {\n      this.$emit('before-hide');\n      this.overlayVisible = false;\n      this.$refs.focusInput.focus();\n    },\n    onFocus: function onFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      this.focused = false;\n      this.$emit('blur', event);\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField);\n    },\n    onClick: function onClick(event) {\n      if (this.disabled) {\n        return;\n      }\n      if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n        return;\n      } else if (!this.overlay || !this.overlay.contains(event.target)) {\n        if (this.overlayVisible) this.hide();else this.show();\n        focus(this.$refs.focusInput);\n      }\n    },\n    onClearClick: function onClearClick() {\n      this.onSelectionChange(null);\n    },\n    onSelectionChange: function onSelectionChange(keys) {\n      this.selfChange = true;\n      this.writeValue(keys);\n      this.$emit('change', keys);\n    },\n    onNodeSelect: function onNodeSelect(node) {\n      this.$emit('node-select', node);\n      if (this.selectionMode === 'single') {\n        this.hide();\n      }\n    },\n    onNodeUnselect: function onNodeUnselect(node) {\n      this.$emit('node-unselect', node);\n    },\n    onNodeToggle: function onNodeToggle(keys) {\n      this.d_expandedKeys = keys;\n      this.$emit('update:expandedKeys', this.d_expandedKeys);\n    },\n    getSelectedItemsLabel: function getSelectedItemsLabel() {\n      var pattern = /{(.*?)}/;\n      var selectedItemsLabel = this.selectedItemsLabel || this.$primevue.config.locale.selectionMessage;\n      if (pattern.test(selectedItemsLabel)) {\n        return selectedItemsLabel.replace(selectedItemsLabel.match(pattern)[0], Object.keys(this.d_value).length + '');\n      }\n      return selectedItemsLabel;\n    },\n    onFirstHiddenFocus: function onFirstHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      focus(focusableEl);\n    },\n    onLastHiddenFocus: function onLastHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      focus(focusableEl);\n    },\n    onKeyDown: function onKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'Space':\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      var _this = this;\n      if (this.overlayVisible) return;\n      this.show();\n      this.$nextTick(function () {\n        var treeNodeEl = find(_this.$refs.tree.$el, '[data-pc-section=\"treeitem\"]');\n        var focusedElement = _toConsumableArray(treeNodeEl).find(function (item) {\n          return item.getAttribute('tabindex') === '0';\n        });\n        focus(focusedElement);\n      });\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (this.overlayVisible) {\n        this.hide();\n      } else {\n        this.onArrowDownKey(event);\n      }\n      event.preventDefault();\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      if (this.overlayVisible) {\n        this.hide();\n        event.preventDefault();\n      }\n    },\n    onTabKey: function onTabKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!pressedInInputText) {\n        if (this.overlayVisible && this.hasFocusableElements()) {\n          focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n          event.preventDefault();\n        }\n      }\n    },\n    hasFocusableElements: function hasFocusableElements() {\n      return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      addStyle(el, {\n        position: 'absolute',\n        top: '0'\n      });\n      this.alignOverlay();\n      this.focus();\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.scrollValueInView();\n      this.$emit('show');\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.$emit('hide');\n      this.overlay = null;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    focus: function focus() {\n      var focusableElements = getFocusableElements(this.overlay);\n      if (focusableElements && focusableElements.length > 0) {\n        focusableElements[0].focus();\n      }\n    },\n    alignOverlay: function alignOverlay() {\n      if (this.appendTo === 'self') {\n        relativePosition(this.overlay, this.$el);\n      } else {\n        this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n        absolutePosition(this.overlay, this.$el);\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this2 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this2.overlayVisible && !_this2.selfClick && _this2.isOutsideClicked(event)) {\n            _this2.hide();\n          }\n          _this2.selfClick = false;\n        };\n        document.addEventListener('click', this.outsideClickListener, true);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener, true);\n        this.outsideClickListener = null;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this3 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, function () {\n          if (_this3.overlayVisible) {\n            _this3.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this4 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this4.overlayVisible && !isTouchDevice()) {\n            _this4.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    isOutsideClicked: function isOutsideClicked(event) {\n      return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || this.overlay && this.overlay.contains(event.target));\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n      this.selfClick = true;\n    },\n    onOverlayKeydown: function onOverlayKeydown(event) {\n      if (event.code === 'Escape') this.hide();\n    },\n    fillNodeMap: function fillNodeMap(node, nodeMap) {\n      var _node$children,\n        _this5 = this;\n      nodeMap[node.key] = node;\n      if ((_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {\n        node.children.forEach(function (children) {\n          return _this5.fillNodeMap(children, nodeMap);\n        });\n      }\n    },\n    isSelected: function isSelected(node, keys) {\n      return this.selectionMode === 'checkbox' ? keys[node.key] && keys[node.key].checked : keys[node.key];\n    },\n    updateTreeState: function updateTreeState() {\n      var keys = _objectSpread$1({}, this.d_value);\n      if (keys && this.options) {\n        this.updateTreeBranchState(null, null, keys);\n      }\n    },\n    updateTreeBranchState: function updateTreeBranchState(node, path, keys) {\n      if (node) {\n        if (this.isSelected(node, keys)) {\n          this.expandPath(path);\n          delete keys[node.key];\n        }\n        if (Object.keys(keys).length && node.children) {\n          var _iterator = _createForOfIteratorHelper(node.children),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var childNode = _step.value;\n              path.push(node.key);\n              this.updateTreeBranchState(childNode, path, keys);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      } else {\n        var _iterator2 = _createForOfIteratorHelper(this.options),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _childNode = _step2.value;\n            this.updateTreeBranchState(_childNode, [], keys);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    },\n    expandPath: function expandPath(path) {\n      if (path.length > 0) {\n        var _iterator3 = _createForOfIteratorHelper(path),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var key = _step3.value;\n            this.d_expandedKeys[key] = true;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        this.d_expandedKeys = _objectSpread$1({}, this.d_expandedKeys);\n        this.$emit('update:expandedKeys', this.d_expandedKeys);\n      }\n    },\n    scrollValueInView: function scrollValueInView() {\n      if (this.overlay) {\n        var selectedItem = findSingle(this.overlay, '[data-p-selected=\"true\"]');\n        if (selectedItem) {\n          selectedItem.scrollIntoView({\n            block: 'nearest',\n            inline: 'start'\n          });\n        }\n      }\n    }\n  },\n  computed: {\n    nodeMap: function nodeMap() {\n      var _this$options,\n        _this6 = this;\n      var nodeMap = {};\n      (_this$options = this.options) === null || _this$options === void 0 || _this$options.forEach(function (node) {\n        return _this6.fillNodeMap(node, nodeMap);\n      });\n      return nodeMap;\n    },\n    selectedNodes: function selectedNodes() {\n      var _this7 = this;\n      var selectedNodes = [];\n      if (this.d_value && this.options) {\n        Object.keys(this.d_value).forEach(function (key) {\n          var node = _this7.nodeMap[key];\n          if (_this7.isSelected(node, _this7.d_value)) {\n            selectedNodes.push(node);\n          }\n        });\n      }\n      return selectedNodes;\n    },\n    label: function label() {\n      var value = this.selectedNodes;\n      var label;\n      if (value.length) {\n        if (isNotEmpty(this.maxSelectedLabels) && value.length > this.maxSelectedLabels) {\n          label = this.getSelectedItemsLabel();\n        } else {\n          label = value.map(function (node) {\n            return node.label;\n          }).join(', ');\n        }\n      } else {\n        label = this.placeholder;\n      }\n      return label;\n    },\n    chipSelectedItems: function chipSelectedItems() {\n      return isNotEmpty(this.maxSelectedLabels) && this.d_value && Object.keys(this.d_value).length > this.maxSelectedLabels;\n    },\n    emptyMessageText: function emptyMessageText() {\n      return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n    },\n    emptyValue: function emptyValue() {\n      return !this.$filled;\n    },\n    emptyOptions: function emptyOptions() {\n      return !this.options || this.options.length === 0;\n    },\n    listId: function listId() {\n      return this.$id + '_list';\n    },\n    hasFluid: function hasFluid() {\n      return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n    },\n    isClearIconVisible: function isClearIconVisible() {\n      return this.showClear && this.d_value != null && isNotEmpty(this.options);\n    }\n  },\n  components: {\n    TSTree: Tree,\n    Chip: Chip,\n    Portal: Portal,\n    ChevronDownIcon: ChevronDownIcon,\n    TimesIcon: TimesIcon\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"id\", \"disabled\", \"tabindex\", \"aria-labelledby\", \"aria-label\", \"aria-expanded\", \"aria-controls\"];\nvar _hoisted_2 = {\n  key: 0\n};\nvar _hoisted_3 = [\"aria-expanded\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Chip = resolveComponent(\"Chip\");\n  var _component_TSTree = resolveComponent(\"TSTree\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    onClick: _cache[10] || (_cache[10] = function () {\n      return $options.onClick && $options.onClick.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [createElementVNode(\"div\", mergeProps({\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenInputContainer'), {\n    \"data-p-hidden-accessible\": true\n  }), [createElementVNode(\"input\", mergeProps({\n    ref: \"focusInput\",\n    id: _ctx.inputId,\n    type: \"text\",\n    role: \"combobox\",\n    \"class\": _ctx.inputClass,\n    style: _ctx.inputStyle,\n    readonly: \"\",\n    disabled: _ctx.disabled,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-haspopup\": \"tree\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $options.listId,\n    onFocus: _cache[0] || (_cache[0] = function ($event) {\n      return $options.onFocus($event);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function ($event) {\n      return $options.onBlur($event);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function ($event) {\n      return $options.onKeyDown($event);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.inputProps), _ctx.ptm('hiddenInput'))), null, 16, _hoisted_1)], 16), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('labelContainer')\n  }, _ctx.ptm('labelContainer')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('label')\n  }, _ctx.ptm('label')), [renderSlot(_ctx.$slots, \"value\", {\n    value: $options.selectedNodes,\n    placeholder: _ctx.placeholder\n  }, function () {\n    return [_ctx.display === 'comma' ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [createTextVNode(toDisplayString($options.label || 'empty'), 1)], 64)) : _ctx.display === 'chip' ? (openBlock(), createElementBlock(Fragment, {\n      key: 1\n    }, [$options.chipSelectedItems ? (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString($options.label), 1)) : (openBlock(), createElementBlock(Fragment, {\n      key: 1\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList($options.selectedNodes, function (node) {\n      return openBlock(), createElementBlock(\"div\", mergeProps({\n        key: node.key,\n        \"class\": _ctx.cx('chipItem'),\n        ref_for: true\n      }, _ctx.ptm('chipItem')), [createVNode(_component_Chip, {\n        \"class\": normalizeClass(_ctx.cx('pcChip')),\n        label: node.label,\n        unstyled: _ctx.unstyled,\n        pt: _ctx.ptm('pcChip')\n      }, null, 8, [\"class\", \"label\", \"unstyled\", \"pt\"])], 16);\n    }), 128)), $options.emptyValue ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [createTextVNode(toDisplayString(_ctx.placeholder || 'empty'), 1)], 64)) : createCommentVNode(\"\", true)], 64))], 64)) : createCommentVNode(\"\", true)];\n  })], 16)], 16), $options.isClearIconVisible ? renderSlot(_ctx.$slots, \"clearicon\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('clearIcon')),\n    clearCallback: $options.onClearClick\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon ? 'i' : 'TimesIcon'), mergeProps({\n      ref: \"clearIcon\",\n      \"class\": [_ctx.cx('clearIcon'), _ctx.clearIcon],\n      onClick: $options.onClearClick\n    }, _ctx.ptm('clearIcon'), {\n      \"data-pc-section\": \"clearicon\"\n    }), null, 16, [\"class\", \"onClick\"]))];\n  }) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('dropdown'),\n    role: \"button\",\n    \"aria-haspopup\": \"tree\",\n    \"aria-expanded\": $data.overlayVisible\n  }, _ctx.ptm('dropdown')), [renderSlot(_ctx.$slots, _ctx.$slots.dropdownicon ? 'dropdownicon' : 'triggericon', {\n    \"class\": normalizeClass(_ctx.cx('dropdownIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent('ChevronDownIcon'), mergeProps({\n      \"class\": _ctx.cx('dropdownIcon')\n    }, _ctx.ptm('dropdownIcon')), null, 16, [\"class\"]))];\n  })], 16, _hoisted_3), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            onClick: _cache[8] || (_cache[8] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            \"class\": [_ctx.cx('panel'), _ctx.panelClass],\n            onKeydown: _cache[9] || (_cache[9] = function () {\n              return $options.onOverlayKeydown && $options.onOverlayKeydown.apply($options, arguments);\n            })\n          }, _objectSpread(_objectSpread({}, _ctx.panelProps), _ctx.ptm('panel'))), [createElementVNode(\"span\", mergeProps({\n            ref: \"firstHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[3] || (_cache[3] = function () {\n              return $options.onFirstHiddenFocus && $options.onFirstHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenFirstFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16), renderSlot(_ctx.$slots, \"header\", {\n            value: _ctx.d_value,\n            options: _ctx.options\n          }), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('treeContainer'),\n            style: {\n              'max-height': _ctx.scrollHeight\n            }\n          }, _ctx.ptm('treeContainer')), [createVNode(_component_TSTree, {\n            ref: \"tree\",\n            id: $options.listId,\n            value: _ctx.options,\n            selectionMode: _ctx.selectionMode,\n            loading: _ctx.loading,\n            loadingIcon: _ctx.loadingIcon,\n            loadingMode: _ctx.loadingMode,\n            filter: _ctx.filter,\n            filterBy: _ctx.filterBy,\n            filterMode: _ctx.filterMode,\n            filterPlaceholder: _ctx.filterPlaceholder,\n            filterLocale: _ctx.filterLocale,\n            \"onUpdate:selectionKeys\": $options.onSelectionChange,\n            selectionKeys: _ctx.d_value,\n            expandedKeys: $data.d_expandedKeys,\n            \"onUpdate:expandedKeys\": $options.onNodeToggle,\n            metaKeySelection: _ctx.metaKeySelection,\n            onNodeExpand: _cache[4] || (_cache[4] = function ($event) {\n              return _ctx.$emit('node-expand', $event);\n            }),\n            onNodeCollapse: _cache[5] || (_cache[5] = function ($event) {\n              return _ctx.$emit('node-collapse', $event);\n            }),\n            onNodeSelect: $options.onNodeSelect,\n            onNodeUnselect: $options.onNodeUnselect,\n            onClick: _cache[6] || (_cache[6] = withModifiers(function () {}, [\"stop\"])),\n            level: 0,\n            unstyled: _ctx.unstyled,\n            pt: _ctx.ptm('pcTree')\n          }, createSlots({\n            _: 2\n          }, [_ctx.$slots.option ? {\n            name: \"default\",\n            fn: withCtx(function (optionSlotProps) {\n              return [renderSlot(_ctx.$slots, \"option\", {\n                node: optionSlotProps.node,\n                expanded: optionSlotProps.expanded,\n                selected: optionSlotProps.selected\n              })];\n            }),\n            key: \"0\"\n          } : undefined, _ctx.$slots.itemtoggleicon ? {\n            name: \"toggleicon\",\n            fn: withCtx(function (iconSlotProps) {\n              return [renderSlot(_ctx.$slots, \"itemtoggleicon\", {\n                node: iconSlotProps.node,\n                expanded: iconSlotProps.expanded,\n                \"class\": normalizeClass(iconSlotProps[\"class\"])\n              })];\n            }),\n            key: \"1\"\n          } : _ctx.$slots.itemtogglericon ? {\n            name: \"togglericon\",\n            fn: withCtx(function (iconSlotProps) {\n              return [renderSlot(_ctx.$slots, \"itemtogglericon\", {\n                node: iconSlotProps.node,\n                expanded: iconSlotProps.expanded,\n                \"class\": normalizeClass(iconSlotProps[\"class\"])\n              })];\n            }),\n            key: \"2\"\n          } : undefined, _ctx.$slots.itemcheckboxicon ? {\n            name: \"checkboxicon\",\n            fn: withCtx(function (iconSlotProps) {\n              return [renderSlot(_ctx.$slots, \"itemcheckboxicon\", {\n                checked: iconSlotProps.checked,\n                partialChecked: iconSlotProps.partialChecked,\n                \"class\": normalizeClass(iconSlotProps[\"class\"])\n              })];\n            }),\n            key: \"3\"\n          } : undefined]), 1032, [\"id\", \"value\", \"selectionMode\", \"loading\", \"loadingIcon\", \"loadingMode\", \"filter\", \"filterBy\", \"filterMode\", \"filterPlaceholder\", \"filterLocale\", \"onUpdate:selectionKeys\", \"selectionKeys\", \"expandedKeys\", \"onUpdate:expandedKeys\", \"metaKeySelection\", \"onNodeSelect\", \"onNodeUnselect\", \"unstyled\", \"pt\"]), $options.emptyOptions && !_ctx.loading ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            \"class\": _ctx.cx('emptyMessage')\n          }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n            return [createTextVNode(toDisplayString($options.emptyMessageText), 1)];\n          })], 16)) : createCommentVNode(\"\", true)], 16), renderSlot(_ctx.$slots, \"footer\", {\n            value: _ctx.d_value,\n            options: _ctx.options\n          }), createElementVNode(\"span\", mergeProps({\n            ref: \"lastHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[7] || (_cache[7] = function () {\n              return $options.onLastHiddenFocus && $options.onLastHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenLastFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16)], 16)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}