{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/fieldset/index.mjs?nuxt_component=async&nuxt_component_name=Fieldset&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Ripple from 'primevue/ripple';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport FieldsetStyle from 'primevue/fieldset/style';\nimport { resolveDirective, createElementBlock, openBlock, mergeProps, createElementVNode, createVNode, renderSlot, createCommentVNode, withDirectives, toDisplayString, normalizeClass, createBlock, resolveDynamicComponent, Transition, withCtx, vShow } from 'vue';\n\nvar script$1 = {\n  name: 'BaseFieldset',\n  \"extends\": BaseComponent,\n  props: {\n    legend: String,\n    toggleable: Boolean,\n    collapsed: Boolean,\n    toggleButtonProps: {\n      type: null,\n      \"default\": null\n    }\n  },\n  style: FieldsetStyle,\n  provide: function provide() {\n    return {\n      $pcFieldset: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'Fieldset',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:collapsed', 'toggle'],\n  data: function data() {\n    return {\n      d_collapsed: this.collapsed\n    };\n  },\n  watch: {\n    collapsed: function collapsed(newValue) {\n      this.d_collapsed = newValue;\n    }\n  },\n  methods: {\n    toggle: function toggle(event) {\n      this.d_collapsed = !this.d_collapsed;\n      this.$emit('update:collapsed', this.d_collapsed);\n      this.$emit('toggle', {\n        originalEvent: event,\n        value: this.d_collapsed\n      });\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n        this.toggle(event);\n        event.preventDefault();\n      }\n    }\n  },\n  computed: {\n    buttonAriaLabel: function buttonAriaLabel() {\n      return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.legend;\n    },\n    dataP: function dataP() {\n      return cn({\n        toggleable: this.toggleable\n      });\n    }\n  },\n  directives: {\n    ripple: Ripple\n  },\n  components: {\n    PlusIcon: PlusIcon,\n    MinusIcon: MinusIcon\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"data-p\"];\nvar _hoisted_2 = [\"data-p\"];\nvar _hoisted_3 = [\"id\"];\nvar _hoisted_4 = [\"id\", \"aria-controls\", \"aria-expanded\", \"aria-label\"];\nvar _hoisted_5 = [\"id\", \"aria-labelledby\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"fieldset\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    \"data-p\": $options.dataP\n  }, _ctx.ptmi('root')), [createElementVNode(\"legend\", mergeProps({\n    \"class\": _ctx.cx('legend'),\n    \"data-p\": $options.dataP\n  }, _ctx.ptm('legend')), [renderSlot(_ctx.$slots, \"legend\", {\n    toggleCallback: $options.toggle\n  }, function () {\n    return [!_ctx.toggleable ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 0,\n      id: _ctx.$id + '_header',\n      \"class\": _ctx.cx('legendLabel')\n    }, _ctx.ptm('legendLabel')), toDisplayString(_ctx.legend), 17, _hoisted_3)) : createCommentVNode(\"\", true), _ctx.toggleable ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n      key: 1,\n      id: _ctx.$id + '_header',\n      type: \"button\",\n      \"aria-controls\": _ctx.$id + '_content',\n      \"aria-expanded\": !$data.d_collapsed,\n      \"aria-label\": $options.buttonAriaLabel,\n      \"class\": _ctx.cx('toggleButton'),\n      onClick: _cache[0] || (_cache[0] = function () {\n        return $options.toggle && $options.toggle.apply($options, arguments);\n      }),\n      onKeydown: _cache[1] || (_cache[1] = function () {\n        return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n      })\n    }, _objectSpread(_objectSpread({}, _ctx.toggleButtonProps), _ctx.ptm('toggleButton'))), [renderSlot(_ctx.$slots, _ctx.$slots.toggleicon ? 'toggleicon' : 'togglericon', {\n      collapsed: $data.d_collapsed,\n      \"class\": normalizeClass(_ctx.cx('toggleIcon'))\n    }, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent($data.d_collapsed ? 'PlusIcon' : 'MinusIcon'), mergeProps({\n        \"class\": _ctx.cx('toggleIcon')\n      }, _ctx.ptm('toggleIcon')), null, 16, [\"class\"]))];\n    }), createElementVNode(\"span\", mergeProps({\n      \"class\": _ctx.cx('legendLabel')\n    }, _ctx.ptm('legendLabel')), toDisplayString(_ctx.legend), 17)], 16, _hoisted_4)), [[_directive_ripple]]) : createCommentVNode(\"\", true)];\n  })], 16, _hoisted_2), createVNode(Transition, mergeProps({\n    name: \"p-toggleable-content\"\n  }, _ctx.ptm('transition')), {\n    \"default\": withCtx(function () {\n      return [withDirectives(createElementVNode(\"div\", mergeProps({\n        id: _ctx.$id + '_content',\n        \"class\": _ctx.cx('contentContainer'),\n        role: \"region\",\n        \"aria-labelledby\": _ctx.$id + '_header'\n      }, _ctx.ptm('contentContainer')), [createElementVNode(\"div\", mergeProps({\n        \"class\": _ctx.cx('content')\n      }, _ctx.ptm('content')), [renderSlot(_ctx.$slots, \"default\")], 16)], 16, _hoisted_5), [[vShow, !$data.d_collapsed]])];\n    }),\n    _: 3\n  }, 16)], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAAe,eAAA,qBAAqB,MAAM,OAAO,cAAiF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","x_google_ignoreList":[0]}