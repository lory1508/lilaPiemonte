{"file":"index.mjs","mappings":";AACA,MAAe,cAAA,qBAAqB,MAAM,OAAO,cAAgF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","names":[],"sources":["../../../../../../node_modules/primevue/tabview/index.mjs?nuxt_component=async&nuxt_component_name=TabView&nuxt_component_export=default"],"sourcesContent":["import { getWidth, getOffset, focus, findSingle, getAttribute } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps, resolveDirective, createElementBlock, openBlock, createElementVNode, withDirectives, createCommentVNode, renderSlot, createBlock, resolveDynamicComponent, Fragment, renderList, toDisplayString, vShow } from 'vue';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TabViewStyle from 'primevue/tabview/style';\n\nvar script$1 = {\n  name: 'BaseTabView',\n  \"extends\": BaseComponent,\n  props: {\n    activeIndex: {\n      type: Number,\n      \"default\": 0\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    scrollable: {\n      type: Boolean,\n      \"default\": false\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    prevButtonProps: {\n      type: null,\n      \"default\": null\n    },\n    nextButtonProps: {\n      type: null,\n      \"default\": null\n    },\n    prevIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    nextIcon: {\n      type: String,\n      \"default\": undefined\n    }\n  },\n  style: TabViewStyle,\n  provide: function provide() {\n    return {\n      $pcTabs: undefined,\n      // Backwards compatible to prevent <TabPanel> component from breaking\n      $pcTabView: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'TabView',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:activeIndex', 'tab-change', 'tab-click'],\n  data: function data() {\n    return {\n      d_activeIndex: this.activeIndex,\n      isPrevButtonDisabled: true,\n      isNextButtonDisabled: false\n    };\n  },\n  watch: {\n    activeIndex: function activeIndex(newValue) {\n      this.d_activeIndex = newValue;\n      this.scrollInView({\n        index: newValue\n      });\n    }\n  },\n  mounted: function mounted() {\n    console.warn('Deprecated since v4. Use Tabs component instead.');\n    this.updateInkBar();\n    this.scrollable && this.updateButtonState();\n  },\n  updated: function updated() {\n    this.updateInkBar();\n    this.scrollable && this.updateButtonState();\n  },\n  methods: {\n    isTabPanel: function isTabPanel(child) {\n      return child.type.name === 'TabPanel';\n    },\n    isTabActive: function isTabActive(index) {\n      return this.d_activeIndex === index;\n    },\n    getTabProp: function getTabProp(tab, name) {\n      return tab.props ? tab.props[name] : undefined;\n    },\n    getKey: function getKey(tab, index) {\n      return this.getTabProp(tab, 'header') || index;\n    },\n    getTabHeaderActionId: function getTabHeaderActionId(index) {\n      return \"\".concat(this.$id, \"_\").concat(index, \"_header_action\");\n    },\n    getTabContentId: function getTabContentId(index) {\n      return \"\".concat(this.$id, \"_\").concat(index, \"_content\");\n    },\n    getTabPT: function getTabPT(tab, key, index) {\n      var count = this.tabs.length;\n      var tabMetaData = {\n        props: tab.props,\n        parent: {\n          instance: this,\n          props: this.$props,\n          state: this.$data\n        },\n        context: {\n          index: index,\n          count: count,\n          first: index === 0,\n          last: index === count - 1,\n          active: this.isTabActive(index)\n        }\n      };\n      return mergeProps(this.ptm(\"tabpanel.\".concat(key), {\n        tabpanel: tabMetaData\n      }), this.ptm(\"tabpanel.\".concat(key), tabMetaData), this.ptmo(this.getTabProp(tab, 'pt'), key, tabMetaData));\n    },\n    onScroll: function onScroll(event) {\n      this.scrollable && this.updateButtonState();\n      event.preventDefault();\n    },\n    onPrevButtonClick: function onPrevButtonClick() {\n      var content = this.$refs.content;\n      var width = getWidth(content);\n      var pos = content.scrollLeft - width;\n      content.scrollLeft = pos <= 0 ? 0 : pos;\n    },\n    onNextButtonClick: function onNextButtonClick() {\n      var content = this.$refs.content;\n      var width = getWidth(content) - this.getVisibleButtonWidths();\n      var pos = content.scrollLeft + width;\n      var lastPos = content.scrollWidth - width;\n      content.scrollLeft = pos >= lastPos ? lastPos : pos;\n    },\n    onTabClick: function onTabClick(event, tab, index) {\n      this.changeActiveIndex(event, tab, index);\n      this.$emit('tab-click', {\n        originalEvent: event,\n        index: index\n      });\n    },\n    onTabKeyDown: function onTabKeyDown(event, tab, index) {\n      switch (event.code) {\n        case 'ArrowLeft':\n          this.onTabArrowLeftKey(event);\n          break;\n        case 'ArrowRight':\n          this.onTabArrowRightKey(event);\n          break;\n        case 'Home':\n          this.onTabHomeKey(event);\n          break;\n        case 'End':\n          this.onTabEndKey(event);\n          break;\n        case 'PageDown':\n          this.onPageDownKey(event);\n          break;\n        case 'PageUp':\n          this.onPageUpKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          this.onTabEnterKey(event, tab, index);\n          break;\n      }\n    },\n    onTabArrowRightKey: function onTabArrowRightKey(event) {\n      var nextHeaderAction = this.findNextHeaderAction(event.target.parentElement);\n      nextHeaderAction ? this.changeFocusedTab(event, nextHeaderAction) : this.onTabHomeKey(event);\n      event.preventDefault();\n    },\n    onTabArrowLeftKey: function onTabArrowLeftKey(event) {\n      var prevHeaderAction = this.findPrevHeaderAction(event.target.parentElement);\n      prevHeaderAction ? this.changeFocusedTab(event, prevHeaderAction) : this.onTabEndKey(event);\n      event.preventDefault();\n    },\n    onTabHomeKey: function onTabHomeKey(event) {\n      var firstHeaderAction = this.findFirstHeaderAction();\n      this.changeFocusedTab(event, firstHeaderAction);\n      event.preventDefault();\n    },\n    onTabEndKey: function onTabEndKey(event) {\n      var lastHeaderAction = this.findLastHeaderAction();\n      this.changeFocusedTab(event, lastHeaderAction);\n      event.preventDefault();\n    },\n    onPageDownKey: function onPageDownKey(event) {\n      this.scrollInView({\n        index: this.$refs.nav.children.length - 2\n      });\n      event.preventDefault();\n    },\n    onPageUpKey: function onPageUpKey(event) {\n      this.scrollInView({\n        index: 0\n      });\n      event.preventDefault();\n    },\n    onTabEnterKey: function onTabEnterKey(event, tab, index) {\n      this.changeActiveIndex(event, tab, index);\n      event.preventDefault();\n    },\n    findNextHeaderAction: function findNextHeaderAction(tabElement) {\n      var selfCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var headerElement = selfCheck ? tabElement : tabElement.nextElementSibling;\n      return headerElement ? getAttribute(headerElement, 'data-p-disabled') || getAttribute(headerElement, 'data-pc-section') === 'inkbar' ? this.findNextHeaderAction(headerElement) : findSingle(headerElement, '[data-pc-section=\"headeraction\"]') : null;\n    },\n    findPrevHeaderAction: function findPrevHeaderAction(tabElement) {\n      var selfCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var headerElement = selfCheck ? tabElement : tabElement.previousElementSibling;\n      return headerElement ? getAttribute(headerElement, 'data-p-disabled') || getAttribute(headerElement, 'data-pc-section') === 'inkbar' ? this.findPrevHeaderAction(headerElement) : findSingle(headerElement, '[data-pc-section=\"headeraction\"]') : null;\n    },\n    findFirstHeaderAction: function findFirstHeaderAction() {\n      return this.findNextHeaderAction(this.$refs.nav.firstElementChild, true);\n    },\n    findLastHeaderAction: function findLastHeaderAction() {\n      return this.findPrevHeaderAction(this.$refs.nav.lastElementChild, true);\n    },\n    changeActiveIndex: function changeActiveIndex(event, tab, index) {\n      if (!this.getTabProp(tab, 'disabled') && this.d_activeIndex !== index) {\n        this.d_activeIndex = index;\n        this.$emit('update:activeIndex', index);\n        this.$emit('tab-change', {\n          originalEvent: event,\n          index: index\n        });\n        this.scrollInView({\n          index: index\n        });\n      }\n    },\n    changeFocusedTab: function changeFocusedTab(event, element) {\n      if (element) {\n        focus(element);\n        this.scrollInView({\n          element: element\n        });\n        if (this.selectOnFocus) {\n          var index = parseInt(element.parentElement.dataset.pcIndex, 10);\n          var tab = this.tabs[index];\n          this.changeActiveIndex(event, tab, index);\n        }\n      }\n    },\n    scrollInView: function scrollInView(_ref) {\n      var element = _ref.element,\n        _ref$index = _ref.index,\n        index = _ref$index === void 0 ? -1 : _ref$index;\n      var currentElement = element || this.$refs.nav.children[index];\n      if (currentElement) {\n        currentElement.scrollIntoView && currentElement.scrollIntoView({\n          block: 'nearest'\n        });\n      }\n    },\n    updateInkBar: function updateInkBar() {\n      var tabHeader = this.$refs.nav.children[this.d_activeIndex];\n      this.$refs.inkbar.style.width = getWidth(tabHeader) + 'px';\n      this.$refs.inkbar.style.left = getOffset(tabHeader).left - getOffset(this.$refs.nav).left + 'px';\n    },\n    updateButtonState: function updateButtonState() {\n      var content = this.$refs.content;\n      var scrollLeft = content.scrollLeft,\n        scrollWidth = content.scrollWidth;\n      var width = getWidth(content);\n      this.isPrevButtonDisabled = scrollLeft === 0;\n      this.isNextButtonDisabled = parseInt(scrollLeft) === scrollWidth - width;\n    },\n    getVisibleButtonWidths: function getVisibleButtonWidths() {\n      var _this$$refs = this.$refs,\n        prevBtn = _this$$refs.prevBtn,\n        nextBtn = _this$$refs.nextBtn;\n      return [prevBtn, nextBtn].reduce(function (acc, el) {\n        return el ? acc + getWidth(el) : acc;\n      }, 0);\n    }\n  },\n  computed: {\n    tabs: function tabs() {\n      var _this = this;\n      return this.$slots[\"default\"]().reduce(function (tabs, child) {\n        if (_this.isTabPanel(child)) {\n          tabs.push(child);\n        } else if (child.children && child.children instanceof Array) {\n          child.children.forEach(function (nestedChild) {\n            if (_this.isTabPanel(nestedChild)) {\n              tabs.push(nestedChild);\n            }\n          });\n        }\n        return tabs;\n      }, []);\n    },\n    prevButtonAriaLabel: function prevButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n    },\n    nextButtonAriaLabel: function nextButtonAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n    }\n  },\n  directives: {\n    ripple: Ripple\n  },\n  components: {\n    ChevronLeftIcon: ChevronLeftIcon,\n    ChevronRightIcon: ChevronRightIcon\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"tabindex\", \"aria-label\"];\nvar _hoisted_2 = [\"data-p-active\", \"data-p-disabled\", \"data-pc-index\"];\nvar _hoisted_3 = [\"id\", \"tabindex\", \"aria-disabled\", \"aria-selected\", \"aria-controls\", \"onClick\", \"onKeydown\"];\nvar _hoisted_4 = [\"tabindex\", \"aria-label\"];\nvar _hoisted_5 = [\"id\", \"aria-labelledby\", \"data-pc-index\", \"data-p-active\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root'),\n    role: \"tablist\"\n  }, _ctx.ptmi('root')), [createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('navContainer')\n  }, _ctx.ptm('navContainer')), [_ctx.scrollable && !$data.isPrevButtonDisabled ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 0,\n    ref: \"prevBtn\",\n    type: \"button\",\n    \"class\": _ctx.cx('prevButton'),\n    tabindex: _ctx.tabindex,\n    \"aria-label\": $options.prevButtonAriaLabel,\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.onPrevButtonClick && $options.onPrevButtonClick.apply($options, arguments);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.prevButtonProps), _ctx.ptm('prevButton')), {\n    \"data-pc-group-section\": \"navbutton\"\n  }), [renderSlot(_ctx.$slots, \"previcon\", {}, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prevIcon ? 'span' : 'ChevronLeftIcon'), mergeProps({\n      \"aria-hidden\": \"true\",\n      \"class\": _ctx.prevIcon\n    }, _ctx.ptm('prevIcon')), null, 16, [\"class\"]))];\n  })], 16, _hoisted_1)), [[_directive_ripple]]) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    ref: \"content\",\n    \"class\": _ctx.cx('navContent'),\n    onScroll: _cache[1] || (_cache[1] = function () {\n      return $options.onScroll && $options.onScroll.apply($options, arguments);\n    })\n  }, _ctx.ptm('navContent')), [createElementVNode(\"ul\", mergeProps({\n    ref: \"nav\",\n    \"class\": _ctx.cx('nav')\n  }, _ctx.ptm('nav')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.tabs, function (tab, index) {\n    return openBlock(), createElementBlock(\"li\", mergeProps({\n      key: $options.getKey(tab, index),\n      style: $options.getTabProp(tab, 'headerStyle'),\n      \"class\": _ctx.cx('tab.header', {\n        tab: tab,\n        index: index\n      }),\n      role: \"presentation\",\n      ref_for: true\n    }, _objectSpread(_objectSpread(_objectSpread({}, $options.getTabProp(tab, 'headerProps')), $options.getTabPT(tab, 'root', index)), $options.getTabPT(tab, 'header', index)), {\n      \"data-pc-name\": \"tabpanel\",\n      \"data-p-active\": $data.d_activeIndex === index,\n      \"data-p-disabled\": $options.getTabProp(tab, 'disabled'),\n      \"data-pc-index\": index\n    }), [withDirectives((openBlock(), createElementBlock(\"a\", mergeProps({\n      id: $options.getTabHeaderActionId(index),\n      \"class\": _ctx.cx('tab.headerAction'),\n      tabindex: $options.getTabProp(tab, 'disabled') || !$options.isTabActive(index) ? -1 : _ctx.tabindex,\n      role: \"tab\",\n      \"aria-disabled\": $options.getTabProp(tab, 'disabled'),\n      \"aria-selected\": $options.isTabActive(index),\n      \"aria-controls\": $options.getTabContentId(index),\n      onClick: function onClick($event) {\n        return $options.onTabClick($event, tab, index);\n      },\n      onKeydown: function onKeydown($event) {\n        return $options.onTabKeyDown($event, tab, index);\n      },\n      ref_for: true\n    }, _objectSpread(_objectSpread({}, $options.getTabProp(tab, 'headerActionProps')), $options.getTabPT(tab, 'headerAction', index))), [tab.props && tab.props.header ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 0,\n      \"class\": _ctx.cx('tab.headerTitle'),\n      ref_for: true\n    }, $options.getTabPT(tab, 'headerTitle', index)), toDisplayString(tab.props.header), 17)) : createCommentVNode(\"\", true), tab.children && tab.children.header ? (openBlock(), createBlock(resolveDynamicComponent(tab.children.header), {\n      key: 1\n    })) : createCommentVNode(\"\", true)], 16, _hoisted_3)), [[_directive_ripple]])], 16, _hoisted_2);\n  }), 128)), createElementVNode(\"li\", mergeProps({\n    ref: \"inkbar\",\n    \"class\": _ctx.cx('inkbar'),\n    role: \"presentation\",\n    \"aria-hidden\": \"true\"\n  }, _ctx.ptm('inkbar')), null, 16)], 16)], 16), _ctx.scrollable && !$data.isNextButtonDisabled ? withDirectives((openBlock(), createElementBlock(\"button\", mergeProps({\n    key: 1,\n    ref: \"nextBtn\",\n    type: \"button\",\n    \"class\": _ctx.cx('nextButton'),\n    tabindex: _ctx.tabindex,\n    \"aria-label\": $options.nextButtonAriaLabel,\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.onNextButtonClick && $options.onNextButtonClick.apply($options, arguments);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.nextButtonProps), _ctx.ptm('nextButton')), {\n    \"data-pc-group-section\": \"navbutton\"\n  }), [renderSlot(_ctx.$slots, \"nexticon\", {}, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.nextIcon ? 'span' : 'ChevronRightIcon'), mergeProps({\n      \"aria-hidden\": \"true\",\n      \"class\": _ctx.nextIcon\n    }, _ctx.ptm('nextIcon')), null, 16, [\"class\"]))];\n  })], 16, _hoisted_4)), [[_directive_ripple]]) : createCommentVNode(\"\", true)], 16), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('panelContainer')\n  }, _ctx.ptm('panelContainer')), [(openBlock(true), createElementBlock(Fragment, null, renderList($options.tabs, function (tab, index) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: $options.getKey(tab, index)\n    }, [(_ctx.lazy ? $options.isTabActive(index) : true) ? withDirectives((openBlock(), createElementBlock(\"div\", mergeProps({\n      key: 0,\n      id: $options.getTabContentId(index),\n      style: $options.getTabProp(tab, 'contentStyle'),\n      \"class\": _ctx.cx('tab.content', {\n        tab: tab\n      }),\n      role: \"tabpanel\",\n      \"aria-labelledby\": $options.getTabHeaderActionId(index),\n      ref_for: true\n    }, _objectSpread(_objectSpread(_objectSpread({}, $options.getTabProp(tab, 'contentProps')), $options.getTabPT(tab, 'root', index)), $options.getTabPT(tab, 'content', index)), {\n      \"data-pc-name\": \"tabpanel\",\n      \"data-pc-index\": index,\n      \"data-p-active\": $data.d_activeIndex === index\n    }), [(openBlock(), createBlock(resolveDynamicComponent(tab)))], 16, _hoisted_5)), [[vShow, _ctx.lazy ? true : $options.isTabActive(index)]]) : createCommentVNode(\"\", true)], 64);\n  }), 128))], 16)], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}