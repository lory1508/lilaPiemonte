{"file":"index.mjs","mappings":";AACA,MAAe,oBAAA,qBAAqB,MAAM,OAAO,cAAsF,EAAE,KAAK,OAAK,EAAE,SAAS,KAAK,EAAE,WAAW,CAAC,CAAC;","names":[],"sources":["../../../../../../node_modules/primevue/splitterpanel/index.mjs?nuxt_component=async&nuxt_component_name=SplitterPanel&nuxt_component_export=default"],"sourcesContent":["import BaseComponent from '@primevue/core/basecomponent';\nimport SplitterPanelStyle from 'primevue/splitterpanel/style';\nimport { createElementBlock, openBlock, mergeProps, renderSlot } from 'vue';\n\nvar script$1 = {\n  name: 'BaseSplitterPanel',\n  \"extends\": BaseComponent,\n  props: {\n    size: {\n      type: Number,\n      \"default\": null\n    },\n    minSize: {\n      type: Number,\n      \"default\": null\n    }\n  },\n  style: SplitterPanelStyle,\n  provide: function provide() {\n    return {\n      $pcSplitterPanel: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'SplitterPanel',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  data: function data() {\n    return {\n      nestedState: null\n    };\n  },\n  computed: {\n    isNested: function isNested() {\n      var _this = this;\n      return this.$slots[\"default\"]().some(function (child) {\n        _this.nestedState = child.type.name === 'Splitter' ? true : null;\n        return _this.nestedState;\n      });\n    },\n    getPTOptions: function getPTOptions() {\n      return {\n        context: {\n          nested: this.isNested\n        }\n      };\n    }\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root', $options.getPTOptions)), [renderSlot(_ctx.$slots, \"default\")], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}