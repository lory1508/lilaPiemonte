{"file":"index.mjs","mappings":";AACA,8CAA4B,MAAA,OAAiC,cAAiD,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","names":[],"sources":["../../../../../../node_modules/primevue/autocomplete/index.mjs?nuxt_component=async&nuxt_component_name=AutoComplete&nuxt_component_export=default"],"sourcesContent":["import { cn } from '@primeuix/utils';\nimport { findSingle, focus, isTouchDevice, relativePosition, getOuterWidth, absolutePosition, addStyle } from '@primeuix/utils/dom';\nimport { isNotEmpty, findLastIndex, equals, isEmpty, resolveFieldData } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseInput from '@primevue/core/baseinput';\nimport AutoCompleteStyle from 'primevue/autocomplete/style';\nimport { resolveComponent, resolveDirective, createElementBlock, openBlock, mergeProps, createBlock, createCommentVNode, renderSlot, createVNode, normalizeStyle, normalizeClass, createElementVNode, Fragment, renderList, withCtx, resolveDynamicComponent, toDisplayString, Transition, createSlots, withDirectives, createTextVNode } from 'vue';\n\nvar script$1 = {\n  name: 'BaseAutoComplete',\n  \"extends\": BaseInput,\n  props: {\n    suggestions: {\n      type: Array,\n      \"default\": null\n    },\n    optionLabel: null,\n    optionDisabled: null,\n    optionGroupLabel: null,\n    optionGroupChildren: null,\n    scrollHeight: {\n      type: String,\n      \"default\": '14rem'\n    },\n    dropdown: {\n      type: Boolean,\n      \"default\": false\n    },\n    dropdownMode: {\n      type: String,\n      \"default\": 'blank'\n    },\n    multiple: {\n      type: Boolean,\n      \"default\": false\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    dataKey: {\n      type: String,\n      \"default\": null\n    },\n    minLength: {\n      type: Number,\n      \"default\": 1\n    },\n    delay: {\n      type: Number,\n      \"default\": 300\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    forceSelection: {\n      type: Boolean,\n      \"default\": false\n    },\n    completeOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelStyle: {\n      type: Object,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    overlayStyle: {\n      type: Object,\n      \"default\": null\n    },\n    overlayClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    dropdownIcon: {\n      type: String,\n      \"default\": null\n    },\n    dropdownClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    loader: {\n      type: String,\n      \"default\": null\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": null\n    },\n    removeTokenIcon: {\n      type: String,\n      \"default\": null\n    },\n    chipIcon: {\n      type: String,\n      \"default\": null\n    },\n    virtualScrollerOptions: {\n      type: Object,\n      \"default\": null\n    },\n    autoOptionFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    focusOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    searchLocale: {\n      type: String,\n      \"default\": undefined\n    },\n    searchMessage: {\n      type: String,\n      \"default\": null\n    },\n    selectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySelectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySearchMessage: {\n      type: String,\n      \"default\": null\n    },\n    showEmptyMessage: {\n      type: Boolean,\n      \"default\": true\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    typeahead: {\n      type: Boolean,\n      \"default\": true\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: AutoCompleteStyle,\n  provide: function provide() {\n    return {\n      $pcAutoComplete: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey$1(t) { var i = _toPrimitive$1(t, \"string\"); return \"symbol\" == _typeof$1(i) ? i : i + \"\"; }\nfunction _toPrimitive$1(t, r) { if (\"object\" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof$1(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _typeof$1(o) { \"@babel/helpers - typeof\"; return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof$1(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar script = {\n  name: 'AutoComplete',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n  inject: {\n    $pcFluid: {\n      \"default\": null\n    }\n  },\n  outsideClickListener: null,\n  resizeListener: null,\n  scrollHandler: null,\n  overlay: null,\n  virtualScroller: null,\n  searchTimeout: null,\n  dirty: false,\n  startRangeIndex: -1,\n  data: function data() {\n    return {\n      clicked: false,\n      focused: false,\n      focusedOptionIndex: -1,\n      focusedMultipleOptionIndex: -1,\n      overlayVisible: false,\n      searching: false\n    };\n  },\n  watch: {\n    suggestions: function suggestions() {\n      if (this.searching) {\n        this.show();\n        this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n        this.searching = false;\n        !this.showEmptyMessage && this.visibleOptions.length === 0 && this.hide();\n      }\n      this.autoUpdateModel();\n    }\n  },\n  mounted: function mounted() {\n    this.autoUpdateModel();\n  },\n  updated: function updated() {\n    if (this.overlayVisible) {\n      this.alignOverlay();\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndex.clear(this.overlay);\n      this.overlay = null;\n    }\n  },\n  methods: {\n    getOptionIndex: function getOptionIndex(index, fn) {\n      return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return option; // TODO: The 'optionValue' properties can be added.\n    },\n    getOptionRenderKey: function getOptionRenderKey(option, index) {\n      return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n    },\n    getPTOptions: function getPTOptions(option, itemOptions, index, key) {\n      return this.ptm(key, {\n        context: {\n          option: option,\n          index: index,\n          selected: this.isSelected(option),\n          focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n          disabled: this.isOptionDisabled(option)\n        }\n      });\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n    },\n    isOptionGroup: function isOptionGroup(option) {\n      return this.optionGroupLabel && option.optionGroup && option.group;\n    },\n    getOptionGroupLabel: function getOptionGroupLabel(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupLabel);\n    },\n    getOptionGroupChildren: function getOptionGroupChildren(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupChildren);\n    },\n    getAriaPosInset: function getAriaPosInset(index) {\n      var _this = this;\n      return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter(function (option) {\n        return _this.isOptionGroup(option);\n      }).length : index) + 1;\n    },\n    show: function show(isFocus) {\n      this.$emit('before-show');\n      this.dirty = true;\n      this.overlayVisible = true;\n      this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n      isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n    },\n    hide: function hide(isFocus) {\n      var _this2 = this;\n      var _hide = function _hide() {\n        var _this2$$refs$focusInp;\n        _this2.$emit('before-hide');\n        _this2.dirty = isFocus;\n        _this2.overlayVisible = false;\n        _this2.clicked = false;\n        _this2.focusedOptionIndex = -1;\n        isFocus && focus(_this2.multiple ? _this2.$refs.focusInput : (_this2$$refs$focusInp = _this2.$refs.focusInput) === null || _this2$$refs$focusInp === void 0 ? void 0 : _this2$$refs$focusInp.$el);\n      };\n      setTimeout(function () {\n        _hide();\n      }, 0); // For ScreenReaders\n    },\n    onFocus: function onFocus(event) {\n      if (this.disabled) {\n        // For ScreenReaders\n        return;\n      }\n      if (!this.dirty && this.completeOnFocus) {\n        this.search(event, event.target.value, 'focus');\n      }\n      this.dirty = true;\n      this.focused = true;\n      if (this.overlayVisible) {\n        this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n        this.scrollInView(this.focusedOptionIndex);\n      }\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      var _this$formField$onBlu, _this$formField;\n      this.dirty = false;\n      this.focused = false;\n      this.focusedOptionIndex = -1;\n      this.$emit('blur', event);\n      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField);\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        return;\n      }\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event);\n          break;\n        case 'ArrowLeft':\n          this.onArrowLeftKey(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKey(event);\n          break;\n        case 'Home':\n          this.onHomeKey(event);\n          break;\n        case 'End':\n          this.onEndKey(event);\n          break;\n        case 'PageDown':\n          this.onPageDownKey(event);\n          break;\n        case 'PageUp':\n          this.onPageUpKey(event);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Space':\n          this.onSpaceKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.onShiftKey(event);\n          break;\n        case 'Backspace':\n          this.onBackspaceKey(event);\n          break;\n      }\n      this.clicked = false;\n    },\n    onInput: function onInput(event) {\n      var _this3 = this;\n      if (this.typeahead) {\n        if (this.searchTimeout) {\n          clearTimeout(this.searchTimeout);\n        }\n        var query = event.target.value;\n        if (!this.multiple) {\n          this.updateModel(event, query);\n        }\n        if (query.length === 0) {\n          this.hide();\n          this.$emit('clear');\n        } else {\n          if (query.length >= this.minLength) {\n            this.focusedOptionIndex = -1;\n            this.searchTimeout = setTimeout(function () {\n              _this3.search(event, query, 'input');\n            }, this.delay);\n          } else {\n            this.hide();\n          }\n        }\n      }\n    },\n    onChange: function onChange(event) {\n      var _this4 = this;\n      if (this.forceSelection) {\n        var valid = false;\n\n        // when forceSelection is on, prevent called twice onOptionSelect()\n        if (this.visibleOptions && !this.multiple) {\n          var _this$$refs$focusInpu;\n          var value = this.multiple ? this.$refs.focusInput.value : (_this$$refs$focusInpu = this.$refs.focusInput) === null || _this$$refs$focusInpu === void 0 || (_this$$refs$focusInpu = _this$$refs$focusInpu.$el) === null || _this$$refs$focusInpu === void 0 ? void 0 : _this$$refs$focusInpu.value;\n          var matchedValue = this.visibleOptions.find(function (option) {\n            return _this4.isOptionMatched(option, value || '');\n          });\n          if (matchedValue !== undefined) {\n            valid = true;\n            !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n          }\n        }\n        if (!valid) {\n          if (this.multiple) {\n            this.$refs.focusInput.value = '';\n          } else {\n            var _this$$refs$focusInpu2;\n            var inputEl = (_this$$refs$focusInpu2 = this.$refs.focusInput) === null || _this$$refs$focusInpu2 === void 0 ? void 0 : _this$$refs$focusInpu2.$el;\n            inputEl && (inputEl.value = '');\n          }\n          this.$emit('clear');\n          !this.multiple && this.updateModel(event, null);\n        }\n      }\n    },\n    onMultipleContainerFocus: function onMultipleContainerFocus() {\n      if (this.disabled) {\n        // For ScreenReaders\n        return;\n      }\n      this.focused = true;\n    },\n    onMultipleContainerBlur: function onMultipleContainerBlur() {\n      this.focusedMultipleOptionIndex = -1;\n      this.focused = false;\n    },\n    onMultipleContainerKeyDown: function onMultipleContainerKeyDown(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        return;\n      }\n      switch (event.code) {\n        case 'ArrowLeft':\n          this.onArrowLeftKeyOnMultiple(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKeyOnMultiple(event);\n          break;\n        case 'Backspace':\n          this.onBackspaceKeyOnMultiple(event);\n          break;\n      }\n    },\n    onContainerClick: function onContainerClick(event) {\n      this.clicked = true;\n      if (this.disabled || this.searching || this.loading || this.isDropdownClicked(event)) {\n        return;\n      }\n      if (!this.overlay || !this.overlay.contains(event.target)) {\n        focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n      }\n    },\n    onDropdownClick: function onDropdownClick(event) {\n      var query = undefined;\n      if (this.overlayVisible) {\n        this.hide(true);\n      } else {\n        var target = this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el;\n        focus(target);\n        query = target.value;\n        if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n      }\n      this.$emit('dropdown-click', {\n        originalEvent: event,\n        query: query\n      });\n    },\n    onOptionSelect: function onOptionSelect(event, option) {\n      var isHide = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var value = this.getOptionValue(option);\n      if (this.multiple) {\n        this.$refs.focusInput.value = '';\n        if (!this.isSelected(option)) {\n          this.updateModel(event, [].concat(_toConsumableArray(this.d_value || []), [value]));\n        }\n      } else {\n        this.updateModel(event, value);\n      }\n      this.$emit('item-select', {\n        originalEvent: event,\n        value: option\n      });\n      this.$emit('option-select', {\n        originalEvent: event,\n        value: option\n      });\n      isHide && this.hide(true);\n    },\n    onOptionMouseMove: function onOptionMouseMove(event, index) {\n      if (this.focusOnHover) {\n        this.changeFocusedOptionIndex(event, index);\n      }\n    },\n    onOptionSelectRange: function onOptionSelectRange(event) {\n      var _this5 = this;\n      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n      end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n      if (start !== -1 && end !== -1) {\n        var rangeStart = Math.min(start, end);\n        var rangeEnd = Math.max(start, end);\n        var value = this.visibleOptions.slice(rangeStart, rangeEnd + 1).filter(function (option) {\n          return _this5.isValidOption(option);\n        }).map(function (option) {\n          return _this5.getOptionValue(option);\n        });\n        this.updateModel(event, value);\n      }\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n    },\n    onOverlayKeyDown: function onOverlayKeyDown(event) {\n      switch (event.code) {\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      if (!this.overlayVisible) {\n        return;\n      }\n      var optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n      if (this.multiple && event.shiftKey) {\n        this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n      }\n      this.changeFocusedOptionIndex(event, optionIndex);\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      if (!this.overlayVisible) {\n        return;\n      }\n      if (event.altKey) {\n        if (this.focusedOptionIndex !== -1) {\n          this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n        }\n        this.overlayVisible && this.hide();\n        event.preventDefault();\n      } else {\n        var optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n        if (this.multiple && event.shiftKey) {\n          this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n        }\n        this.changeFocusedOptionIndex(event, optionIndex);\n        event.preventDefault();\n      }\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var target = event.currentTarget;\n      this.focusedOptionIndex = -1;\n      if (this.multiple) {\n        if (isEmpty(target.value) && this.$filled) {\n          focus(this.$refs.multiContainer);\n          this.focusedMultipleOptionIndex = this.d_value.length;\n        } else {\n          event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n        }\n      }\n    },\n    onArrowRightKey: function onArrowRightKey(event) {\n      this.focusedOptionIndex = -1;\n      this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n    },\n    onHomeKey: function onHomeKey(event) {\n      var currentTarget = event.currentTarget;\n      var len = currentTarget.value.length;\n      var metaKey = event.metaKey || event.ctrlKey;\n      var optionIndex = this.findFirstOptionIndex();\n      if (this.multiple && event.shiftKey && metaKey) {\n        this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n      }\n      currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n      this.focusedOptionIndex = -1;\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var currentTarget = event.currentTarget;\n      var len = currentTarget.value.length;\n      var metaKey = event.metaKey || event.ctrlKey;\n      var optionIndex = this.findLastOptionIndex();\n      if (this.multiple && event.shiftKey && metaKey) {\n        this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n      }\n      currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n      this.focusedOptionIndex = -1;\n      event.preventDefault();\n    },\n    onPageUpKey: function onPageUpKey(event) {\n      this.scrollInView(0);\n      event.preventDefault();\n    },\n    onPageDownKey: function onPageDownKey(event) {\n      this.scrollInView(this.visibleOptions.length - 1);\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (!this.typeahead) {\n        if (this.multiple) {\n          if (event.target.value.trim()) {\n            this.updateModel(event, [].concat(_toConsumableArray(this.d_value || []), [event.target.value.trim()]));\n            this.$refs.focusInput.value = '';\n          }\n        }\n      } else {\n        if (!this.overlayVisible) {\n          this.focusedOptionIndex = -1; // reset\n          this.onArrowDownKey(event);\n        } else {\n          if (this.focusedOptionIndex !== -1) {\n            if (this.multiple && event.shiftKey) {\n              this.onOptionSelectRange(event, this.focusedOptionIndex);\n              event.preventDefault();\n            } else {\n              this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n          }\n          this.hide();\n        }\n      }\n    },\n    onSpaceKey: function onSpaceKey(event) {\n      if (this.focusedOptionIndex !== -1) {\n        this.onEnterKey(event);\n      }\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      this.overlayVisible && this.hide(true);\n      event.preventDefault();\n    },\n    onTabKey: function onTabKey(event) {\n      if (this.focusedOptionIndex !== -1) {\n        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n      }\n      this.overlayVisible && this.hide();\n    },\n    onShiftKey: function onShiftKey() {\n      this.startRangeIndex = this.focusedOptionIndex;\n    },\n    onBackspaceKey: function onBackspaceKey(event) {\n      if (this.multiple) {\n        if (isNotEmpty(this.d_value) && !this.$refs.focusInput.value) {\n          var removedValue = this.d_value[this.d_value.length - 1];\n          var newValue = this.d_value.slice(0, -1);\n          this.writeValue(newValue, event);\n          this.$emit('item-unselect', {\n            originalEvent: event,\n            value: removedValue\n          });\n          this.$emit('option-unselect', {\n            originalEvent: event,\n            value: removedValue\n          });\n        }\n        event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n      }\n    },\n    onArrowLeftKeyOnMultiple: function onArrowLeftKeyOnMultiple() {\n      this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n    },\n    onArrowRightKeyOnMultiple: function onArrowRightKeyOnMultiple() {\n      this.focusedMultipleOptionIndex++;\n      if (this.focusedMultipleOptionIndex > this.d_value.length - 1) {\n        this.focusedMultipleOptionIndex = -1;\n        focus(this.$refs.focusInput);\n      }\n    },\n    onBackspaceKeyOnMultiple: function onBackspaceKeyOnMultiple(event) {\n      if (this.focusedMultipleOptionIndex !== -1) {\n        this.removeOption(event, this.focusedMultipleOptionIndex);\n      }\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      addStyle(el, {\n        position: 'absolute',\n        top: '0'\n      });\n      this.alignOverlay();\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.$emit('show');\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.$emit('hide');\n      this.overlay = null;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    alignOverlay: function alignOverlay() {\n      var target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n      if (this.appendTo === 'self') {\n        relativePosition(this.overlay, target);\n      } else {\n        this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n        absolutePosition(this.overlay, target);\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this6 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this6.overlayVisible && _this6.overlay && _this6.isOutsideClicked(event)) {\n            _this6.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener, true);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener, true);\n        this.outsideClickListener = null;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this7 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, function () {\n          if (_this7.overlayVisible) {\n            _this7.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this8 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this8.overlayVisible && !isTouchDevice()) {\n            _this8.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    isOutsideClicked: function isOutsideClicked(event) {\n      return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n    },\n    isInputClicked: function isInputClicked(event) {\n      if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);else return event.target === this.$refs.focusInput.$el;\n    },\n    isDropdownClicked: function isDropdownClicked(event) {\n      return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n    },\n    isOptionMatched: function isOptionMatched(option, value) {\n      var _this$getOptionLabel;\n      return this.isValidOption(option) && ((_this$getOptionLabel = this.getOptionLabel(option)) === null || _this$getOptionLabel === void 0 ? void 0 : _this$getOptionLabel.toLocaleLowerCase(this.searchLocale)) === value.toLocaleLowerCase(this.searchLocale);\n    },\n    isValidOption: function isValidOption(option) {\n      return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n    },\n    isValidSelectedOption: function isValidSelectedOption(option) {\n      return this.isValidOption(option) && this.isSelected(option);\n    },\n    isEquals: function isEquals(value1, value2) {\n      return equals(value1, value2, this.equalityKey);\n    },\n    isSelected: function isSelected(option) {\n      var _this9 = this;\n      var optionValue = this.getOptionValue(option);\n      return this.multiple ? (this.d_value || []).some(function (value) {\n        return _this9.isEquals(value, optionValue);\n      }) : this.isEquals(this.d_value, this.getOptionValue(option));\n    },\n    findFirstOptionIndex: function findFirstOptionIndex() {\n      var _this10 = this;\n      return this.visibleOptions.findIndex(function (option) {\n        return _this10.isValidOption(option);\n      });\n    },\n    findLastOptionIndex: function findLastOptionIndex() {\n      var _this11 = this;\n      return findLastIndex(this.visibleOptions, function (option) {\n        return _this11.isValidOption(option);\n      });\n    },\n    findNextOptionIndex: function findNextOptionIndex(index) {\n      var _this12 = this;\n      var matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this12.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n    },\n    findPrevOptionIndex: function findPrevOptionIndex(index) {\n      var _this13 = this;\n      var matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this13.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findSelectedOptionIndex: function findSelectedOptionIndex() {\n      var _this14 = this;\n      return this.$filled ? this.visibleOptions.findIndex(function (option) {\n        return _this14.isValidSelectedOption(option);\n      }) : -1;\n    },\n    findFirstFocusedOptionIndex: function findFirstFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n    },\n    findLastFocusedOptionIndex: function findLastFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n    },\n    search: function search(event, query, source) {\n      //allow empty string but not undefined or null\n      if (query === undefined || query === null) {\n        return;\n      }\n\n      //do not search blank values on input change\n      if (source === 'input' && query.trim().length === 0) {\n        return;\n      }\n      this.searching = true;\n      this.$emit('complete', {\n        originalEvent: event,\n        query: query\n      });\n    },\n    removeOption: function removeOption(event, index) {\n      var _this15 = this;\n      var removedOption = this.d_value[index];\n      var value = this.d_value.filter(function (_, i) {\n        return i !== index;\n      }).map(function (option) {\n        return _this15.getOptionValue(option);\n      });\n      this.updateModel(event, value);\n      this.$emit('item-unselect', {\n        originalEvent: event,\n        value: removedOption\n      });\n      this.$emit('option-unselect', {\n        originalEvent: event,\n        value: removedOption\n      });\n      this.dirty = true;\n      focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n    },\n    changeFocusedOptionIndex: function changeFocusedOptionIndex(event, index) {\n      if (this.focusedOptionIndex !== index) {\n        this.focusedOptionIndex = index;\n        this.scrollInView();\n        if (this.selectOnFocus) {\n          this.onOptionSelect(event, this.visibleOptions[index], false);\n        }\n      }\n    },\n    scrollInView: function scrollInView() {\n      var _this16 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      this.$nextTick(function () {\n        var id = index !== -1 ? \"\".concat(_this16.$id, \"_\").concat(index) : _this16.focusedOptionId;\n        var element = findSingle(_this16.list, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n        if (element) {\n          element.scrollIntoView && element.scrollIntoView({\n            block: 'nearest',\n            inline: 'start'\n          });\n        } else if (!_this16.virtualScrollerDisabled) {\n          _this16.virtualScroller && _this16.virtualScroller.scrollToIndex(index !== -1 ? index : _this16.focusedOptionIndex);\n        }\n      });\n    },\n    autoUpdateModel: function autoUpdateModel() {\n      if (this.selectOnFocus && this.autoOptionFocus && !this.$filled) {\n        this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n        this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n      }\n    },\n    updateModel: function updateModel(event, value) {\n      this.writeValue(value, event);\n      this.$emit('change', {\n        originalEvent: event,\n        value: value\n      });\n    },\n    flatOptions: function flatOptions(options) {\n      var _this17 = this;\n      return (options || []).reduce(function (result, option, index) {\n        result.push({\n          optionGroup: option,\n          group: true,\n          index: index\n        });\n        var optionGroupChildren = _this17.getOptionGroupChildren(option);\n        optionGroupChildren && optionGroupChildren.forEach(function (o) {\n          return result.push(o);\n        });\n        return result;\n      }, []);\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    listRef: function listRef(el, contentRef) {\n      this.list = el;\n      contentRef && contentRef(el); // For VirtualScroller\n    },\n    virtualScrollerRef: function virtualScrollerRef(el) {\n      this.virtualScroller = el;\n    },\n    findNextSelectedOptionIndex: function findNextSelectedOptionIndex(index) {\n      var _this18 = this;\n      var matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this18.isValidSelectedOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n    },\n    findPrevSelectedOptionIndex: function findPrevSelectedOptionIndex(index) {\n      var _this19 = this;\n      var matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this19.isValidSelectedOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n    },\n    findNearestSelectedOptionIndex: function findNearestSelectedOptionIndex(index) {\n      var firstCheckUp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var matchedOptionIndex = -1;\n      if (this.$filled) {\n        if (firstCheckUp) {\n          matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n          matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n        } else {\n          matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n          matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n        }\n      }\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    }\n  },\n  computed: {\n    visibleOptions: function visibleOptions() {\n      return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n    },\n    inputValue: function inputValue() {\n      if (this.$filled) {\n        if (_typeof$1(this.d_value) === 'object') {\n          var label = this.getOptionLabel(this.d_value);\n          return label != null ? label : this.d_value;\n        } else {\n          return this.d_value;\n        }\n      } else {\n        return '';\n      }\n    },\n    // @deprecated use $filled instead.\n    hasSelectedOption: function hasSelectedOption() {\n      return this.$filled;\n    },\n    equalityKey: function equalityKey() {\n      // @todo: The 'optionValue' properties can be added.\n      return this.dataKey;\n    },\n    searchResultMessageText: function searchResultMessageText() {\n      return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n    },\n    searchMessageText: function searchMessageText() {\n      return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n    },\n    emptySearchMessageText: function emptySearchMessageText() {\n      return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n    },\n    selectionMessageText: function selectionMessageText() {\n      return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n    },\n    emptySelectionMessageText: function emptySelectionMessageText() {\n      return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n    },\n    selectedMessageText: function selectedMessageText() {\n      return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n    },\n    listAriaLabel: function listAriaLabel() {\n      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedOptionIndex !== -1 ? \"\".concat(this.$id, \"_\").concat(this.focusedOptionIndex) : null;\n    },\n    focusedMultipleOptionId: function focusedMultipleOptionId() {\n      return this.focusedMultipleOptionIndex !== -1 ? \"\".concat(this.$id, \"_multiple_option_\").concat(this.focusedMultipleOptionIndex) : null;\n    },\n    ariaSetSize: function ariaSetSize() {\n      var _this20 = this;\n      return this.visibleOptions.filter(function (option) {\n        return !_this20.isOptionGroup(option);\n      }).length;\n    },\n    virtualScrollerDisabled: function virtualScrollerDisabled() {\n      return !this.virtualScrollerOptions;\n    },\n    panelId: function panelId() {\n      return this.$id + '_panel';\n    },\n    containerDataP: function containerDataP() {\n      return cn({\n        fluid: this.$fluid\n      });\n    },\n    overlayDataP: function overlayDataP() {\n      return cn(_defineProperty$1({}, 'portal-' + this.appendTo, 'portal-' + this.appendTo));\n    },\n    inputMultipleDataP: function inputMultipleDataP() {\n      return cn(_defineProperty$1({\n        invalid: this.$invalid,\n        disabled: this.disabled,\n        focus: this.focused,\n        fluid: this.$fluid,\n        filled: this.$variant === 'filled',\n        empty: !this.$filled\n      }, this.size, this.size));\n    }\n  },\n  components: {\n    InputText: InputText,\n    VirtualScroller: VirtualScroller,\n    Portal: Portal,\n    ChevronDownIcon: ChevronDownIcon,\n    SpinnerIcon: SpinnerIcon,\n    Chip: Chip\n  },\n  directives: {\n    ripple: Ripple\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"data-p\"];\nvar _hoisted_2 = [\"aria-activedescendant\", \"data-p-has-dropdown\", \"data-p\"];\nvar _hoisted_3 = [\"id\", \"aria-label\", \"aria-setsize\", \"aria-posinset\"];\nvar _hoisted_4 = [\"id\", \"placeholder\", \"tabindex\", \"disabled\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"aria-invalid\"];\nvar _hoisted_5 = [\"data-p-has-dropdown\"];\nvar _hoisted_6 = [\"disabled\", \"aria-expanded\", \"aria-controls\"];\nvar _hoisted_7 = [\"id\", \"data-p\"];\nvar _hoisted_8 = [\"id\", \"aria-label\"];\nvar _hoisted_9 = [\"id\"];\nvar _hoisted_10 = [\"id\", \"aria-label\", \"aria-selected\", \"aria-disabled\", \"aria-setsize\", \"aria-posinset\", \"onClick\", \"onMousemove\", \"data-p-selected\", \"data-p-focused\", \"data-p-disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_InputText = resolveComponent(\"InputText\");\n  var _component_Chip = resolveComponent(\"Chip\");\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_VirtualScroller = resolveComponent(\"VirtualScroller\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('root'),\n    style: _ctx.sx('root'),\n    onClick: _cache[11] || (_cache[11] = function () {\n      return $options.onContainerClick && $options.onContainerClick.apply($options, arguments);\n    }),\n    \"data-p\": $options.containerDataP\n  }, _ctx.ptmi('root')), [!_ctx.multiple ? (openBlock(), createBlock(_component_InputText, {\n    key: 0,\n    ref: \"focusInput\",\n    id: _ctx.inputId,\n    type: \"text\",\n    name: _ctx.$formName,\n    \"class\": normalizeClass([_ctx.cx('pcInputText'), _ctx.inputClass]),\n    style: normalizeStyle(_ctx.inputStyle),\n    value: $options.inputValue,\n    placeholder: _ctx.placeholder,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    fluid: _ctx.$fluid,\n    disabled: _ctx.disabled,\n    size: _ctx.size,\n    invalid: _ctx.invalid,\n    variant: _ctx.variant,\n    autocomplete: \"off\",\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-autocomplete\": \"list\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $options.panelId,\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    onFocus: $options.onFocus,\n    onBlur: $options.onBlur,\n    onKeydown: $options.onKeyDown,\n    onInput: $options.onInput,\n    onChange: $options.onChange,\n    unstyled: _ctx.unstyled,\n    \"data-p-has-dropdown\": _ctx.dropdown,\n    pt: _ctx.ptm('pcInputText')\n  }, null, 8, [\"id\", \"name\", \"class\", \"style\", \"value\", \"placeholder\", \"tabindex\", \"fluid\", \"disabled\", \"size\", \"invalid\", \"variant\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"onFocus\", \"onBlur\", \"onKeydown\", \"onInput\", \"onChange\", \"unstyled\", \"data-p-has-dropdown\", \"pt\"])) : createCommentVNode(\"\", true), _ctx.multiple ? (openBlock(), createElementBlock(\"ul\", mergeProps({\n    key: 1,\n    ref: \"multiContainer\",\n    \"class\": _ctx.cx('inputMultiple'),\n    tabindex: \"-1\",\n    role: \"listbox\",\n    \"aria-orientation\": \"horizontal\",\n    \"aria-activedescendant\": $data.focused ? $options.focusedMultipleOptionId : undefined,\n    onFocus: _cache[5] || (_cache[5] = function () {\n      return $options.onMultipleContainerFocus && $options.onMultipleContainerFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[6] || (_cache[6] = function () {\n      return $options.onMultipleContainerBlur && $options.onMultipleContainerBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[7] || (_cache[7] = function () {\n      return $options.onMultipleContainerKeyDown && $options.onMultipleContainerKeyDown.apply($options, arguments);\n    }),\n    \"data-p-has-dropdown\": _ctx.dropdown,\n    \"data-p\": $options.inputMultipleDataP\n  }, _ctx.ptm('inputMultiple')), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.d_value, function (option, i) {\n    return openBlock(), createElementBlock(\"li\", mergeProps({\n      key: \"\".concat(i, \"_\").concat($options.getOptionLabel(option)),\n      id: _ctx.$id + '_multiple_option_' + i,\n      \"class\": _ctx.cx('chipItem', {\n        i: i\n      }),\n      role: \"option\",\n      \"aria-label\": $options.getOptionLabel(option),\n      \"aria-selected\": true,\n      \"aria-setsize\": _ctx.d_value.length,\n      \"aria-posinset\": i + 1,\n      ref_for: true\n    }, _ctx.ptm('chipItem')), [renderSlot(_ctx.$slots, \"chip\", mergeProps({\n      \"class\": _ctx.cx('pcChip'),\n      value: option,\n      index: i,\n      removeCallback: function removeCallback(event) {\n        return $options.removeOption(event, i);\n      },\n      ref_for: true\n    }, _ctx.ptm('pcChip')), function () {\n      return [createVNode(_component_Chip, {\n        \"class\": normalizeClass(_ctx.cx('pcChip')),\n        label: $options.getOptionLabel(option),\n        removeIcon: _ctx.chipIcon || _ctx.removeTokenIcon,\n        removable: \"\",\n        unstyled: _ctx.unstyled,\n        onRemove: function onRemove($event) {\n          return $options.removeOption($event, i);\n        },\n        \"data-p-focused\": $data.focusedMultipleOptionIndex === i,\n        pt: _ctx.ptm('pcChip')\n      }, {\n        removeicon: withCtx(function () {\n          return [renderSlot(_ctx.$slots, _ctx.$slots.chipicon ? 'chipicon' : 'removetokenicon', {\n            \"class\": normalizeClass(_ctx.cx('chipIcon')),\n            index: i,\n            removeCallback: function removeCallback(event) {\n              return $options.removeOption(event, i);\n            }\n          })];\n        }),\n        _: 2\n      }, 1032, [\"class\", \"label\", \"removeIcon\", \"unstyled\", \"onRemove\", \"data-p-focused\", \"pt\"])];\n    })], 16, _hoisted_3);\n  }), 128)), createElementVNode(\"li\", mergeProps({\n    \"class\": _ctx.cx('inputChip'),\n    role: \"option\"\n  }, _ctx.ptm('inputChip')), [createElementVNode(\"input\", mergeProps({\n    ref: \"focusInput\",\n    id: _ctx.inputId,\n    type: \"text\",\n    style: _ctx.inputStyle,\n    \"class\": _ctx.inputClass,\n    placeholder: _ctx.placeholder,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    disabled: _ctx.disabled,\n    autocomplete: \"off\",\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-autocomplete\": \"list\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": _ctx.$id + '_list',\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    onInput: _cache[3] || (_cache[3] = function () {\n      return $options.onInput && $options.onInput.apply($options, arguments);\n    }),\n    onChange: _cache[4] || (_cache[4] = function () {\n      return $options.onChange && $options.onChange.apply($options, arguments);\n    })\n  }, _ctx.ptm('input')), null, 16, _hoisted_4)], 16)], 16, _hoisted_2)) : createCommentVNode(\"\", true), $data.searching || _ctx.loading ? renderSlot(_ctx.$slots, _ctx.$slots.loader ? 'loader' : 'loadingicon', {\n    key: 2,\n    \"class\": normalizeClass(_ctx.cx('loader'))\n  }, function () {\n    return [_ctx.loader || _ctx.loadingIcon ? (openBlock(), createElementBlock(\"i\", mergeProps({\n      key: 0,\n      \"class\": ['pi-spin', _ctx.cx('loader'), _ctx.loader, _ctx.loadingIcon],\n      \"aria-hidden\": \"true\",\n      \"data-p-has-dropdown\": _ctx.dropdown\n    }, _ctx.ptm('loader')), null, 16, _hoisted_5)) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('loader'),\n      spin: \"\",\n      \"aria-hidden\": \"true\",\n      \"data-p-has-dropdown\": _ctx.dropdown\n    }, _ctx.ptm('loader')), null, 16, [\"class\", \"data-p-has-dropdown\"]))];\n  }) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, _ctx.$slots.dropdown ? 'dropdown' : 'dropdownbutton', {\n    toggleCallback: function toggleCallback(event) {\n      return $options.onDropdownClick(event);\n    }\n  }, function () {\n    return [_ctx.dropdown ? (openBlock(), createElementBlock(\"button\", mergeProps({\n      key: 0,\n      ref: \"dropdownButton\",\n      type: \"button\",\n      \"class\": [_ctx.cx('dropdown'), _ctx.dropdownClass],\n      disabled: _ctx.disabled,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-expanded\": $data.overlayVisible,\n      \"aria-controls\": $options.panelId,\n      onClick: _cache[8] || (_cache[8] = function () {\n        return $options.onDropdownClick && $options.onDropdownClick.apply($options, arguments);\n      })\n    }, _ctx.ptm('dropdown')), [renderSlot(_ctx.$slots, \"dropdownicon\", {\n      \"class\": normalizeClass(_ctx.dropdownIcon)\n    }, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.dropdownIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n        \"class\": _ctx.dropdownIcon\n      }, _ctx.ptm('dropdownIcon')), null, 16, [\"class\"]))];\n    })], 16, _hoisted_6)) : createCommentVNode(\"\", true)];\n  }), _ctx.typeahead ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 3,\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"class\": \"p-hidden-accessible\"\n  }, _ctx.ptm('hiddenSearchResult'), {\n    \"data-p-hidden-accessible\": true\n  }), toDisplayString($options.searchResultMessageText), 17)) : createCommentVNode(\"\", true), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            id: $options.panelId,\n            \"class\": [_ctx.cx('overlay'), _ctx.panelClass, _ctx.overlayClass],\n            style: _objectSpread(_objectSpread({}, _ctx.panelStyle), _ctx.overlayStyle),\n            onClick: _cache[9] || (_cache[9] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            onKeydown: _cache[10] || (_cache[10] = function () {\n              return $options.onOverlayKeyDown && $options.onOverlayKeyDown.apply($options, arguments);\n            }),\n            \"data-p\": $options.overlayDataP\n          }, _ctx.ptm('overlay')), [renderSlot(_ctx.$slots, \"header\", {\n            value: _ctx.d_value,\n            suggestions: $options.visibleOptions\n          }), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('listContainer'),\n            style: {\n              'max-height': $options.virtualScrollerDisabled ? _ctx.scrollHeight : ''\n            }\n          }, _ctx.ptm('listContainer')), [createVNode(_component_VirtualScroller, mergeProps({\n            ref: $options.virtualScrollerRef\n          }, _ctx.virtualScrollerOptions, {\n            style: {\n              height: _ctx.scrollHeight\n            },\n            items: $options.visibleOptions,\n            tabindex: -1,\n            disabled: $options.virtualScrollerDisabled,\n            pt: _ctx.ptm('virtualScroller')\n          }), createSlots({\n            content: withCtx(function (_ref) {\n              var styleClass = _ref.styleClass,\n                contentRef = _ref.contentRef,\n                items = _ref.items,\n                getItemOptions = _ref.getItemOptions,\n                contentStyle = _ref.contentStyle,\n                itemSize = _ref.itemSize;\n              return [createElementVNode(\"ul\", mergeProps({\n                ref: function ref(el) {\n                  return $options.listRef(el, contentRef);\n                },\n                id: _ctx.$id + '_list',\n                \"class\": [_ctx.cx('list'), styleClass],\n                style: contentStyle,\n                role: \"listbox\",\n                \"aria-label\": $options.listAriaLabel\n              }, _ctx.ptm('list')), [(openBlock(true), createElementBlock(Fragment, null, renderList(items, function (option, i) {\n                return openBlock(), createElementBlock(Fragment, {\n                  key: $options.getOptionRenderKey(option, $options.getOptionIndex(i, getItemOptions))\n                }, [$options.isOptionGroup(option) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                  key: 0,\n                  id: _ctx.$id + '_' + $options.getOptionIndex(i, getItemOptions),\n                  style: {\n                    height: itemSize ? itemSize + 'px' : undefined\n                  },\n                  \"class\": _ctx.cx('optionGroup'),\n                  role: \"option\",\n                  ref_for: true\n                }, _ctx.ptm('optionGroup')), [renderSlot(_ctx.$slots, \"optiongroup\", {\n                  option: option.optionGroup,\n                  index: $options.getOptionIndex(i, getItemOptions)\n                }, function () {\n                  return [createTextVNode(toDisplayString($options.getOptionGroupLabel(option.optionGroup)), 1)];\n                })], 16, _hoisted_9)) : withDirectives((openBlock(), createElementBlock(\"li\", mergeProps({\n                  key: 1,\n                  id: _ctx.$id + '_' + $options.getOptionIndex(i, getItemOptions),\n                  style: {\n                    height: itemSize ? itemSize + 'px' : undefined\n                  },\n                  \"class\": _ctx.cx('option', {\n                    option: option,\n                    i: i,\n                    getItemOptions: getItemOptions\n                  }),\n                  role: \"option\",\n                  \"aria-label\": $options.getOptionLabel(option),\n                  \"aria-selected\": $options.isSelected(option),\n                  \"aria-disabled\": $options.isOptionDisabled(option),\n                  \"aria-setsize\": $options.ariaSetSize,\n                  \"aria-posinset\": $options.getAriaPosInset($options.getOptionIndex(i, getItemOptions)),\n                  onClick: function onClick($event) {\n                    return $options.onOptionSelect($event, option);\n                  },\n                  onMousemove: function onMousemove($event) {\n                    return $options.onOptionMouseMove($event, $options.getOptionIndex(i, getItemOptions));\n                  },\n                  \"data-p-selected\": $options.isSelected(option),\n                  \"data-p-focused\": $data.focusedOptionIndex === $options.getOptionIndex(i, getItemOptions),\n                  \"data-p-disabled\": $options.isOptionDisabled(option),\n                  ref_for: true\n                }, $options.getPTOptions(option, getItemOptions, i, 'option')), [renderSlot(_ctx.$slots, \"option\", {\n                  option: option,\n                  index: $options.getOptionIndex(i, getItemOptions)\n                }, function () {\n                  return [createTextVNode(toDisplayString($options.getOptionLabel(option)), 1)];\n                })], 16, _hoisted_10)), [[_directive_ripple]])], 64);\n              }), 128)), _ctx.showEmptyMessage && (!items || items && items.length === 0) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                key: 0,\n                \"class\": _ctx.cx('emptyMessage'),\n                role: \"option\"\n              }, _ctx.ptm('emptyMessage')), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n                return [createTextVNode(toDisplayString($options.searchResultMessageText), 1)];\n              })], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_8)];\n            }),\n            _: 2\n          }, [_ctx.$slots.loader ? {\n            name: \"loader\",\n            fn: withCtx(function (_ref2) {\n              var options = _ref2.options;\n              return [renderSlot(_ctx.$slots, \"loader\", {\n                options: options\n              })];\n            }),\n            key: \"0\"\n          } : undefined]), 1040, [\"style\", \"items\", \"disabled\", \"pt\"])], 16), renderSlot(_ctx.$slots, \"footer\", {\n            value: _ctx.d_value,\n            suggestions: $options.visibleOptions\n          }), createElementVNode(\"span\", mergeProps({\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenSelectedMessage'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.selectedMessageText), 17)], 16, _hoisted_7)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"version":3}