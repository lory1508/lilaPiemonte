{"version":3,"file":"index.mjs","sources":["../../../../../../node_modules/primevue/inputchips/index.mjs?nuxt_component=async&nuxt_component_name=InputChips&nuxt_component_export=default"],"sourcesContent":["import Chip from 'primevue/chip';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputChipsStyle from 'primevue/inputchips/style';\nimport { resolveComponent, createElementBlock, openBlock, mergeProps, createElementVNode, Fragment, renderList, renderSlot, normalizeClass, createVNode, withCtx } from 'vue';\n\nvar script$1 = {\n  name: 'BaseInputChips',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: {\n      type: Array,\n      \"default\": null\n    },\n    max: {\n      type: Number,\n      \"default\": null\n    },\n    separator: {\n      type: [String, Object],\n      \"default\": null\n    },\n    addOnBlur: {\n      type: Boolean,\n      \"default\": null\n    },\n    allowDuplicate: {\n      type: Boolean,\n      \"default\": true\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    variant: {\n      type: String,\n      \"default\": null\n    },\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    inputProps: {\n      type: null,\n      \"default\": null\n    },\n    removeTokenIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    chipIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: InputChipsStyle,\n  provide: function provide() {\n    return {\n      $pcInputChips: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar script = {\n  name: 'InputChips',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'add', 'remove', 'focus', 'blur'],\n  data: function data() {\n    return {\n      inputValue: null,\n      focused: false,\n      focusedIndex: null\n    };\n  },\n  mounted: function mounted() {\n    console.warn('Deprecated since v4. Use AutoComplete component instead with its typeahead property.');\n  },\n  methods: {\n    onWrapperClick: function onWrapperClick() {\n      this.$refs.input.focus();\n    },\n    onInput: function onInput(event) {\n      this.inputValue = event.target.value;\n      this.focusedIndex = null;\n    },\n    onFocus: function onFocus(event) {\n      this.focused = true;\n      this.focusedIndex = null;\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focused = false;\n      this.focusedIndex = null;\n      if (this.addOnBlur) {\n        this.addItem(event, event.target.value, false);\n      }\n      this.$emit('blur', event);\n    },\n    onKeyDown: function onKeyDown(event) {\n      var inputValue = event.target.value;\n      switch (event.code) {\n        case 'Backspace':\n          if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n            if (this.focusedIndex !== null) {\n              this.removeItem(event, this.focusedIndex);\n            } else this.removeItem(event, this.modelValue.length - 1);\n          }\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          if (inputValue && inputValue.trim().length && !this.maxedOut) {\n            this.addItem(event, inputValue, true);\n          }\n          break;\n        case 'ArrowLeft':\n          if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n            this.$refs.container.focus();\n          }\n          break;\n        case 'ArrowRight':\n          event.stopPropagation();\n          break;\n        default:\n          if (this.separator) {\n            if (this.separator === event.key || event.key.match(this.separator)) {\n              this.addItem(event, inputValue, true);\n            }\n          }\n          break;\n      }\n    },\n    onPaste: function onPaste(event) {\n      var _this = this;\n      if (this.separator) {\n        var separator = this.separator.replace('\\\\n', '\\n').replace('\\\\r', '\\r').replace('\\\\t', '\\t');\n        var pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n        if (pastedData) {\n          var value = this.modelValue || [];\n          var pastedValues = pastedData.split(separator);\n          pastedValues = pastedValues.filter(function (val) {\n            return _this.allowDuplicate || value.indexOf(val) === -1;\n          });\n          value = [].concat(_toConsumableArray(value), _toConsumableArray(pastedValues));\n          this.updateModel(event, value, true);\n        }\n      }\n    },\n    onContainerFocus: function onContainerFocus() {\n      this.focused = true;\n    },\n    onContainerBlur: function onContainerBlur() {\n      this.focusedIndex = -1;\n      this.focused = false;\n    },\n    onContainerKeyDown: function onContainerKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowLeft':\n          this.onArrowLeftKeyOn(event);\n          break;\n        case 'ArrowRight':\n          this.onArrowRightKeyOn(event);\n          break;\n        case 'Backspace':\n          this.onBackspaceKeyOn(event);\n          break;\n      }\n    },\n    onArrowLeftKeyOn: function onArrowLeftKeyOn() {\n      if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n        this.focusedIndex = this.focusedIndex === null ? this.modelValue.length - 1 : this.focusedIndex - 1;\n        if (this.focusedIndex < 0) this.focusedIndex = 0;\n      }\n    },\n    onArrowRightKeyOn: function onArrowRightKeyOn() {\n      if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n        if (this.focusedIndex === this.modelValue.length - 1) {\n          this.focusedIndex = null;\n          this.$refs.input.focus();\n        } else {\n          this.focusedIndex++;\n        }\n      }\n    },\n    onBackspaceKeyOn: function onBackspaceKeyOn(event) {\n      if (this.focusedIndex !== null) {\n        this.removeItem(event, this.focusedIndex);\n      }\n    },\n    updateModel: function updateModel(event, value, preventDefault) {\n      var _this2 = this;\n      this.$emit('update:modelValue', value);\n      this.$emit('add', {\n        originalEvent: event,\n        value: value\n      });\n      this.$refs.input.value = '';\n      this.inputValue = '';\n      setTimeout(function () {\n        _this2.maxedOut && (_this2.focused = false);\n      }, 0);\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    },\n    addItem: function addItem(event, item, preventDefault) {\n      if (item && item.trim().length) {\n        var value = this.modelValue ? _toConsumableArray(this.modelValue) : [];\n        if (this.allowDuplicate || value.indexOf(item) === -1) {\n          value.push(item);\n          this.updateModel(event, value, preventDefault);\n        }\n      }\n    },\n    removeItem: function removeItem(event, index) {\n      if (this.disabled) {\n        return;\n      }\n      var values = _toConsumableArray(this.modelValue);\n      var removedItem = values.splice(index, 1);\n      this.focusedIndex = null;\n      this.$refs.input.focus();\n      this.$emit('update:modelValue', values);\n      this.$emit('remove', {\n        originalEvent: event,\n        value: removedItem\n      });\n    }\n  },\n  computed: {\n    maxedOut: function maxedOut() {\n      return this.max && this.modelValue && this.max === this.modelValue.length;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedIndex !== null ? \"\".concat(this.$id, \"_inputchips_item_\").concat(this.focusedIndex) : null;\n    }\n  },\n  components: {\n    Chip: Chip\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar _hoisted_1 = [\"aria-labelledby\", \"aria-label\", \"aria-activedescendant\"];\nvar _hoisted_2 = [\"id\", \"aria-label\", \"aria-setsize\", \"aria-posinset\", \"data-p-focused\"];\nvar _hoisted_3 = [\"id\", \"disabled\", \"placeholder\", \"aria-invalid\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Chip = resolveComponent(\"Chip\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [createElementVNode(\"ul\", mergeProps({\n    ref: \"container\",\n    \"class\": _ctx.cx('input'),\n    tabindex: \"-1\",\n    role: \"listbox\",\n    \"aria-orientation\": \"horizontal\",\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    onClick: _cache[5] || (_cache[5] = function ($event) {\n      return $options.onWrapperClick();\n    }),\n    onFocus: _cache[6] || (_cache[6] = function () {\n      return $options.onContainerFocus && $options.onContainerFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[7] || (_cache[7] = function () {\n      return $options.onContainerBlur && $options.onContainerBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[8] || (_cache[8] = function () {\n      return $options.onContainerKeyDown && $options.onContainerKeyDown.apply($options, arguments);\n    })\n  }, _ctx.ptm('input')), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.modelValue, function (val, i) {\n    return openBlock(), createElementBlock(\"li\", mergeProps({\n      key: \"\".concat(i, \"_\").concat(val),\n      id: _ctx.$id + '_inputchips_item_' + i,\n      role: \"option\",\n      \"class\": _ctx.cx('chipItem', {\n        index: i\n      }),\n      \"aria-label\": val,\n      \"aria-selected\": true,\n      \"aria-setsize\": _ctx.modelValue.length,\n      \"aria-posinset\": i + 1,\n      ref_for: true\n    }, _ctx.ptm('chipItem'), {\n      \"data-p-focused\": $data.focusedIndex === i\n    }), [renderSlot(_ctx.$slots, \"chip\", {\n      \"class\": normalizeClass(_ctx.cx('pcChip')),\n      index: i,\n      value: val,\n      removeCallback: function removeCallback(event) {\n        return _ctx.removeOption(event, i);\n      }\n    }, function () {\n      return [createVNode(_component_Chip, {\n        \"class\": normalizeClass(_ctx.cx('pcChip')),\n        label: val,\n        removeIcon: _ctx.chipIcon || _ctx.removeTokenIcon,\n        removable: \"\",\n        unstyled: _ctx.unstyled,\n        onRemove: function onRemove($event) {\n          return $options.removeItem($event, i);\n        },\n        pt: _ctx.ptm('pcChip')\n      }, {\n        removeicon: withCtx(function () {\n          return [renderSlot(_ctx.$slots, _ctx.$slots.chipicon ? 'chipicon' : 'removetokenicon', {\n            \"class\": normalizeClass(_ctx.cx('chipIcon')),\n            index: i,\n            removeCallback: function removeCallback(event) {\n              return $options.removeItem(event, i);\n            }\n          })];\n        }),\n        _: 2\n      }, 1032, [\"class\", \"label\", \"removeIcon\", \"unstyled\", \"onRemove\", \"pt\"])];\n    })], 16, _hoisted_2);\n  }), 128)), createElementVNode(\"li\", mergeProps({\n    \"class\": _ctx.cx('inputItem'),\n    role: \"option\"\n  }, _ctx.ptm('inputItem')), [createElementVNode(\"input\", mergeProps({\n    ref: \"input\",\n    id: _ctx.inputId,\n    type: \"text\",\n    \"class\": _ctx.inputClass,\n    style: _ctx.inputStyle,\n    disabled: _ctx.disabled || $options.maxedOut,\n    placeholder: _ctx.placeholder,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onFocus: _cache[0] || (_cache[0] = function ($event) {\n      return $options.onFocus($event);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function ($event) {\n      return $options.onBlur($event);\n    }),\n    onInput: _cache[2] || (_cache[2] = function () {\n      return $options.onInput && $options.onInput.apply($options, arguments);\n    }),\n    onKeydown: _cache[3] || (_cache[3] = function ($event) {\n      return $options.onKeyDown($event);\n    }),\n    onPaste: _cache[4] || (_cache[4] = function ($event) {\n      return $options.onPaste($event);\n    })\n  }, _objectSpread(_objectSpread({}, _ctx.inputProps), _ctx.ptm('inputItemField'))), null, 16, _hoisted_3)], 16)], 16, _hoisted_1)], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"mappings":";AACA,MAA0B,iBAAA,qBAAA,MAAA,OAAA,cAAA,EAAA,KAAA,OAAA,EAAA,SAAA,KAAA,EAAA,WAAA,CAAA,CAAA;","x_google_ignoreList":[0]}